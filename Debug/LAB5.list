
LAB5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068cc  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  080069e0  080069e0  000079e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dc8  08006dc8  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006dc8  08006dc8  00007dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006dd0  08006dd0  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dd0  08006dd0  00007dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006dd4  08006dd4  00007dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006dd8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  200001d4  08006fac  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000450  08006fac  00008450  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009038  00000000  00000000  000081fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c20  00000000  00000000  00011235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000890  00000000  00000000  00012e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000681  00000000  00000000  000136e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018033  00000000  00000000  00013d69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000adc7  00000000  00000000  0002bd9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000869fd  00000000  00000000  00036b63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bd560  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003354  00000000  00000000  000bd5a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  000c08f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	080069c4 	.word	0x080069c4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	080069c4 	.word	0x080069c4

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_frsub>:
 8000a9c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000aa0:	e002      	b.n	8000aa8 <__addsf3>
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_fsub>:
 8000aa4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000aa8 <__addsf3>:
 8000aa8:	0042      	lsls	r2, r0, #1
 8000aaa:	bf1f      	itttt	ne
 8000aac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ab0:	ea92 0f03 	teqne	r2, r3
 8000ab4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000abc:	d06a      	beq.n	8000b94 <__addsf3+0xec>
 8000abe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ac2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ac6:	bfc1      	itttt	gt
 8000ac8:	18d2      	addgt	r2, r2, r3
 8000aca:	4041      	eorgt	r1, r0
 8000acc:	4048      	eorgt	r0, r1
 8000ace:	4041      	eorgt	r1, r0
 8000ad0:	bfb8      	it	lt
 8000ad2:	425b      	neglt	r3, r3
 8000ad4:	2b19      	cmp	r3, #25
 8000ad6:	bf88      	it	hi
 8000ad8:	4770      	bxhi	lr
 8000ada:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000ade:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ae6:	bf18      	it	ne
 8000ae8:	4240      	negne	r0, r0
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aee:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000af2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4249      	negne	r1, r1
 8000afa:	ea92 0f03 	teq	r2, r3
 8000afe:	d03f      	beq.n	8000b80 <__addsf3+0xd8>
 8000b00:	f1a2 0201 	sub.w	r2, r2, #1
 8000b04:	fa41 fc03 	asr.w	ip, r1, r3
 8000b08:	eb10 000c 	adds.w	r0, r0, ip
 8000b0c:	f1c3 0320 	rsb	r3, r3, #32
 8000b10:	fa01 f103 	lsl.w	r1, r1, r3
 8000b14:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b18:	d502      	bpl.n	8000b20 <__addsf3+0x78>
 8000b1a:	4249      	negs	r1, r1
 8000b1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b20:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b24:	d313      	bcc.n	8000b4e <__addsf3+0xa6>
 8000b26:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b2a:	d306      	bcc.n	8000b3a <__addsf3+0x92>
 8000b2c:	0840      	lsrs	r0, r0, #1
 8000b2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b32:	f102 0201 	add.w	r2, r2, #1
 8000b36:	2afe      	cmp	r2, #254	@ 0xfe
 8000b38:	d251      	bcs.n	8000bde <__addsf3+0x136>
 8000b3a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b42:	bf08      	it	eq
 8000b44:	f020 0001 	biceq.w	r0, r0, #1
 8000b48:	ea40 0003 	orr.w	r0, r0, r3
 8000b4c:	4770      	bx	lr
 8000b4e:	0049      	lsls	r1, r1, #1
 8000b50:	eb40 0000 	adc.w	r0, r0, r0
 8000b54:	3a01      	subs	r2, #1
 8000b56:	bf28      	it	cs
 8000b58:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b5c:	d2ed      	bcs.n	8000b3a <__addsf3+0x92>
 8000b5e:	fab0 fc80 	clz	ip, r0
 8000b62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b66:	ebb2 020c 	subs.w	r2, r2, ip
 8000b6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b6e:	bfaa      	itet	ge
 8000b70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b74:	4252      	neglt	r2, r2
 8000b76:	4318      	orrge	r0, r3
 8000b78:	bfbc      	itt	lt
 8000b7a:	40d0      	lsrlt	r0, r2
 8000b7c:	4318      	orrlt	r0, r3
 8000b7e:	4770      	bx	lr
 8000b80:	f092 0f00 	teq	r2, #0
 8000b84:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b88:	bf06      	itte	eq
 8000b8a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b8e:	3201      	addeq	r2, #1
 8000b90:	3b01      	subne	r3, #1
 8000b92:	e7b5      	b.n	8000b00 <__addsf3+0x58>
 8000b94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b9c:	bf18      	it	ne
 8000b9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba2:	d021      	beq.n	8000be8 <__addsf3+0x140>
 8000ba4:	ea92 0f03 	teq	r2, r3
 8000ba8:	d004      	beq.n	8000bb4 <__addsf3+0x10c>
 8000baa:	f092 0f00 	teq	r2, #0
 8000bae:	bf08      	it	eq
 8000bb0:	4608      	moveq	r0, r1
 8000bb2:	4770      	bx	lr
 8000bb4:	ea90 0f01 	teq	r0, r1
 8000bb8:	bf1c      	itt	ne
 8000bba:	2000      	movne	r0, #0
 8000bbc:	4770      	bxne	lr
 8000bbe:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bc2:	d104      	bne.n	8000bce <__addsf3+0x126>
 8000bc4:	0040      	lsls	r0, r0, #1
 8000bc6:	bf28      	it	cs
 8000bc8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bcc:	4770      	bx	lr
 8000bce:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bd2:	bf3c      	itt	cc
 8000bd4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bd8:	4770      	bxcc	lr
 8000bda:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bde:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000be6:	4770      	bx	lr
 8000be8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bec:	bf16      	itet	ne
 8000bee:	4608      	movne	r0, r1
 8000bf0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bf4:	4601      	movne	r1, r0
 8000bf6:	0242      	lsls	r2, r0, #9
 8000bf8:	bf06      	itte	eq
 8000bfa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bfe:	ea90 0f01 	teqeq	r0, r1
 8000c02:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_ui2f>:
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	e004      	b.n	8000c18 <__aeabi_i2f+0x8>
 8000c0e:	bf00      	nop

08000c10 <__aeabi_i2f>:
 8000c10:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c14:	bf48      	it	mi
 8000c16:	4240      	negmi	r0, r0
 8000c18:	ea5f 0c00 	movs.w	ip, r0
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c24:	4601      	mov	r1, r0
 8000c26:	f04f 0000 	mov.w	r0, #0
 8000c2a:	e01c      	b.n	8000c66 <__aeabi_l2f+0x2a>

08000c2c <__aeabi_ul2f>:
 8000c2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c30:	bf08      	it	eq
 8000c32:	4770      	bxeq	lr
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e00a      	b.n	8000c50 <__aeabi_l2f+0x14>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_l2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c48:	d502      	bpl.n	8000c50 <__aeabi_l2f+0x14>
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	ea5f 0c01 	movs.w	ip, r1
 8000c54:	bf02      	ittt	eq
 8000c56:	4684      	moveq	ip, r0
 8000c58:	4601      	moveq	r1, r0
 8000c5a:	2000      	moveq	r0, #0
 8000c5c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c60:	bf08      	it	eq
 8000c62:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c66:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c6a:	fabc f28c 	clz	r2, ip
 8000c6e:	3a08      	subs	r2, #8
 8000c70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c74:	db10      	blt.n	8000c98 <__aeabi_l2f+0x5c>
 8000c76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c80:	f1c2 0220 	rsb	r2, r2, #32
 8000c84:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c88:	fa20 f202 	lsr.w	r2, r0, r2
 8000c8c:	eb43 0002 	adc.w	r0, r3, r2
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f102 0220 	add.w	r2, r2, #32
 8000c9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca0:	f1c2 0220 	rsb	r2, r2, #32
 8000ca4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cac:	eb43 0002 	adc.w	r0, r3, r2
 8000cb0:	bf08      	it	eq
 8000cb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_fmul>:
 8000cb8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cc0:	bf1e      	ittt	ne
 8000cc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cc6:	ea92 0f0c 	teqne	r2, ip
 8000cca:	ea93 0f0c 	teqne	r3, ip
 8000cce:	d06f      	beq.n	8000db0 <__aeabi_fmul+0xf8>
 8000cd0:	441a      	add	r2, r3
 8000cd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000cd6:	0240      	lsls	r0, r0, #9
 8000cd8:	bf18      	it	ne
 8000cda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cde:	d01e      	beq.n	8000d1e <__aeabi_fmul+0x66>
 8000ce0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000ce4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ce8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cec:	fba0 3101 	umull	r3, r1, r0, r1
 8000cf0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000cf4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000cf8:	bf3e      	ittt	cc
 8000cfa:	0049      	lslcc	r1, r1, #1
 8000cfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d00:	005b      	lslcc	r3, r3, #1
 8000d02:	ea40 0001 	orr.w	r0, r0, r1
 8000d06:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d0a:	2afd      	cmp	r2, #253	@ 0xfd
 8000d0c:	d81d      	bhi.n	8000d4a <__aeabi_fmul+0x92>
 8000d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d16:	bf08      	it	eq
 8000d18:	f020 0001 	biceq.w	r0, r0, #1
 8000d1c:	4770      	bx	lr
 8000d1e:	f090 0f00 	teq	r0, #0
 8000d22:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d26:	bf08      	it	eq
 8000d28:	0249      	lsleq	r1, r1, #9
 8000d2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d32:	3a7f      	subs	r2, #127	@ 0x7f
 8000d34:	bfc2      	ittt	gt
 8000d36:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d3e:	4770      	bxgt	lr
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	dc5d      	bgt.n	8000e08 <__aeabi_fmul+0x150>
 8000d4c:	f112 0f19 	cmn.w	r2, #25
 8000d50:	bfdc      	itt	le
 8000d52:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d56:	4770      	bxle	lr
 8000d58:	f1c2 0200 	rsb	r2, r2, #0
 8000d5c:	0041      	lsls	r1, r0, #1
 8000d5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d62:	f1c2 0220 	rsb	r2, r2, #32
 8000d66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d6e:	f140 0000 	adc.w	r0, r0, #0
 8000d72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d76:	bf08      	it	eq
 8000d78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7c:	4770      	bx	lr
 8000d7e:	f092 0f00 	teq	r2, #0
 8000d82:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d86:	bf02      	ittt	eq
 8000d88:	0040      	lsleq	r0, r0, #1
 8000d8a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d8e:	3a01      	subeq	r2, #1
 8000d90:	d0f9      	beq.n	8000d86 <__aeabi_fmul+0xce>
 8000d92:	ea40 000c 	orr.w	r0, r0, ip
 8000d96:	f093 0f00 	teq	r3, #0
 8000d9a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d9e:	bf02      	ittt	eq
 8000da0:	0049      	lsleq	r1, r1, #1
 8000da2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000da6:	3b01      	subeq	r3, #1
 8000da8:	d0f9      	beq.n	8000d9e <__aeabi_fmul+0xe6>
 8000daa:	ea41 010c 	orr.w	r1, r1, ip
 8000dae:	e78f      	b.n	8000cd0 <__aeabi_fmul+0x18>
 8000db0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db4:	ea92 0f0c 	teq	r2, ip
 8000db8:	bf18      	it	ne
 8000dba:	ea93 0f0c 	teqne	r3, ip
 8000dbe:	d00a      	beq.n	8000dd6 <__aeabi_fmul+0x11e>
 8000dc0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000dc4:	bf18      	it	ne
 8000dc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000dca:	d1d8      	bne.n	8000d7e <__aeabi_fmul+0xc6>
 8000dcc:	ea80 0001 	eor.w	r0, r0, r1
 8000dd0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dd4:	4770      	bx	lr
 8000dd6:	f090 0f00 	teq	r0, #0
 8000dda:	bf17      	itett	ne
 8000ddc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000de0:	4608      	moveq	r0, r1
 8000de2:	f091 0f00 	teqne	r1, #0
 8000de6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dea:	d014      	beq.n	8000e16 <__aeabi_fmul+0x15e>
 8000dec:	ea92 0f0c 	teq	r2, ip
 8000df0:	d101      	bne.n	8000df6 <__aeabi_fmul+0x13e>
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	d10f      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000df6:	ea93 0f0c 	teq	r3, ip
 8000dfa:	d103      	bne.n	8000e04 <__aeabi_fmul+0x14c>
 8000dfc:	024b      	lsls	r3, r1, #9
 8000dfe:	bf18      	it	ne
 8000e00:	4608      	movne	r0, r1
 8000e02:	d108      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000e04:	ea80 0001 	eor.w	r0, r0, r1
 8000e08:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e0c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e14:	4770      	bx	lr
 8000e16:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e1a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e1e:	4770      	bx	lr

08000e20 <__aeabi_fdiv>:
 8000e20:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e28:	bf1e      	ittt	ne
 8000e2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2e:	ea92 0f0c 	teqne	r2, ip
 8000e32:	ea93 0f0c 	teqne	r3, ip
 8000e36:	d069      	beq.n	8000f0c <__aeabi_fdiv+0xec>
 8000e38:	eba2 0203 	sub.w	r2, r2, r3
 8000e3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e40:	0249      	lsls	r1, r1, #9
 8000e42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e46:	d037      	beq.n	8000eb8 <__aeabi_fdiv+0x98>
 8000e48:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e54:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	bf38      	it	cc
 8000e5c:	005b      	lslcc	r3, r3, #1
 8000e5e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e62:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e66:	428b      	cmp	r3, r1
 8000e68:	bf24      	itt	cs
 8000e6a:	1a5b      	subcs	r3, r3, r1
 8000e6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e74:	bf24      	itt	cs
 8000e76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e82:	bf24      	itt	cs
 8000e84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e9a:	011b      	lsls	r3, r3, #4
 8000e9c:	bf18      	it	ne
 8000e9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ea2:	d1e0      	bne.n	8000e66 <__aeabi_fdiv+0x46>
 8000ea4:	2afd      	cmp	r2, #253	@ 0xfd
 8000ea6:	f63f af50 	bhi.w	8000d4a <__aeabi_fmul+0x92>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb0:	bf08      	it	eq
 8000eb2:	f020 0001 	biceq.w	r0, r0, #1
 8000eb6:	4770      	bx	lr
 8000eb8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ebc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ec0:	327f      	adds	r2, #127	@ 0x7f
 8000ec2:	bfc2      	ittt	gt
 8000ec4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ec8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ecc:	4770      	bxgt	lr
 8000ece:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ed2:	f04f 0300 	mov.w	r3, #0
 8000ed6:	3a01      	subs	r2, #1
 8000ed8:	e737      	b.n	8000d4a <__aeabi_fmul+0x92>
 8000eda:	f092 0f00 	teq	r2, #0
 8000ede:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0040      	lsleq	r0, r0, #1
 8000ee6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000eea:	3a01      	subeq	r2, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fdiv+0xc2>
 8000eee:	ea40 000c 	orr.w	r0, r0, ip
 8000ef2:	f093 0f00 	teq	r3, #0
 8000ef6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0049      	lsleq	r1, r1, #1
 8000efe:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f02:	3b01      	subeq	r3, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fdiv+0xda>
 8000f06:	ea41 010c 	orr.w	r1, r1, ip
 8000f0a:	e795      	b.n	8000e38 <__aeabi_fdiv+0x18>
 8000f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f10:	ea92 0f0c 	teq	r2, ip
 8000f14:	d108      	bne.n	8000f28 <__aeabi_fdiv+0x108>
 8000f16:	0242      	lsls	r2, r0, #9
 8000f18:	f47f af7d 	bne.w	8000e16 <__aeabi_fmul+0x15e>
 8000f1c:	ea93 0f0c 	teq	r3, ip
 8000f20:	f47f af70 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f24:	4608      	mov	r0, r1
 8000f26:	e776      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f28:	ea93 0f0c 	teq	r3, ip
 8000f2c:	d104      	bne.n	8000f38 <__aeabi_fdiv+0x118>
 8000f2e:	024b      	lsls	r3, r1, #9
 8000f30:	f43f af4c 	beq.w	8000dcc <__aeabi_fmul+0x114>
 8000f34:	4608      	mov	r0, r1
 8000f36:	e76e      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f38:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f3c:	bf18      	it	ne
 8000f3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f42:	d1ca      	bne.n	8000eda <__aeabi_fdiv+0xba>
 8000f44:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f48:	f47f af5c 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f4c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f50:	f47f af3c 	bne.w	8000dcc <__aeabi_fmul+0x114>
 8000f54:	e75f      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f56:	bf00      	nop

08000f58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5c:	f000 fc94 	bl	8001888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f60:	f000 f8d2 	bl	8001108 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f64:	f000 f9b2 	bl	80012cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f68:	f000 f986 	bl	8001278 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f6c:	f000 f91c 	bl	80011a8 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000f70:	f000 f958 	bl	8001224 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT (& huart2 , &data , 1);
 8000f74:	2201      	movs	r2, #1
 8000f76:	4952      	ldr	r1, [pc, #328]	@ (80010c0 <main+0x168>)
 8000f78:	4852      	ldr	r0, [pc, #328]	@ (80010c4 <main+0x16c>)
 8000f7a:	f002 f940 	bl	80031fe <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT (& huart1 , &data , 1);
 8000f7e:	2201      	movs	r2, #1
 8000f80:	494f      	ldr	r1, [pc, #316]	@ (80010c0 <main+0x168>)
 8000f82:	4851      	ldr	r0, [pc, #324]	@ (80010c8 <main+0x170>)
 8000f84:	f002 f93b 	bl	80031fe <HAL_UART_Receive_IT>
  HAL_ADC_Start(&hadc1);
 8000f88:	4850      	ldr	r0, [pc, #320]	@ (80010cc <main+0x174>)
 8000f8a:	f000 fddb 	bl	8001b44 <HAL_ADC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(flag == 1){
 8000f8e:	4b50      	ldr	r3, [pc, #320]	@ (80010d0 <main+0x178>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d154      	bne.n	8001040 <main+0xe8>
		  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000f96:	2101      	movs	r1, #1
 8000f98:	484e      	ldr	r0, [pc, #312]	@ (80010d4 <main+0x17c>)
 8000f9a:	f001 fb75 	bl	8002688 <HAL_GPIO_TogglePin>
			buffer[index_buffer] = '\0';
 8000f9e:	4b4e      	ldr	r3, [pc, #312]	@ (80010d8 <main+0x180>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	4b4d      	ldr	r3, [pc, #308]	@ (80010dc <main+0x184>)
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	5499      	strb	r1, [r3, r2]
			if(!strcmp((char *) buffer, "SEND") || buffer[0] == '1'){
 8000faa:	494d      	ldr	r1, [pc, #308]	@ (80010e0 <main+0x188>)
 8000fac:	484b      	ldr	r0, [pc, #300]	@ (80010dc <main+0x184>)
 8000fae:	f7ff f8cf 	bl	8000150 <strcmp>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d003      	beq.n	8000fc0 <main+0x68>
 8000fb8:	4b48      	ldr	r3, [pc, #288]	@ (80010dc <main+0x184>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b31      	cmp	r3, #49	@ 0x31
 8000fbe:	d107      	bne.n	8000fd0 <main+0x78>
				sprintf (message , "BEGIN SEND \r\n" );
 8000fc0:	4948      	ldr	r1, [pc, #288]	@ (80010e4 <main+0x18c>)
 8000fc2:	4849      	ldr	r0, [pc, #292]	@ (80010e8 <main+0x190>)
 8000fc4:	f003 fbc8 	bl	8004758 <siprintf>
				send_flag  = 1;
 8000fc8:	4b48      	ldr	r3, [pc, #288]	@ (80010ec <main+0x194>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	701a      	strb	r2, [r3, #0]
 8000fce:	e021      	b.n	8001014 <main+0xbc>
			}
			else if(!strcmp((char *) buffer, "STOP") || buffer[0] == '0'){
 8000fd0:	4947      	ldr	r1, [pc, #284]	@ (80010f0 <main+0x198>)
 8000fd2:	4842      	ldr	r0, [pc, #264]	@ (80010dc <main+0x184>)
 8000fd4:	f7ff f8bc 	bl	8000150 <strcmp>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <main+0x8e>
 8000fde:	4b3f      	ldr	r3, [pc, #252]	@ (80010dc <main+0x184>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b30      	cmp	r3, #48	@ 0x30
 8000fe4:	d107      	bne.n	8000ff6 <main+0x9e>
				sprintf (message , "STOP SEND\r\n" );
 8000fe6:	4943      	ldr	r1, [pc, #268]	@ (80010f4 <main+0x19c>)
 8000fe8:	483f      	ldr	r0, [pc, #252]	@ (80010e8 <main+0x190>)
 8000fea:	f003 fbb5 	bl	8004758 <siprintf>
				send_flag  = 0;
 8000fee:	4b3f      	ldr	r3, [pc, #252]	@ (80010ec <main+0x194>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	701a      	strb	r2, [r3, #0]
 8000ff4:	e00e      	b.n	8001014 <main+0xbc>
			}
			else {
				sprintf (message , "ERROR COMMAND\r\n" );
 8000ff6:	4940      	ldr	r1, [pc, #256]	@ (80010f8 <main+0x1a0>)
 8000ff8:	483b      	ldr	r0, [pc, #236]	@ (80010e8 <main+0x190>)
 8000ffa:	f003 fbad 	bl	8004758 <siprintf>
				HAL_UART_Transmit (& huart2, (uint8_t *) message, strlen(message), 1000) ;
 8000ffe:	483a      	ldr	r0, [pc, #232]	@ (80010e8 <main+0x190>)
 8001000:	f7ff f8b0 	bl	8000164 <strlen>
 8001004:	4603      	mov	r3, r0
 8001006:	b29a      	uxth	r2, r3
 8001008:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800100c:	4936      	ldr	r1, [pc, #216]	@ (80010e8 <main+0x190>)
 800100e:	482d      	ldr	r0, [pc, #180]	@ (80010c4 <main+0x16c>)
 8001010:	f002 f86a 	bl	80030e8 <HAL_UART_Transmit>
			}
			HAL_UART_Transmit (& huart2, (uint8_t *) message, strlen(message), 1000) ;
 8001014:	4834      	ldr	r0, [pc, #208]	@ (80010e8 <main+0x190>)
 8001016:	f7ff f8a5 	bl	8000164 <strlen>
 800101a:	4603      	mov	r3, r0
 800101c:	b29a      	uxth	r2, r3
 800101e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001022:	4931      	ldr	r1, [pc, #196]	@ (80010e8 <main+0x190>)
 8001024:	4827      	ldr	r0, [pc, #156]	@ (80010c4 <main+0x16c>)
 8001026:	f002 f85f 	bl	80030e8 <HAL_UART_Transmit>
		    memset(buffer, 0, MAX_BUFFER_SIZE);
 800102a:	221e      	movs	r2, #30
 800102c:	2100      	movs	r1, #0
 800102e:	482b      	ldr	r0, [pc, #172]	@ (80010dc <main+0x184>)
 8001030:	f003 fbf5 	bl	800481e <memset>
		    index_buffer = 0;
 8001034:	4b28      	ldr	r3, [pc, #160]	@ (80010d8 <main+0x180>)
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]
	  	  flag = 0;
 800103a:	4b25      	ldr	r3, [pc, #148]	@ (80010d0 <main+0x178>)
 800103c:	2200      	movs	r2, #0
 800103e:	701a      	strb	r2, [r3, #0]
	  }
	  if(send_flag){
 8001040:	4b2a      	ldr	r3, [pc, #168]	@ (80010ec <main+0x194>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d037      	beq.n	80010b8 <main+0x160>
			if(HAL_GetTick() - timer >= 2000){
 8001048:	f000 fc76 	bl	8001938 <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	4b2b      	ldr	r3, [pc, #172]	@ (80010fc <main+0x1a4>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001058:	d32e      	bcc.n	80010b8 <main+0x160>
				timer = HAL_GetTick();
 800105a:	f000 fc6d 	bl	8001938 <HAL_GetTick>
 800105e:	4603      	mov	r3, r0
 8001060:	4a26      	ldr	r2, [pc, #152]	@ (80010fc <main+0x1a4>)
 8001062:	6013      	str	r3, [r2, #0]
				ADC_value = (float)(HAL_ADC_GetValue (& hadc1 ) * 5) / 4096;
 8001064:	4819      	ldr	r0, [pc, #100]	@ (80010cc <main+0x174>)
 8001066:	f000 fe1b 	bl	8001ca0 <HAL_ADC_GetValue>
 800106a:	4602      	mov	r2, r0
 800106c:	4613      	mov	r3, r2
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	4413      	add	r3, r2
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff fdc8 	bl	8000c08 <__aeabi_ui2f>
 8001078:	4603      	mov	r3, r0
 800107a:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff fece 	bl	8000e20 <__aeabi_fdiv>
 8001084:	4603      	mov	r3, r0
 8001086:	461a      	mov	r2, r3
 8001088:	4b1d      	ldr	r3, [pc, #116]	@ (8001100 <main+0x1a8>)
 800108a:	601a      	str	r2, [r3, #0]
				sprintf (message , "ADC_value: %0.2f \r\n", ADC_value );
 800108c:	4b1c      	ldr	r3, [pc, #112]	@ (8001100 <main+0x1a8>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff f9d3 	bl	800043c <__aeabi_f2d>
 8001096:	4602      	mov	r2, r0
 8001098:	460b      	mov	r3, r1
 800109a:	491a      	ldr	r1, [pc, #104]	@ (8001104 <main+0x1ac>)
 800109c:	4812      	ldr	r0, [pc, #72]	@ (80010e8 <main+0x190>)
 800109e:	f003 fb5b 	bl	8004758 <siprintf>
				HAL_UART_Transmit (& huart2, (uint8_t *) message, strlen(message), 1000) ;
 80010a2:	4811      	ldr	r0, [pc, #68]	@ (80010e8 <main+0x190>)
 80010a4:	f7ff f85e 	bl	8000164 <strlen>
 80010a8:	4603      	mov	r3, r0
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010b0:	490d      	ldr	r1, [pc, #52]	@ (80010e8 <main+0x190>)
 80010b2:	4804      	ldr	r0, [pc, #16]	@ (80010c4 <main+0x16c>)
 80010b4:	f002 f818 	bl	80030e8 <HAL_UART_Transmit>
			}
	  }
  	  HAL_Delay(10);
 80010b8:	200a      	movs	r0, #10
 80010ba:	f000 fc47 	bl	800194c <HAL_Delay>
	  if(flag == 1){
 80010be:	e766      	b.n	8000f8e <main+0x36>
 80010c0:	200002d4 	.word	0x200002d4
 80010c4:	20000268 	.word	0x20000268
 80010c8:	20000220 	.word	0x20000220
 80010cc:	200001f0 	.word	0x200001f0
 80010d0:	200002d3 	.word	0x200002d3
 80010d4:	40010c00 	.word	0x40010c00
 80010d8:	200002d2 	.word	0x200002d2
 80010dc:	200002b4 	.word	0x200002b4
 80010e0:	080069e0 	.word	0x080069e0
 80010e4:	080069e8 	.word	0x080069e8
 80010e8:	200002dc 	.word	0x200002dc
 80010ec:	200002fa 	.word	0x200002fa
 80010f0:	080069f8 	.word	0x080069f8
 80010f4:	08006a00 	.word	0x08006a00
 80010f8:	08006a0c 	.word	0x08006a0c
 80010fc:	200002d8 	.word	0x200002d8
 8001100:	200002b0 	.word	0x200002b0
 8001104:	08006a1c 	.word	0x08006a1c

08001108 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b094      	sub	sp, #80	@ 0x50
 800110c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800110e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001112:	2228      	movs	r2, #40	@ 0x28
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f003 fb81 	bl	800481e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001138:	2302      	movs	r3, #2
 800113a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800113c:	2301      	movs	r3, #1
 800113e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001140:	2310      	movs	r3, #16
 8001142:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001144:	2300      	movs	r3, #0
 8001146:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001148:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800114c:	4618      	mov	r0, r3
 800114e:	f001 fab5 	bl	80026bc <HAL_RCC_OscConfig>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001158:	f000 f960 	bl	800141c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800115c:	230f      	movs	r3, #15
 800115e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001160:	2300      	movs	r3, #0
 8001162:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001164:	2300      	movs	r3, #0
 8001166:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001168:	2300      	movs	r3, #0
 800116a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800116c:	2300      	movs	r3, #0
 800116e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f001 fd22 	bl	8002bc0 <HAL_RCC_ClockConfig>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001182:	f000 f94b 	bl	800141c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001186:	2302      	movs	r3, #2
 8001188:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	4618      	mov	r0, r3
 8001192:	f001 fea3 	bl	8002edc <HAL_RCCEx_PeriphCLKConfig>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800119c:	f000 f93e 	bl	800141c <Error_Handler>
  }
}
 80011a0:	bf00      	nop
 80011a2:	3750      	adds	r7, #80	@ 0x50
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011b8:	4b18      	ldr	r3, [pc, #96]	@ (800121c <MX_ADC1_Init+0x74>)
 80011ba:	4a19      	ldr	r2, [pc, #100]	@ (8001220 <MX_ADC1_Init+0x78>)
 80011bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011be:	4b17      	ldr	r3, [pc, #92]	@ (800121c <MX_ADC1_Init+0x74>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011c4:	4b15      	ldr	r3, [pc, #84]	@ (800121c <MX_ADC1_Init+0x74>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011ca:	4b14      	ldr	r3, [pc, #80]	@ (800121c <MX_ADC1_Init+0x74>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011d0:	4b12      	ldr	r3, [pc, #72]	@ (800121c <MX_ADC1_Init+0x74>)
 80011d2:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80011d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011d8:	4b10      	ldr	r3, [pc, #64]	@ (800121c <MX_ADC1_Init+0x74>)
 80011da:	2200      	movs	r2, #0
 80011dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80011de:	4b0f      	ldr	r3, [pc, #60]	@ (800121c <MX_ADC1_Init+0x74>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011e4:	480d      	ldr	r0, [pc, #52]	@ (800121c <MX_ADC1_Init+0x74>)
 80011e6:	f000 fbd5 	bl	8001994 <HAL_ADC_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80011f0:	f000 f914 	bl	800141c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011f8:	2301      	movs	r3, #1
 80011fa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001200:	1d3b      	adds	r3, r7, #4
 8001202:	4619      	mov	r1, r3
 8001204:	4805      	ldr	r0, [pc, #20]	@ (800121c <MX_ADC1_Init+0x74>)
 8001206:	f000 fd57 	bl	8001cb8 <HAL_ADC_ConfigChannel>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001210:	f000 f904 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001214:	bf00      	nop
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	200001f0 	.word	0x200001f0
 8001220:	40012400 	.word	0x40012400

08001224 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001228:	4b11      	ldr	r3, [pc, #68]	@ (8001270 <MX_USART1_UART_Init+0x4c>)
 800122a:	4a12      	ldr	r2, [pc, #72]	@ (8001274 <MX_USART1_UART_Init+0x50>)
 800122c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800122e:	4b10      	ldr	r3, [pc, #64]	@ (8001270 <MX_USART1_UART_Init+0x4c>)
 8001230:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001234:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001236:	4b0e      	ldr	r3, [pc, #56]	@ (8001270 <MX_USART1_UART_Init+0x4c>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800123c:	4b0c      	ldr	r3, [pc, #48]	@ (8001270 <MX_USART1_UART_Init+0x4c>)
 800123e:	2200      	movs	r2, #0
 8001240:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001242:	4b0b      	ldr	r3, [pc, #44]	@ (8001270 <MX_USART1_UART_Init+0x4c>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001248:	4b09      	ldr	r3, [pc, #36]	@ (8001270 <MX_USART1_UART_Init+0x4c>)
 800124a:	220c      	movs	r2, #12
 800124c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800124e:	4b08      	ldr	r3, [pc, #32]	@ (8001270 <MX_USART1_UART_Init+0x4c>)
 8001250:	2200      	movs	r2, #0
 8001252:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001254:	4b06      	ldr	r3, [pc, #24]	@ (8001270 <MX_USART1_UART_Init+0x4c>)
 8001256:	2200      	movs	r2, #0
 8001258:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800125a:	4805      	ldr	r0, [pc, #20]	@ (8001270 <MX_USART1_UART_Init+0x4c>)
 800125c:	f001 fef4 	bl	8003048 <HAL_UART_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001266:	f000 f8d9 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000220 	.word	0x20000220
 8001274:	40013800 	.word	0x40013800

08001278 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800127c:	4b11      	ldr	r3, [pc, #68]	@ (80012c4 <MX_USART2_UART_Init+0x4c>)
 800127e:	4a12      	ldr	r2, [pc, #72]	@ (80012c8 <MX_USART2_UART_Init+0x50>)
 8001280:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001282:	4b10      	ldr	r3, [pc, #64]	@ (80012c4 <MX_USART2_UART_Init+0x4c>)
 8001284:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001288:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800128a:	4b0e      	ldr	r3, [pc, #56]	@ (80012c4 <MX_USART2_UART_Init+0x4c>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001290:	4b0c      	ldr	r3, [pc, #48]	@ (80012c4 <MX_USART2_UART_Init+0x4c>)
 8001292:	2200      	movs	r2, #0
 8001294:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001296:	4b0b      	ldr	r3, [pc, #44]	@ (80012c4 <MX_USART2_UART_Init+0x4c>)
 8001298:	2200      	movs	r2, #0
 800129a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800129c:	4b09      	ldr	r3, [pc, #36]	@ (80012c4 <MX_USART2_UART_Init+0x4c>)
 800129e:	220c      	movs	r2, #12
 80012a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012a2:	4b08      	ldr	r3, [pc, #32]	@ (80012c4 <MX_USART2_UART_Init+0x4c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a8:	4b06      	ldr	r3, [pc, #24]	@ (80012c4 <MX_USART2_UART_Init+0x4c>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012ae:	4805      	ldr	r0, [pc, #20]	@ (80012c4 <MX_USART2_UART_Init+0x4c>)
 80012b0:	f001 feca 	bl	8003048 <HAL_UART_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012ba:	f000 f8af 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000268 	.word	0x20000268
 80012c8:	40004400 	.word	0x40004400

080012cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d2:	f107 0308 	add.w	r3, r7, #8
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e0:	4b20      	ldr	r3, [pc, #128]	@ (8001364 <MX_GPIO_Init+0x98>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	4a1f      	ldr	r2, [pc, #124]	@ (8001364 <MX_GPIO_Init+0x98>)
 80012e6:	f043 0304 	orr.w	r3, r3, #4
 80012ea:	6193      	str	r3, [r2, #24]
 80012ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001364 <MX_GPIO_Init+0x98>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	f003 0304 	and.w	r3, r3, #4
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001364 <MX_GPIO_Init+0x98>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	4a19      	ldr	r2, [pc, #100]	@ (8001364 <MX_GPIO_Init+0x98>)
 80012fe:	f043 0308 	orr.w	r3, r3, #8
 8001302:	6193      	str	r3, [r2, #24]
 8001304:	4b17      	ldr	r3, [pc, #92]	@ (8001364 <MX_GPIO_Init+0x98>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	f003 0308 	and.w	r3, r3, #8
 800130c:	603b      	str	r3, [r7, #0]
 800130e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	2120      	movs	r1, #32
 8001314:	4814      	ldr	r0, [pc, #80]	@ (8001368 <MX_GPIO_Init+0x9c>)
 8001316:	f001 f99f 	bl	8002658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	2101      	movs	r1, #1
 800131e:	4813      	ldr	r0, [pc, #76]	@ (800136c <MX_GPIO_Init+0xa0>)
 8001320:	f001 f99a 	bl	8002658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8001324:	2320      	movs	r3, #32
 8001326:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001328:	2301      	movs	r3, #1
 800132a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	2302      	movs	r3, #2
 8001332:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8001334:	f107 0308 	add.w	r3, r7, #8
 8001338:	4619      	mov	r1, r3
 800133a:	480b      	ldr	r0, [pc, #44]	@ (8001368 <MX_GPIO_Init+0x9c>)
 800133c:	f001 f810 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8001340:	2301      	movs	r3, #1
 8001342:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001344:	2301      	movs	r3, #1
 8001346:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	2302      	movs	r3, #2
 800134e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001350:	f107 0308 	add.w	r3, r7, #8
 8001354:	4619      	mov	r1, r3
 8001356:	4805      	ldr	r0, [pc, #20]	@ (800136c <MX_GPIO_Init+0xa0>)
 8001358:	f001 f802 	bl	8002360 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800135c:	bf00      	nop
 800135e:	3718      	adds	r7, #24
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40021000 	.word	0x40021000
 8001368:	40010800 	.word	0x40010800
 800136c:	40010c00 	.word	0x40010c00

08001370 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback ( UART_HandleTypeDef * huart ){
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	if(huart -> Instance == USART2 ){ //  VIRTUAL TERMINAL
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a1f      	ldr	r2, [pc, #124]	@ (80013fc <HAL_UART_RxCpltCallback+0x8c>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d119      	bne.n	80013b6 <HAL_UART_RxCpltCallback+0x46>
		buffer[ index_buffer ++] = data ;
 8001382:	4b1f      	ldr	r3, [pc, #124]	@ (8001400 <HAL_UART_RxCpltCallback+0x90>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	1c5a      	adds	r2, r3, #1
 8001388:	b2d1      	uxtb	r1, r2
 800138a:	4a1d      	ldr	r2, [pc, #116]	@ (8001400 <HAL_UART_RxCpltCallback+0x90>)
 800138c:	7011      	strb	r1, [r2, #0]
 800138e:	461a      	mov	r2, r3
 8001390:	4b1c      	ldr	r3, [pc, #112]	@ (8001404 <HAL_UART_RxCpltCallback+0x94>)
 8001392:	7819      	ldrb	r1, [r3, #0]
 8001394:	4b1c      	ldr	r3, [pc, #112]	@ (8001408 <HAL_UART_RxCpltCallback+0x98>)
 8001396:	5499      	strb	r1, [r3, r2]
		if( index_buffer == MAX_BUFFER_SIZE)
 8001398:	4b19      	ldr	r3, [pc, #100]	@ (8001400 <HAL_UART_RxCpltCallback+0x90>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b1e      	cmp	r3, #30
 800139e:	d102      	bne.n	80013a6 <HAL_UART_RxCpltCallback+0x36>
			index_buffer = 0;
 80013a0:	4b17      	ldr	r3, [pc, #92]	@ (8001400 <HAL_UART_RxCpltCallback+0x90>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	701a      	strb	r2, [r3, #0]
		flag = 1;
 80013a6:	4b19      	ldr	r3, [pc, #100]	@ (800140c <HAL_UART_RxCpltCallback+0x9c>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &data, 1);
 80013ac:	2201      	movs	r2, #1
 80013ae:	4915      	ldr	r1, [pc, #84]	@ (8001404 <HAL_UART_RxCpltCallback+0x94>)
 80013b0:	4817      	ldr	r0, [pc, #92]	@ (8001410 <HAL_UART_RxCpltCallback+0xa0>)
 80013b2:	f001 ff24 	bl	80031fe <HAL_UART_Receive_IT>
	}
	if(huart -> Instance == USART1 ){ // VIRTUAL COM
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a16      	ldr	r2, [pc, #88]	@ (8001414 <HAL_UART_RxCpltCallback+0xa4>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d119      	bne.n	80013f4 <HAL_UART_RxCpltCallback+0x84>
		buffer [ index_buffer ++] = data ;
 80013c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001400 <HAL_UART_RxCpltCallback+0x90>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	1c5a      	adds	r2, r3, #1
 80013c6:	b2d1      	uxtb	r1, r2
 80013c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001400 <HAL_UART_RxCpltCallback+0x90>)
 80013ca:	7011      	strb	r1, [r2, #0]
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001404 <HAL_UART_RxCpltCallback+0x94>)
 80013d0:	7819      	ldrb	r1, [r3, #0]
 80013d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001408 <HAL_UART_RxCpltCallback+0x98>)
 80013d4:	5499      	strb	r1, [r3, r2]
		if( index_buffer == MAX_BUFFER_SIZE)
 80013d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001400 <HAL_UART_RxCpltCallback+0x90>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b1e      	cmp	r3, #30
 80013dc:	d102      	bne.n	80013e4 <HAL_UART_RxCpltCallback+0x74>
			index_buffer = 0;
 80013de:	4b08      	ldr	r3, [pc, #32]	@ (8001400 <HAL_UART_RxCpltCallback+0x90>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	701a      	strb	r2, [r3, #0]
		flag = 1;
 80013e4:	4b09      	ldr	r3, [pc, #36]	@ (800140c <HAL_UART_RxCpltCallback+0x9c>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &data, 1);
 80013ea:	2201      	movs	r2, #1
 80013ec:	4905      	ldr	r1, [pc, #20]	@ (8001404 <HAL_UART_RxCpltCallback+0x94>)
 80013ee:	480a      	ldr	r0, [pc, #40]	@ (8001418 <HAL_UART_RxCpltCallback+0xa8>)
 80013f0:	f001 ff05 	bl	80031fe <HAL_UART_Receive_IT>
	}
}
 80013f4:	bf00      	nop
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40004400 	.word	0x40004400
 8001400:	200002d2 	.word	0x200002d2
 8001404:	200002d4 	.word	0x200002d4
 8001408:	200002b4 	.word	0x200002b4
 800140c:	200002d3 	.word	0x200002d3
 8001410:	20000268 	.word	0x20000268
 8001414:	40013800 	.word	0x40013800
 8001418:	20000220 	.word	0x20000220

0800141c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001420:	b672      	cpsid	i
}
 8001422:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001424:	bf00      	nop
 8001426:	e7fd      	b.n	8001424 <Error_Handler+0x8>

08001428 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800142e:	4b15      	ldr	r3, [pc, #84]	@ (8001484 <HAL_MspInit+0x5c>)
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	4a14      	ldr	r2, [pc, #80]	@ (8001484 <HAL_MspInit+0x5c>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6193      	str	r3, [r2, #24]
 800143a:	4b12      	ldr	r3, [pc, #72]	@ (8001484 <HAL_MspInit+0x5c>)
 800143c:	699b      	ldr	r3, [r3, #24]
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001446:	4b0f      	ldr	r3, [pc, #60]	@ (8001484 <HAL_MspInit+0x5c>)
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	4a0e      	ldr	r2, [pc, #56]	@ (8001484 <HAL_MspInit+0x5c>)
 800144c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001450:	61d3      	str	r3, [r2, #28]
 8001452:	4b0c      	ldr	r3, [pc, #48]	@ (8001484 <HAL_MspInit+0x5c>)
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800145e:	4b0a      	ldr	r3, [pc, #40]	@ (8001488 <HAL_MspInit+0x60>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	4a04      	ldr	r2, [pc, #16]	@ (8001488 <HAL_MspInit+0x60>)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800147a:	bf00      	nop
 800147c:	3714      	adds	r7, #20
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr
 8001484:	40021000 	.word	0x40021000
 8001488:	40010000 	.word	0x40010000

0800148c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b088      	sub	sp, #32
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	f107 0310 	add.w	r3, r7, #16
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a14      	ldr	r2, [pc, #80]	@ (80014f8 <HAL_ADC_MspInit+0x6c>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d121      	bne.n	80014f0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014ac:	4b13      	ldr	r3, [pc, #76]	@ (80014fc <HAL_ADC_MspInit+0x70>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	4a12      	ldr	r2, [pc, #72]	@ (80014fc <HAL_ADC_MspInit+0x70>)
 80014b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014b6:	6193      	str	r3, [r2, #24]
 80014b8:	4b10      	ldr	r3, [pc, #64]	@ (80014fc <HAL_ADC_MspInit+0x70>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c4:	4b0d      	ldr	r3, [pc, #52]	@ (80014fc <HAL_ADC_MspInit+0x70>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	4a0c      	ldr	r2, [pc, #48]	@ (80014fc <HAL_ADC_MspInit+0x70>)
 80014ca:	f043 0304 	orr.w	r3, r3, #4
 80014ce:	6193      	str	r3, [r2, #24]
 80014d0:	4b0a      	ldr	r3, [pc, #40]	@ (80014fc <HAL_ADC_MspInit+0x70>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014dc:	2301      	movs	r3, #1
 80014de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014e0:	2303      	movs	r3, #3
 80014e2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e4:	f107 0310 	add.w	r3, r7, #16
 80014e8:	4619      	mov	r1, r3
 80014ea:	4805      	ldr	r0, [pc, #20]	@ (8001500 <HAL_ADC_MspInit+0x74>)
 80014ec:	f000 ff38 	bl	8002360 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80014f0:	bf00      	nop
 80014f2:	3720      	adds	r7, #32
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40012400 	.word	0x40012400
 80014fc:	40021000 	.word	0x40021000
 8001500:	40010800 	.word	0x40010800

08001504 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08a      	sub	sp, #40	@ 0x28
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	f107 0318 	add.w	r3, r7, #24
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a3f      	ldr	r2, [pc, #252]	@ (800161c <HAL_UART_MspInit+0x118>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d13a      	bne.n	800159a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001524:	4b3e      	ldr	r3, [pc, #248]	@ (8001620 <HAL_UART_MspInit+0x11c>)
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	4a3d      	ldr	r2, [pc, #244]	@ (8001620 <HAL_UART_MspInit+0x11c>)
 800152a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800152e:	6193      	str	r3, [r2, #24]
 8001530:	4b3b      	ldr	r3, [pc, #236]	@ (8001620 <HAL_UART_MspInit+0x11c>)
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001538:	617b      	str	r3, [r7, #20]
 800153a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153c:	4b38      	ldr	r3, [pc, #224]	@ (8001620 <HAL_UART_MspInit+0x11c>)
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	4a37      	ldr	r2, [pc, #220]	@ (8001620 <HAL_UART_MspInit+0x11c>)
 8001542:	f043 0304 	orr.w	r3, r3, #4
 8001546:	6193      	str	r3, [r2, #24]
 8001548:	4b35      	ldr	r3, [pc, #212]	@ (8001620 <HAL_UART_MspInit+0x11c>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	613b      	str	r3, [r7, #16]
 8001552:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001554:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001558:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155a:	2302      	movs	r3, #2
 800155c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800155e:	2303      	movs	r3, #3
 8001560:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001562:	f107 0318 	add.w	r3, r7, #24
 8001566:	4619      	mov	r1, r3
 8001568:	482e      	ldr	r0, [pc, #184]	@ (8001624 <HAL_UART_MspInit+0x120>)
 800156a:	f000 fef9 	bl	8002360 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800156e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001572:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001574:	2300      	movs	r3, #0
 8001576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157c:	f107 0318 	add.w	r3, r7, #24
 8001580:	4619      	mov	r1, r3
 8001582:	4828      	ldr	r0, [pc, #160]	@ (8001624 <HAL_UART_MspInit+0x120>)
 8001584:	f000 feec 	bl	8002360 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001588:	2200      	movs	r2, #0
 800158a:	2100      	movs	r1, #0
 800158c:	2025      	movs	r0, #37	@ 0x25
 800158e:	f000 fdfe 	bl	800218e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001592:	2025      	movs	r0, #37	@ 0x25
 8001594:	f000 fe17 	bl	80021c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001598:	e03c      	b.n	8001614 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a22      	ldr	r2, [pc, #136]	@ (8001628 <HAL_UART_MspInit+0x124>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d137      	bne.n	8001614 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 80015a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001620 <HAL_UART_MspInit+0x11c>)
 80015a6:	69db      	ldr	r3, [r3, #28]
 80015a8:	4a1d      	ldr	r2, [pc, #116]	@ (8001620 <HAL_UART_MspInit+0x11c>)
 80015aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015ae:	61d3      	str	r3, [r2, #28]
 80015b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001620 <HAL_UART_MspInit+0x11c>)
 80015b2:	69db      	ldr	r3, [r3, #28]
 80015b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015bc:	4b18      	ldr	r3, [pc, #96]	@ (8001620 <HAL_UART_MspInit+0x11c>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	4a17      	ldr	r2, [pc, #92]	@ (8001620 <HAL_UART_MspInit+0x11c>)
 80015c2:	f043 0304 	orr.w	r3, r3, #4
 80015c6:	6193      	str	r3, [r2, #24]
 80015c8:	4b15      	ldr	r3, [pc, #84]	@ (8001620 <HAL_UART_MspInit+0x11c>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	f003 0304 	and.w	r3, r3, #4
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015d4:	2304      	movs	r3, #4
 80015d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d8:	2302      	movs	r3, #2
 80015da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015dc:	2303      	movs	r3, #3
 80015de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e0:	f107 0318 	add.w	r3, r7, #24
 80015e4:	4619      	mov	r1, r3
 80015e6:	480f      	ldr	r0, [pc, #60]	@ (8001624 <HAL_UART_MspInit+0x120>)
 80015e8:	f000 feba 	bl	8002360 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015ec:	2308      	movs	r3, #8
 80015ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f8:	f107 0318 	add.w	r3, r7, #24
 80015fc:	4619      	mov	r1, r3
 80015fe:	4809      	ldr	r0, [pc, #36]	@ (8001624 <HAL_UART_MspInit+0x120>)
 8001600:	f000 feae 	bl	8002360 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001604:	2200      	movs	r2, #0
 8001606:	2100      	movs	r1, #0
 8001608:	2026      	movs	r0, #38	@ 0x26
 800160a:	f000 fdc0 	bl	800218e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800160e:	2026      	movs	r0, #38	@ 0x26
 8001610:	f000 fdd9 	bl	80021c6 <HAL_NVIC_EnableIRQ>
}
 8001614:	bf00      	nop
 8001616:	3728      	adds	r7, #40	@ 0x28
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40013800 	.word	0x40013800
 8001620:	40021000 	.word	0x40021000
 8001624:	40010800 	.word	0x40010800
 8001628:	40004400 	.word	0x40004400

0800162c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <NMI_Handler+0x4>

08001634 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <HardFault_Handler+0x4>

0800163c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <MemManage_Handler+0x4>

08001644 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <BusFault_Handler+0x4>

0800164c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <UsageFault_Handler+0x4>

08001654 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr

08001660 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr

0800166c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr

08001678 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800167c:	f000 f94a 	bl	8001914 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001680:	bf00      	nop
 8001682:	bd80      	pop	{r7, pc}

08001684 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001688:	4802      	ldr	r0, [pc, #8]	@ (8001694 <USART1_IRQHandler+0x10>)
 800168a:	f001 fddd 	bl	8003248 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000220 	.word	0x20000220

08001698 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800169c:	4802      	ldr	r0, [pc, #8]	@ (80016a8 <USART2_IRQHandler+0x10>)
 800169e:	f001 fdd3 	bl	8003248 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000268 	.word	0x20000268

080016ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return 1;
 80016b0:	2301      	movs	r3, #1
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr

080016ba <_kill>:

int _kill(int pid, int sig)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b082      	sub	sp, #8
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
 80016c2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016c4:	f003 f8fe 	bl	80048c4 <__errno>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2216      	movs	r2, #22
 80016cc:	601a      	str	r2, [r3, #0]
  return -1;
 80016ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <_exit>:

void _exit (int status)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016e2:	f04f 31ff 	mov.w	r1, #4294967295
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff ffe7 	bl	80016ba <_kill>
  while (1) {}    /* Make sure we hang here */
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <_exit+0x12>

080016f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
 8001700:	e00a      	b.n	8001718 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001702:	f3af 8000 	nop.w
 8001706:	4601      	mov	r1, r0
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	1c5a      	adds	r2, r3, #1
 800170c:	60ba      	str	r2, [r7, #8]
 800170e:	b2ca      	uxtb	r2, r1
 8001710:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	3301      	adds	r3, #1
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	429a      	cmp	r2, r3
 800171e:	dbf0      	blt.n	8001702 <_read+0x12>
  }

  return len;
 8001720:	687b      	ldr	r3, [r7, #4]
}
 8001722:	4618      	mov	r0, r3
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b086      	sub	sp, #24
 800172e:	af00      	add	r7, sp, #0
 8001730:	60f8      	str	r0, [r7, #12]
 8001732:	60b9      	str	r1, [r7, #8]
 8001734:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
 800173a:	e009      	b.n	8001750 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	1c5a      	adds	r2, r3, #1
 8001740:	60ba      	str	r2, [r7, #8]
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	3301      	adds	r3, #1
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	697a      	ldr	r2, [r7, #20]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	429a      	cmp	r2, r3
 8001756:	dbf1      	blt.n	800173c <_write+0x12>
  }
  return len;
 8001758:	687b      	ldr	r3, [r7, #4]
}
 800175a:	4618      	mov	r0, r3
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <_close>:

int _close(int file)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800176a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800176e:	4618      	mov	r0, r3
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr

08001778 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001788:	605a      	str	r2, [r3, #4]
  return 0;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr

08001796 <_isatty>:

int _isatty(int file)
{
 8001796:	b480      	push	{r7}
 8001798:	b083      	sub	sp, #12
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800179e:	2301      	movs	r3, #1
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr

080017aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b085      	sub	sp, #20
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	60f8      	str	r0, [r7, #12]
 80017b2:	60b9      	str	r1, [r7, #8]
 80017b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr
	...

080017c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017cc:	4a14      	ldr	r2, [pc, #80]	@ (8001820 <_sbrk+0x5c>)
 80017ce:	4b15      	ldr	r3, [pc, #84]	@ (8001824 <_sbrk+0x60>)
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017d8:	4b13      	ldr	r3, [pc, #76]	@ (8001828 <_sbrk+0x64>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d102      	bne.n	80017e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017e0:	4b11      	ldr	r3, [pc, #68]	@ (8001828 <_sbrk+0x64>)
 80017e2:	4a12      	ldr	r2, [pc, #72]	@ (800182c <_sbrk+0x68>)
 80017e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017e6:	4b10      	ldr	r3, [pc, #64]	@ (8001828 <_sbrk+0x64>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d207      	bcs.n	8001804 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017f4:	f003 f866 	bl	80048c4 <__errno>
 80017f8:	4603      	mov	r3, r0
 80017fa:	220c      	movs	r2, #12
 80017fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001802:	e009      	b.n	8001818 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001804:	4b08      	ldr	r3, [pc, #32]	@ (8001828 <_sbrk+0x64>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800180a:	4b07      	ldr	r3, [pc, #28]	@ (8001828 <_sbrk+0x64>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4413      	add	r3, r2
 8001812:	4a05      	ldr	r2, [pc, #20]	@ (8001828 <_sbrk+0x64>)
 8001814:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001816:	68fb      	ldr	r3, [r7, #12]
}
 8001818:	4618      	mov	r0, r3
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20002800 	.word	0x20002800
 8001824:	00000400 	.word	0x00000400
 8001828:	200002fc 	.word	0x200002fc
 800182c:	20000450 	.word	0x20000450

08001830 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr

0800183c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800183c:	f7ff fff8 	bl	8001830 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001840:	480b      	ldr	r0, [pc, #44]	@ (8001870 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001842:	490c      	ldr	r1, [pc, #48]	@ (8001874 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001844:	4a0c      	ldr	r2, [pc, #48]	@ (8001878 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001848:	e002      	b.n	8001850 <LoopCopyDataInit>

0800184a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800184a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800184c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800184e:	3304      	adds	r3, #4

08001850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001854:	d3f9      	bcc.n	800184a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001856:	4a09      	ldr	r2, [pc, #36]	@ (800187c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001858:	4c09      	ldr	r4, [pc, #36]	@ (8001880 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800185a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800185c:	e001      	b.n	8001862 <LoopFillZerobss>

0800185e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800185e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001860:	3204      	adds	r2, #4

08001862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001864:	d3fb      	bcc.n	800185e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001866:	f003 f833 	bl	80048d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800186a:	f7ff fb75 	bl	8000f58 <main>
  bx lr
 800186e:	4770      	bx	lr
  ldr r0, =_sdata
 8001870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001874:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001878:	08006dd8 	.word	0x08006dd8
  ldr r2, =_sbss
 800187c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001880:	20000450 	.word	0x20000450

08001884 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001884:	e7fe      	b.n	8001884 <ADC1_2_IRQHandler>
	...

08001888 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800188c:	4b08      	ldr	r3, [pc, #32]	@ (80018b0 <HAL_Init+0x28>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a07      	ldr	r2, [pc, #28]	@ (80018b0 <HAL_Init+0x28>)
 8001892:	f043 0310 	orr.w	r3, r3, #16
 8001896:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001898:	2003      	movs	r0, #3
 800189a:	f000 fc6d 	bl	8002178 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800189e:	200f      	movs	r0, #15
 80018a0:	f000 f808 	bl	80018b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018a4:	f7ff fdc0 	bl	8001428 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40022000 	.word	0x40022000

080018b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018bc:	4b12      	ldr	r3, [pc, #72]	@ (8001908 <HAL_InitTick+0x54>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	4b12      	ldr	r3, [pc, #72]	@ (800190c <HAL_InitTick+0x58>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	4619      	mov	r1, r3
 80018c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d2:	4618      	mov	r0, r3
 80018d4:	f000 fc85 	bl	80021e2 <HAL_SYSTICK_Config>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e00e      	b.n	8001900 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2b0f      	cmp	r3, #15
 80018e6:	d80a      	bhi.n	80018fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e8:	2200      	movs	r2, #0
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	f04f 30ff 	mov.w	r0, #4294967295
 80018f0:	f000 fc4d 	bl	800218e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018f4:	4a06      	ldr	r2, [pc, #24]	@ (8001910 <HAL_InitTick+0x5c>)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018fa:	2300      	movs	r3, #0
 80018fc:	e000      	b.n	8001900 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
}
 8001900:	4618      	mov	r0, r3
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20000000 	.word	0x20000000
 800190c:	20000008 	.word	0x20000008
 8001910:	20000004 	.word	0x20000004

08001914 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001918:	4b05      	ldr	r3, [pc, #20]	@ (8001930 <HAL_IncTick+0x1c>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	461a      	mov	r2, r3
 800191e:	4b05      	ldr	r3, [pc, #20]	@ (8001934 <HAL_IncTick+0x20>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4413      	add	r3, r2
 8001924:	4a03      	ldr	r2, [pc, #12]	@ (8001934 <HAL_IncTick+0x20>)
 8001926:	6013      	str	r3, [r2, #0]
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr
 8001930:	20000008 	.word	0x20000008
 8001934:	20000300 	.word	0x20000300

08001938 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  return uwTick;
 800193c:	4b02      	ldr	r3, [pc, #8]	@ (8001948 <HAL_GetTick+0x10>)
 800193e:	681b      	ldr	r3, [r3, #0]
}
 8001940:	4618      	mov	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr
 8001948:	20000300 	.word	0x20000300

0800194c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001954:	f7ff fff0 	bl	8001938 <HAL_GetTick>
 8001958:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001964:	d005      	beq.n	8001972 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001966:	4b0a      	ldr	r3, [pc, #40]	@ (8001990 <HAL_Delay+0x44>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	461a      	mov	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4413      	add	r3, r2
 8001970:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001972:	bf00      	nop
 8001974:	f7ff ffe0 	bl	8001938 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	429a      	cmp	r2, r3
 8001982:	d8f7      	bhi.n	8001974 <HAL_Delay+0x28>
  {
  }
}
 8001984:	bf00      	nop
 8001986:	bf00      	nop
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000008 	.word	0x20000008

08001994 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800199c:	2300      	movs	r3, #0
 800199e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80019a4:	2300      	movs	r3, #0
 80019a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d101      	bne.n	80019b6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e0be      	b.n	8001b34 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d109      	bne.n	80019d8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7ff fd5a 	bl	800148c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f000 fabf 	bl	8001f5c <ADC_ConversionStop_Disable>
 80019de:	4603      	mov	r3, r0
 80019e0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e6:	f003 0310 	and.w	r3, r3, #16
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f040 8099 	bne.w	8001b22 <HAL_ADC_Init+0x18e>
 80019f0:	7dfb      	ldrb	r3, [r7, #23]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f040 8095 	bne.w	8001b22 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019fc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a00:	f023 0302 	bic.w	r3, r3, #2
 8001a04:	f043 0202 	orr.w	r2, r3, #2
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a14:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	7b1b      	ldrb	r3, [r3, #12]
 8001a1a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a1c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a1e:	68ba      	ldr	r2, [r7, #8]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a2c:	d003      	beq.n	8001a36 <HAL_ADC_Init+0xa2>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d102      	bne.n	8001a3c <HAL_ADC_Init+0xa8>
 8001a36:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a3a:	e000      	b.n	8001a3e <HAL_ADC_Init+0xaa>
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	7d1b      	ldrb	r3, [r3, #20]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d119      	bne.n	8001a80 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	7b1b      	ldrb	r3, [r3, #12]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d109      	bne.n	8001a68 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	035a      	lsls	r2, r3, #13
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a64:	613b      	str	r3, [r7, #16]
 8001a66:	e00b      	b.n	8001a80 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a6c:	f043 0220 	orr.w	r2, r3, #32
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a78:	f043 0201 	orr.w	r2, r3, #1
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	430a      	orrs	r2, r1
 8001a92:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689a      	ldr	r2, [r3, #8]
 8001a9a:	4b28      	ldr	r3, [pc, #160]	@ (8001b3c <HAL_ADC_Init+0x1a8>)
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	6812      	ldr	r2, [r2, #0]
 8001aa2:	68b9      	ldr	r1, [r7, #8]
 8001aa4:	430b      	orrs	r3, r1
 8001aa6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ab0:	d003      	beq.n	8001aba <HAL_ADC_Init+0x126>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d104      	bne.n	8001ac4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	051b      	lsls	r3, r3, #20
 8001ac2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aca:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	689a      	ldr	r2, [r3, #8]
 8001ade:	4b18      	ldr	r3, [pc, #96]	@ (8001b40 <HAL_ADC_Init+0x1ac>)
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	68ba      	ldr	r2, [r7, #8]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d10b      	bne.n	8001b00 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af2:	f023 0303 	bic.w	r3, r3, #3
 8001af6:	f043 0201 	orr.w	r2, r3, #1
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001afe:	e018      	b.n	8001b32 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b04:	f023 0312 	bic.w	r3, r3, #18
 8001b08:	f043 0210 	orr.w	r2, r3, #16
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b14:	f043 0201 	orr.w	r2, r3, #1
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b20:	e007      	b.n	8001b32 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b26:	f043 0210 	orr.w	r2, r3, #16
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b32:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3718      	adds	r7, #24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	ffe1f7fd 	.word	0xffe1f7fd
 8001b40:	ff1f0efe 	.word	0xff1f0efe

08001b44 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d101      	bne.n	8001b5e <HAL_ADC_Start+0x1a>
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	e098      	b.n	8001c90 <HAL_ADC_Start+0x14c>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 f99e 	bl	8001ea8 <ADC_Enable>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f040 8087 	bne.w	8001c86 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001b80:	f023 0301 	bic.w	r3, r3, #1
 8001b84:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a41      	ldr	r2, [pc, #260]	@ (8001c98 <HAL_ADC_Start+0x154>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d105      	bne.n	8001ba2 <HAL_ADC_Start+0x5e>
 8001b96:	4b41      	ldr	r3, [pc, #260]	@ (8001c9c <HAL_ADC_Start+0x158>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d115      	bne.n	8001bce <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d026      	beq.n	8001c0a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001bc4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bcc:	e01d      	b.n	8001c0a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bd2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a2f      	ldr	r2, [pc, #188]	@ (8001c9c <HAL_ADC_Start+0x158>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d004      	beq.n	8001bee <HAL_ADC_Start+0xaa>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a2b      	ldr	r2, [pc, #172]	@ (8001c98 <HAL_ADC_Start+0x154>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d10d      	bne.n	8001c0a <HAL_ADC_Start+0xc6>
 8001bee:	4b2b      	ldr	r3, [pc, #172]	@ (8001c9c <HAL_ADC_Start+0x158>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d007      	beq.n	8001c0a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bfe:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c02:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d006      	beq.n	8001c24 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c1a:	f023 0206 	bic.w	r2, r3, #6
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001c22:	e002      	b.n	8001c2a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f06f 0202 	mvn.w	r2, #2
 8001c3a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001c46:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001c4a:	d113      	bne.n	8001c74 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001c50:	4a11      	ldr	r2, [pc, #68]	@ (8001c98 <HAL_ADC_Start+0x154>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d105      	bne.n	8001c62 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001c56:	4b11      	ldr	r3, [pc, #68]	@ (8001c9c <HAL_ADC_Start+0x158>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d108      	bne.n	8001c74 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001c70:	609a      	str	r2, [r3, #8]
 8001c72:	e00c      	b.n	8001c8e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	689a      	ldr	r2, [r3, #8]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	e003      	b.n	8001c8e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40012800 	.word	0x40012800
 8001c9c:	40012400 	.word	0x40012400

08001ca0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d101      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0x20>
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	e0dc      	b.n	8001e92 <HAL_ADC_ConfigChannel+0x1da>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	2b06      	cmp	r3, #6
 8001ce6:	d81c      	bhi.n	8001d22 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	3b05      	subs	r3, #5
 8001cfa:	221f      	movs	r2, #31
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	43db      	mvns	r3, r3
 8001d02:	4019      	ands	r1, r3
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	6818      	ldr	r0, [r3, #0]
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	3b05      	subs	r3, #5
 8001d14:	fa00 f203 	lsl.w	r2, r0, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d20:	e03c      	b.n	8001d9c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	2b0c      	cmp	r3, #12
 8001d28:	d81c      	bhi.n	8001d64 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	4613      	mov	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	3b23      	subs	r3, #35	@ 0x23
 8001d3c:	221f      	movs	r2, #31
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43db      	mvns	r3, r3
 8001d44:	4019      	ands	r1, r3
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	6818      	ldr	r0, [r3, #0]
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685a      	ldr	r2, [r3, #4]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	4413      	add	r3, r2
 8001d54:	3b23      	subs	r3, #35	@ 0x23
 8001d56:	fa00 f203 	lsl.w	r2, r0, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d62:	e01b      	b.n	8001d9c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685a      	ldr	r2, [r3, #4]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	3b41      	subs	r3, #65	@ 0x41
 8001d76:	221f      	movs	r2, #31
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	4019      	ands	r1, r3
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	6818      	ldr	r0, [r3, #0]
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	3b41      	subs	r3, #65	@ 0x41
 8001d90:	fa00 f203 	lsl.w	r2, r0, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2b09      	cmp	r3, #9
 8001da2:	d91c      	bls.n	8001dde <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68d9      	ldr	r1, [r3, #12]
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	4613      	mov	r3, r2
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	4413      	add	r3, r2
 8001db4:	3b1e      	subs	r3, #30
 8001db6:	2207      	movs	r2, #7
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	4019      	ands	r1, r3
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	6898      	ldr	r0, [r3, #8]
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	4413      	add	r3, r2
 8001dce:	3b1e      	subs	r3, #30
 8001dd0:	fa00 f203 	lsl.w	r2, r0, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	60da      	str	r2, [r3, #12]
 8001ddc:	e019      	b.n	8001e12 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6919      	ldr	r1, [r3, #16]
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	4613      	mov	r3, r2
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	4413      	add	r3, r2
 8001dee:	2207      	movs	r2, #7
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	4019      	ands	r1, r3
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	6898      	ldr	r0, [r3, #8]
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	4613      	mov	r3, r2
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	4413      	add	r3, r2
 8001e06:	fa00 f203 	lsl.w	r2, r0, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2b10      	cmp	r3, #16
 8001e18:	d003      	beq.n	8001e22 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e1e:	2b11      	cmp	r3, #17
 8001e20:	d132      	bne.n	8001e88 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a1d      	ldr	r2, [pc, #116]	@ (8001e9c <HAL_ADC_ConfigChannel+0x1e4>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d125      	bne.n	8001e78 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d126      	bne.n	8001e88 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001e48:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2b10      	cmp	r3, #16
 8001e50:	d11a      	bne.n	8001e88 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e52:	4b13      	ldr	r3, [pc, #76]	@ (8001ea0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a13      	ldr	r2, [pc, #76]	@ (8001ea4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001e58:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5c:	0c9a      	lsrs	r2, r3, #18
 8001e5e:	4613      	mov	r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e68:	e002      	b.n	8001e70 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1f9      	bne.n	8001e6a <HAL_ADC_ConfigChannel+0x1b2>
 8001e76:	e007      	b.n	8001e88 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e7c:	f043 0220 	orr.w	r2, r3, #32
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr
 8001e9c:	40012400 	.word	0x40012400
 8001ea0:	20000000 	.word	0x20000000
 8001ea4:	431bde83 	.word	0x431bde83

08001ea8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d040      	beq.n	8001f48 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f042 0201 	orr.w	r2, r2, #1
 8001ed4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ed6:	4b1f      	ldr	r3, [pc, #124]	@ (8001f54 <ADC_Enable+0xac>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a1f      	ldr	r2, [pc, #124]	@ (8001f58 <ADC_Enable+0xb0>)
 8001edc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee0:	0c9b      	lsrs	r3, r3, #18
 8001ee2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ee4:	e002      	b.n	8001eec <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1f9      	bne.n	8001ee6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ef2:	f7ff fd21 	bl	8001938 <HAL_GetTick>
 8001ef6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ef8:	e01f      	b.n	8001f3a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001efa:	f7ff fd1d 	bl	8001938 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d918      	bls.n	8001f3a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d011      	beq.n	8001f3a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f1a:	f043 0210 	orr.w	r2, r3, #16
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f26:	f043 0201 	orr.w	r2, r3, #1
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e007      	b.n	8001f4a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d1d8      	bne.n	8001efa <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20000000 	.word	0x20000000
 8001f58:	431bde83 	.word	0x431bde83

08001f5c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d12e      	bne.n	8001fd4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0201 	bic.w	r2, r2, #1
 8001f84:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f86:	f7ff fcd7 	bl	8001938 <HAL_GetTick>
 8001f8a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f8c:	e01b      	b.n	8001fc6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f8e:	f7ff fcd3 	bl	8001938 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d914      	bls.n	8001fc6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d10d      	bne.n	8001fc6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fae:	f043 0210 	orr.w	r2, r3, #16
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fba:	f043 0201 	orr.w	r2, r3, #1
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e007      	b.n	8001fd6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d0dc      	beq.n	8001f8e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
	...

08001fe0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8002024 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ff6:	68ba      	ldr	r2, [r7, #8]
 8001ff8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002008:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800200c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002012:	4a04      	ldr	r2, [pc, #16]	@ (8002024 <__NVIC_SetPriorityGrouping+0x44>)
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	60d3      	str	r3, [r2, #12]
}
 8002018:	bf00      	nop
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	bc80      	pop	{r7}
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800202c:	4b04      	ldr	r3, [pc, #16]	@ (8002040 <__NVIC_GetPriorityGrouping+0x18>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	0a1b      	lsrs	r3, r3, #8
 8002032:	f003 0307 	and.w	r3, r3, #7
}
 8002036:	4618      	mov	r0, r3
 8002038:	46bd      	mov	sp, r7
 800203a:	bc80      	pop	{r7}
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	e000ed00 	.word	0xe000ed00

08002044 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800204e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002052:	2b00      	cmp	r3, #0
 8002054:	db0b      	blt.n	800206e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002056:	79fb      	ldrb	r3, [r7, #7]
 8002058:	f003 021f 	and.w	r2, r3, #31
 800205c:	4906      	ldr	r1, [pc, #24]	@ (8002078 <__NVIC_EnableIRQ+0x34>)
 800205e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002062:	095b      	lsrs	r3, r3, #5
 8002064:	2001      	movs	r0, #1
 8002066:	fa00 f202 	lsl.w	r2, r0, r2
 800206a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800206e:	bf00      	nop
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	bc80      	pop	{r7}
 8002076:	4770      	bx	lr
 8002078:	e000e100 	.word	0xe000e100

0800207c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	6039      	str	r1, [r7, #0]
 8002086:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208c:	2b00      	cmp	r3, #0
 800208e:	db0a      	blt.n	80020a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	b2da      	uxtb	r2, r3
 8002094:	490c      	ldr	r1, [pc, #48]	@ (80020c8 <__NVIC_SetPriority+0x4c>)
 8002096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209a:	0112      	lsls	r2, r2, #4
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	440b      	add	r3, r1
 80020a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020a4:	e00a      	b.n	80020bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	4908      	ldr	r1, [pc, #32]	@ (80020cc <__NVIC_SetPriority+0x50>)
 80020ac:	79fb      	ldrb	r3, [r7, #7]
 80020ae:	f003 030f 	and.w	r3, r3, #15
 80020b2:	3b04      	subs	r3, #4
 80020b4:	0112      	lsls	r2, r2, #4
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	440b      	add	r3, r1
 80020ba:	761a      	strb	r2, [r3, #24]
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bc80      	pop	{r7}
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	e000e100 	.word	0xe000e100
 80020cc:	e000ed00 	.word	0xe000ed00

080020d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b089      	sub	sp, #36	@ 0x24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	f1c3 0307 	rsb	r3, r3, #7
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	bf28      	it	cs
 80020ee:	2304      	movcs	r3, #4
 80020f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	3304      	adds	r3, #4
 80020f6:	2b06      	cmp	r3, #6
 80020f8:	d902      	bls.n	8002100 <NVIC_EncodePriority+0x30>
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	3b03      	subs	r3, #3
 80020fe:	e000      	b.n	8002102 <NVIC_EncodePriority+0x32>
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002104:	f04f 32ff 	mov.w	r2, #4294967295
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	43da      	mvns	r2, r3
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	401a      	ands	r2, r3
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002118:	f04f 31ff 	mov.w	r1, #4294967295
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	fa01 f303 	lsl.w	r3, r1, r3
 8002122:	43d9      	mvns	r1, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002128:	4313      	orrs	r3, r2
         );
}
 800212a:	4618      	mov	r0, r3
 800212c:	3724      	adds	r7, #36	@ 0x24
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr

08002134 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3b01      	subs	r3, #1
 8002140:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002144:	d301      	bcc.n	800214a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002146:	2301      	movs	r3, #1
 8002148:	e00f      	b.n	800216a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800214a:	4a0a      	ldr	r2, [pc, #40]	@ (8002174 <SysTick_Config+0x40>)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3b01      	subs	r3, #1
 8002150:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002152:	210f      	movs	r1, #15
 8002154:	f04f 30ff 	mov.w	r0, #4294967295
 8002158:	f7ff ff90 	bl	800207c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800215c:	4b05      	ldr	r3, [pc, #20]	@ (8002174 <SysTick_Config+0x40>)
 800215e:	2200      	movs	r2, #0
 8002160:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002162:	4b04      	ldr	r3, [pc, #16]	@ (8002174 <SysTick_Config+0x40>)
 8002164:	2207      	movs	r2, #7
 8002166:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	e000e010 	.word	0xe000e010

08002178 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f7ff ff2d 	bl	8001fe0 <__NVIC_SetPriorityGrouping>
}
 8002186:	bf00      	nop
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800218e:	b580      	push	{r7, lr}
 8002190:	b086      	sub	sp, #24
 8002192:	af00      	add	r7, sp, #0
 8002194:	4603      	mov	r3, r0
 8002196:	60b9      	str	r1, [r7, #8]
 8002198:	607a      	str	r2, [r7, #4]
 800219a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021a0:	f7ff ff42 	bl	8002028 <__NVIC_GetPriorityGrouping>
 80021a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	68b9      	ldr	r1, [r7, #8]
 80021aa:	6978      	ldr	r0, [r7, #20]
 80021ac:	f7ff ff90 	bl	80020d0 <NVIC_EncodePriority>
 80021b0:	4602      	mov	r2, r0
 80021b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021b6:	4611      	mov	r1, r2
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff ff5f 	bl	800207c <__NVIC_SetPriority>
}
 80021be:	bf00      	nop
 80021c0:	3718      	adds	r7, #24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b082      	sub	sp, #8
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	4603      	mov	r3, r0
 80021ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff ff35 	bl	8002044 <__NVIC_EnableIRQ>
}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b082      	sub	sp, #8
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7ff ffa2 	bl	8002134 <SysTick_Config>
 80021f0:	4603      	mov	r3, r0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b085      	sub	sp, #20
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002202:	2300      	movs	r3, #0
 8002204:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d008      	beq.n	8002224 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2204      	movs	r2, #4
 8002216:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e020      	b.n	8002266 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 020e 	bic.w	r2, r2, #14
 8002232:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 0201 	bic.w	r2, r2, #1
 8002242:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800224c:	2101      	movs	r1, #1
 800224e:	fa01 f202 	lsl.w	r2, r1, r2
 8002252:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002264:	7bfb      	ldrb	r3, [r7, #15]
}
 8002266:	4618      	mov	r0, r3
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr

08002270 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002278:	2300      	movs	r3, #0
 800227a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d005      	beq.n	8002294 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2204      	movs	r2, #4
 800228c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	73fb      	strb	r3, [r7, #15]
 8002292:	e051      	b.n	8002338 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 020e 	bic.w	r2, r2, #14
 80022a2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 0201 	bic.w	r2, r2, #1
 80022b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a22      	ldr	r2, [pc, #136]	@ (8002344 <HAL_DMA_Abort_IT+0xd4>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d029      	beq.n	8002312 <HAL_DMA_Abort_IT+0xa2>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a21      	ldr	r2, [pc, #132]	@ (8002348 <HAL_DMA_Abort_IT+0xd8>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d022      	beq.n	800230e <HAL_DMA_Abort_IT+0x9e>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a1f      	ldr	r2, [pc, #124]	@ (800234c <HAL_DMA_Abort_IT+0xdc>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d01a      	beq.n	8002308 <HAL_DMA_Abort_IT+0x98>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a1e      	ldr	r2, [pc, #120]	@ (8002350 <HAL_DMA_Abort_IT+0xe0>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d012      	beq.n	8002302 <HAL_DMA_Abort_IT+0x92>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a1c      	ldr	r2, [pc, #112]	@ (8002354 <HAL_DMA_Abort_IT+0xe4>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d00a      	beq.n	80022fc <HAL_DMA_Abort_IT+0x8c>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a1b      	ldr	r2, [pc, #108]	@ (8002358 <HAL_DMA_Abort_IT+0xe8>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d102      	bne.n	80022f6 <HAL_DMA_Abort_IT+0x86>
 80022f0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80022f4:	e00e      	b.n	8002314 <HAL_DMA_Abort_IT+0xa4>
 80022f6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80022fa:	e00b      	b.n	8002314 <HAL_DMA_Abort_IT+0xa4>
 80022fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002300:	e008      	b.n	8002314 <HAL_DMA_Abort_IT+0xa4>
 8002302:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002306:	e005      	b.n	8002314 <HAL_DMA_Abort_IT+0xa4>
 8002308:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800230c:	e002      	b.n	8002314 <HAL_DMA_Abort_IT+0xa4>
 800230e:	2310      	movs	r3, #16
 8002310:	e000      	b.n	8002314 <HAL_DMA_Abort_IT+0xa4>
 8002312:	2301      	movs	r3, #1
 8002314:	4a11      	ldr	r2, [pc, #68]	@ (800235c <HAL_DMA_Abort_IT+0xec>)
 8002316:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800232c:	2b00      	cmp	r3, #0
 800232e:	d003      	beq.n	8002338 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	4798      	blx	r3
    } 
  }
  return status;
 8002338:	7bfb      	ldrb	r3, [r7, #15]
}
 800233a:	4618      	mov	r0, r3
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40020008 	.word	0x40020008
 8002348:	4002001c 	.word	0x4002001c
 800234c:	40020030 	.word	0x40020030
 8002350:	40020044 	.word	0x40020044
 8002354:	40020058 	.word	0x40020058
 8002358:	4002006c 	.word	0x4002006c
 800235c:	40020000 	.word	0x40020000

08002360 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002360:	b480      	push	{r7}
 8002362:	b08b      	sub	sp, #44	@ 0x2c
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800236a:	2300      	movs	r3, #0
 800236c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800236e:	2300      	movs	r3, #0
 8002370:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002372:	e161      	b.n	8002638 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002374:	2201      	movs	r2, #1
 8002376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	69fa      	ldr	r2, [r7, #28]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	429a      	cmp	r2, r3
 800238e:	f040 8150 	bne.w	8002632 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	4a97      	ldr	r2, [pc, #604]	@ (80025f4 <HAL_GPIO_Init+0x294>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d05e      	beq.n	800245a <HAL_GPIO_Init+0xfa>
 800239c:	4a95      	ldr	r2, [pc, #596]	@ (80025f4 <HAL_GPIO_Init+0x294>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d875      	bhi.n	800248e <HAL_GPIO_Init+0x12e>
 80023a2:	4a95      	ldr	r2, [pc, #596]	@ (80025f8 <HAL_GPIO_Init+0x298>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d058      	beq.n	800245a <HAL_GPIO_Init+0xfa>
 80023a8:	4a93      	ldr	r2, [pc, #588]	@ (80025f8 <HAL_GPIO_Init+0x298>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d86f      	bhi.n	800248e <HAL_GPIO_Init+0x12e>
 80023ae:	4a93      	ldr	r2, [pc, #588]	@ (80025fc <HAL_GPIO_Init+0x29c>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d052      	beq.n	800245a <HAL_GPIO_Init+0xfa>
 80023b4:	4a91      	ldr	r2, [pc, #580]	@ (80025fc <HAL_GPIO_Init+0x29c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d869      	bhi.n	800248e <HAL_GPIO_Init+0x12e>
 80023ba:	4a91      	ldr	r2, [pc, #580]	@ (8002600 <HAL_GPIO_Init+0x2a0>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d04c      	beq.n	800245a <HAL_GPIO_Init+0xfa>
 80023c0:	4a8f      	ldr	r2, [pc, #572]	@ (8002600 <HAL_GPIO_Init+0x2a0>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d863      	bhi.n	800248e <HAL_GPIO_Init+0x12e>
 80023c6:	4a8f      	ldr	r2, [pc, #572]	@ (8002604 <HAL_GPIO_Init+0x2a4>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d046      	beq.n	800245a <HAL_GPIO_Init+0xfa>
 80023cc:	4a8d      	ldr	r2, [pc, #564]	@ (8002604 <HAL_GPIO_Init+0x2a4>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d85d      	bhi.n	800248e <HAL_GPIO_Init+0x12e>
 80023d2:	2b12      	cmp	r3, #18
 80023d4:	d82a      	bhi.n	800242c <HAL_GPIO_Init+0xcc>
 80023d6:	2b12      	cmp	r3, #18
 80023d8:	d859      	bhi.n	800248e <HAL_GPIO_Init+0x12e>
 80023da:	a201      	add	r2, pc, #4	@ (adr r2, 80023e0 <HAL_GPIO_Init+0x80>)
 80023dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e0:	0800245b 	.word	0x0800245b
 80023e4:	08002435 	.word	0x08002435
 80023e8:	08002447 	.word	0x08002447
 80023ec:	08002489 	.word	0x08002489
 80023f0:	0800248f 	.word	0x0800248f
 80023f4:	0800248f 	.word	0x0800248f
 80023f8:	0800248f 	.word	0x0800248f
 80023fc:	0800248f 	.word	0x0800248f
 8002400:	0800248f 	.word	0x0800248f
 8002404:	0800248f 	.word	0x0800248f
 8002408:	0800248f 	.word	0x0800248f
 800240c:	0800248f 	.word	0x0800248f
 8002410:	0800248f 	.word	0x0800248f
 8002414:	0800248f 	.word	0x0800248f
 8002418:	0800248f 	.word	0x0800248f
 800241c:	0800248f 	.word	0x0800248f
 8002420:	0800248f 	.word	0x0800248f
 8002424:	0800243d 	.word	0x0800243d
 8002428:	08002451 	.word	0x08002451
 800242c:	4a76      	ldr	r2, [pc, #472]	@ (8002608 <HAL_GPIO_Init+0x2a8>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d013      	beq.n	800245a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002432:	e02c      	b.n	800248e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	623b      	str	r3, [r7, #32]
          break;
 800243a:	e029      	b.n	8002490 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	3304      	adds	r3, #4
 8002442:	623b      	str	r3, [r7, #32]
          break;
 8002444:	e024      	b.n	8002490 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	3308      	adds	r3, #8
 800244c:	623b      	str	r3, [r7, #32]
          break;
 800244e:	e01f      	b.n	8002490 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	330c      	adds	r3, #12
 8002456:	623b      	str	r3, [r7, #32]
          break;
 8002458:	e01a      	b.n	8002490 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d102      	bne.n	8002468 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002462:	2304      	movs	r3, #4
 8002464:	623b      	str	r3, [r7, #32]
          break;
 8002466:	e013      	b.n	8002490 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d105      	bne.n	800247c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002470:	2308      	movs	r3, #8
 8002472:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	69fa      	ldr	r2, [r7, #28]
 8002478:	611a      	str	r2, [r3, #16]
          break;
 800247a:	e009      	b.n	8002490 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800247c:	2308      	movs	r3, #8
 800247e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	69fa      	ldr	r2, [r7, #28]
 8002484:	615a      	str	r2, [r3, #20]
          break;
 8002486:	e003      	b.n	8002490 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002488:	2300      	movs	r3, #0
 800248a:	623b      	str	r3, [r7, #32]
          break;
 800248c:	e000      	b.n	8002490 <HAL_GPIO_Init+0x130>
          break;
 800248e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	2bff      	cmp	r3, #255	@ 0xff
 8002494:	d801      	bhi.n	800249a <HAL_GPIO_Init+0x13a>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	e001      	b.n	800249e <HAL_GPIO_Init+0x13e>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	3304      	adds	r3, #4
 800249e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	2bff      	cmp	r3, #255	@ 0xff
 80024a4:	d802      	bhi.n	80024ac <HAL_GPIO_Init+0x14c>
 80024a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	e002      	b.n	80024b2 <HAL_GPIO_Init+0x152>
 80024ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ae:	3b08      	subs	r3, #8
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	210f      	movs	r1, #15
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	fa01 f303 	lsl.w	r3, r1, r3
 80024c0:	43db      	mvns	r3, r3
 80024c2:	401a      	ands	r2, r3
 80024c4:	6a39      	ldr	r1, [r7, #32]
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	fa01 f303 	lsl.w	r3, r1, r3
 80024cc:	431a      	orrs	r2, r3
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 80a9 	beq.w	8002632 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024e0:	4b4a      	ldr	r3, [pc, #296]	@ (800260c <HAL_GPIO_Init+0x2ac>)
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	4a49      	ldr	r2, [pc, #292]	@ (800260c <HAL_GPIO_Init+0x2ac>)
 80024e6:	f043 0301 	orr.w	r3, r3, #1
 80024ea:	6193      	str	r3, [r2, #24]
 80024ec:	4b47      	ldr	r3, [pc, #284]	@ (800260c <HAL_GPIO_Init+0x2ac>)
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	60bb      	str	r3, [r7, #8]
 80024f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024f8:	4a45      	ldr	r2, [pc, #276]	@ (8002610 <HAL_GPIO_Init+0x2b0>)
 80024fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fc:	089b      	lsrs	r3, r3, #2
 80024fe:	3302      	adds	r3, #2
 8002500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002504:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002508:	f003 0303 	and.w	r3, r3, #3
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	220f      	movs	r2, #15
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	4013      	ands	r3, r2
 800251a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4a3d      	ldr	r2, [pc, #244]	@ (8002614 <HAL_GPIO_Init+0x2b4>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d00d      	beq.n	8002540 <HAL_GPIO_Init+0x1e0>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a3c      	ldr	r2, [pc, #240]	@ (8002618 <HAL_GPIO_Init+0x2b8>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d007      	beq.n	800253c <HAL_GPIO_Init+0x1dc>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a3b      	ldr	r2, [pc, #236]	@ (800261c <HAL_GPIO_Init+0x2bc>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d101      	bne.n	8002538 <HAL_GPIO_Init+0x1d8>
 8002534:	2302      	movs	r3, #2
 8002536:	e004      	b.n	8002542 <HAL_GPIO_Init+0x1e2>
 8002538:	2303      	movs	r3, #3
 800253a:	e002      	b.n	8002542 <HAL_GPIO_Init+0x1e2>
 800253c:	2301      	movs	r3, #1
 800253e:	e000      	b.n	8002542 <HAL_GPIO_Init+0x1e2>
 8002540:	2300      	movs	r3, #0
 8002542:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002544:	f002 0203 	and.w	r2, r2, #3
 8002548:	0092      	lsls	r2, r2, #2
 800254a:	4093      	lsls	r3, r2
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	4313      	orrs	r3, r2
 8002550:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002552:	492f      	ldr	r1, [pc, #188]	@ (8002610 <HAL_GPIO_Init+0x2b0>)
 8002554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002556:	089b      	lsrs	r3, r3, #2
 8002558:	3302      	adds	r3, #2
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d006      	beq.n	800257a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800256c:	4b2c      	ldr	r3, [pc, #176]	@ (8002620 <HAL_GPIO_Init+0x2c0>)
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	492b      	ldr	r1, [pc, #172]	@ (8002620 <HAL_GPIO_Init+0x2c0>)
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	4313      	orrs	r3, r2
 8002576:	608b      	str	r3, [r1, #8]
 8002578:	e006      	b.n	8002588 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800257a:	4b29      	ldr	r3, [pc, #164]	@ (8002620 <HAL_GPIO_Init+0x2c0>)
 800257c:	689a      	ldr	r2, [r3, #8]
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	43db      	mvns	r3, r3
 8002582:	4927      	ldr	r1, [pc, #156]	@ (8002620 <HAL_GPIO_Init+0x2c0>)
 8002584:	4013      	ands	r3, r2
 8002586:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d006      	beq.n	80025a2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002594:	4b22      	ldr	r3, [pc, #136]	@ (8002620 <HAL_GPIO_Init+0x2c0>)
 8002596:	68da      	ldr	r2, [r3, #12]
 8002598:	4921      	ldr	r1, [pc, #132]	@ (8002620 <HAL_GPIO_Init+0x2c0>)
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	4313      	orrs	r3, r2
 800259e:	60cb      	str	r3, [r1, #12]
 80025a0:	e006      	b.n	80025b0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025a2:	4b1f      	ldr	r3, [pc, #124]	@ (8002620 <HAL_GPIO_Init+0x2c0>)
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	43db      	mvns	r3, r3
 80025aa:	491d      	ldr	r1, [pc, #116]	@ (8002620 <HAL_GPIO_Init+0x2c0>)
 80025ac:	4013      	ands	r3, r2
 80025ae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d006      	beq.n	80025ca <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025bc:	4b18      	ldr	r3, [pc, #96]	@ (8002620 <HAL_GPIO_Init+0x2c0>)
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	4917      	ldr	r1, [pc, #92]	@ (8002620 <HAL_GPIO_Init+0x2c0>)
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	604b      	str	r3, [r1, #4]
 80025c8:	e006      	b.n	80025d8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025ca:	4b15      	ldr	r3, [pc, #84]	@ (8002620 <HAL_GPIO_Init+0x2c0>)
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	43db      	mvns	r3, r3
 80025d2:	4913      	ldr	r1, [pc, #76]	@ (8002620 <HAL_GPIO_Init+0x2c0>)
 80025d4:	4013      	ands	r3, r2
 80025d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d01f      	beq.n	8002624 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002620 <HAL_GPIO_Init+0x2c0>)
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	490d      	ldr	r1, [pc, #52]	@ (8002620 <HAL_GPIO_Init+0x2c0>)
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	600b      	str	r3, [r1, #0]
 80025f0:	e01f      	b.n	8002632 <HAL_GPIO_Init+0x2d2>
 80025f2:	bf00      	nop
 80025f4:	10320000 	.word	0x10320000
 80025f8:	10310000 	.word	0x10310000
 80025fc:	10220000 	.word	0x10220000
 8002600:	10210000 	.word	0x10210000
 8002604:	10120000 	.word	0x10120000
 8002608:	10110000 	.word	0x10110000
 800260c:	40021000 	.word	0x40021000
 8002610:	40010000 	.word	0x40010000
 8002614:	40010800 	.word	0x40010800
 8002618:	40010c00 	.word	0x40010c00
 800261c:	40011000 	.word	0x40011000
 8002620:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002624:	4b0b      	ldr	r3, [pc, #44]	@ (8002654 <HAL_GPIO_Init+0x2f4>)
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	43db      	mvns	r3, r3
 800262c:	4909      	ldr	r1, [pc, #36]	@ (8002654 <HAL_GPIO_Init+0x2f4>)
 800262e:	4013      	ands	r3, r2
 8002630:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002634:	3301      	adds	r3, #1
 8002636:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263e:	fa22 f303 	lsr.w	r3, r2, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	f47f ae96 	bne.w	8002374 <HAL_GPIO_Init+0x14>
  }
}
 8002648:	bf00      	nop
 800264a:	bf00      	nop
 800264c:	372c      	adds	r7, #44	@ 0x2c
 800264e:	46bd      	mov	sp, r7
 8002650:	bc80      	pop	{r7}
 8002652:	4770      	bx	lr
 8002654:	40010400 	.word	0x40010400

08002658 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	460b      	mov	r3, r1
 8002662:	807b      	strh	r3, [r7, #2]
 8002664:	4613      	mov	r3, r2
 8002666:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002668:	787b      	ldrb	r3, [r7, #1]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800266e:	887a      	ldrh	r2, [r7, #2]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002674:	e003      	b.n	800267e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002676:	887b      	ldrh	r3, [r7, #2]
 8002678:	041a      	lsls	r2, r3, #16
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	611a      	str	r2, [r3, #16]
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	bc80      	pop	{r7}
 8002686:	4770      	bx	lr

08002688 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	460b      	mov	r3, r1
 8002692:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800269a:	887a      	ldrh	r2, [r7, #2]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4013      	ands	r3, r2
 80026a0:	041a      	lsls	r2, r3, #16
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	43d9      	mvns	r1, r3
 80026a6:	887b      	ldrh	r3, [r7, #2]
 80026a8:	400b      	ands	r3, r1
 80026aa:	431a      	orrs	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	611a      	str	r2, [r3, #16]
}
 80026b0:	bf00      	nop
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bc80      	pop	{r7}
 80026b8:	4770      	bx	lr
	...

080026bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e272      	b.n	8002bb4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 8087 	beq.w	80027ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026dc:	4b92      	ldr	r3, [pc, #584]	@ (8002928 <HAL_RCC_OscConfig+0x26c>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f003 030c 	and.w	r3, r3, #12
 80026e4:	2b04      	cmp	r3, #4
 80026e6:	d00c      	beq.n	8002702 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026e8:	4b8f      	ldr	r3, [pc, #572]	@ (8002928 <HAL_RCC_OscConfig+0x26c>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f003 030c 	and.w	r3, r3, #12
 80026f0:	2b08      	cmp	r3, #8
 80026f2:	d112      	bne.n	800271a <HAL_RCC_OscConfig+0x5e>
 80026f4:	4b8c      	ldr	r3, [pc, #560]	@ (8002928 <HAL_RCC_OscConfig+0x26c>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002700:	d10b      	bne.n	800271a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002702:	4b89      	ldr	r3, [pc, #548]	@ (8002928 <HAL_RCC_OscConfig+0x26c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d06c      	beq.n	80027e8 <HAL_RCC_OscConfig+0x12c>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d168      	bne.n	80027e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e24c      	b.n	8002bb4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002722:	d106      	bne.n	8002732 <HAL_RCC_OscConfig+0x76>
 8002724:	4b80      	ldr	r3, [pc, #512]	@ (8002928 <HAL_RCC_OscConfig+0x26c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a7f      	ldr	r2, [pc, #508]	@ (8002928 <HAL_RCC_OscConfig+0x26c>)
 800272a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800272e:	6013      	str	r3, [r2, #0]
 8002730:	e02e      	b.n	8002790 <HAL_RCC_OscConfig+0xd4>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10c      	bne.n	8002754 <HAL_RCC_OscConfig+0x98>
 800273a:	4b7b      	ldr	r3, [pc, #492]	@ (8002928 <HAL_RCC_OscConfig+0x26c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a7a      	ldr	r2, [pc, #488]	@ (8002928 <HAL_RCC_OscConfig+0x26c>)
 8002740:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002744:	6013      	str	r3, [r2, #0]
 8002746:	4b78      	ldr	r3, [pc, #480]	@ (8002928 <HAL_RCC_OscConfig+0x26c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a77      	ldr	r2, [pc, #476]	@ (8002928 <HAL_RCC_OscConfig+0x26c>)
 800274c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	e01d      	b.n	8002790 <HAL_RCC_OscConfig+0xd4>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800275c:	d10c      	bne.n	8002778 <HAL_RCC_OscConfig+0xbc>
 800275e:	4b72      	ldr	r3, [pc, #456]	@ (8002928 <HAL_RCC_OscConfig+0x26c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a71      	ldr	r2, [pc, #452]	@ (8002928 <HAL_RCC_OscConfig+0x26c>)
 8002764:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	4b6f      	ldr	r3, [pc, #444]	@ (8002928 <HAL_RCC_OscConfig+0x26c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a6e      	ldr	r2, [pc, #440]	@ (8002928 <HAL_RCC_OscConfig+0x26c>)
 8002770:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002774:	6013      	str	r3, [r2, #0]
 8002776:	e00b      	b.n	8002790 <HAL_RCC_OscConfig+0xd4>
 8002778:	4b6b      	ldr	r3, [pc, #428]	@ (8002928 <HAL_RCC_OscConfig+0x26c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a6a      	ldr	r2, [pc, #424]	@ (8002928 <HAL_RCC_OscConfig+0x26c>)
 800277e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002782:	6013      	str	r3, [r2, #0]
 8002784:	4b68      	ldr	r3, [pc, #416]	@ (8002928 <HAL_RCC_OscConfig+0x26c>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a67      	ldr	r2, [pc, #412]	@ (8002928 <HAL_RCC_OscConfig+0x26c>)
 800278a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800278e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d013      	beq.n	80027c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002798:	f7ff f8ce 	bl	8001938 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027a0:	f7ff f8ca 	bl	8001938 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b64      	cmp	r3, #100	@ 0x64
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e200      	b.n	8002bb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b2:	4b5d      	ldr	r3, [pc, #372]	@ (8002928 <HAL_RCC_OscConfig+0x26c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d0f0      	beq.n	80027a0 <HAL_RCC_OscConfig+0xe4>
 80027be:	e014      	b.n	80027ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c0:	f7ff f8ba 	bl	8001938 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c8:	f7ff f8b6 	bl	8001938 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b64      	cmp	r3, #100	@ 0x64
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e1ec      	b.n	8002bb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027da:	4b53      	ldr	r3, [pc, #332]	@ (8002928 <HAL_RCC_OscConfig+0x26c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1f0      	bne.n	80027c8 <HAL_RCC_OscConfig+0x10c>
 80027e6:	e000      	b.n	80027ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d063      	beq.n	80028be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027f6:	4b4c      	ldr	r3, [pc, #304]	@ (8002928 <HAL_RCC_OscConfig+0x26c>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f003 030c 	and.w	r3, r3, #12
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00b      	beq.n	800281a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002802:	4b49      	ldr	r3, [pc, #292]	@ (8002928 <HAL_RCC_OscConfig+0x26c>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f003 030c 	and.w	r3, r3, #12
 800280a:	2b08      	cmp	r3, #8
 800280c:	d11c      	bne.n	8002848 <HAL_RCC_OscConfig+0x18c>
 800280e:	4b46      	ldr	r3, [pc, #280]	@ (8002928 <HAL_RCC_OscConfig+0x26c>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d116      	bne.n	8002848 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800281a:	4b43      	ldr	r3, [pc, #268]	@ (8002928 <HAL_RCC_OscConfig+0x26c>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d005      	beq.n	8002832 <HAL_RCC_OscConfig+0x176>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d001      	beq.n	8002832 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e1c0      	b.n	8002bb4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002832:	4b3d      	ldr	r3, [pc, #244]	@ (8002928 <HAL_RCC_OscConfig+0x26c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	4939      	ldr	r1, [pc, #228]	@ (8002928 <HAL_RCC_OscConfig+0x26c>)
 8002842:	4313      	orrs	r3, r2
 8002844:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002846:	e03a      	b.n	80028be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d020      	beq.n	8002892 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002850:	4b36      	ldr	r3, [pc, #216]	@ (800292c <HAL_RCC_OscConfig+0x270>)
 8002852:	2201      	movs	r2, #1
 8002854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002856:	f7ff f86f 	bl	8001938 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800285e:	f7ff f86b 	bl	8001938 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e1a1      	b.n	8002bb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002870:	4b2d      	ldr	r3, [pc, #180]	@ (8002928 <HAL_RCC_OscConfig+0x26c>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0f0      	beq.n	800285e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800287c:	4b2a      	ldr	r3, [pc, #168]	@ (8002928 <HAL_RCC_OscConfig+0x26c>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	695b      	ldr	r3, [r3, #20]
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	4927      	ldr	r1, [pc, #156]	@ (8002928 <HAL_RCC_OscConfig+0x26c>)
 800288c:	4313      	orrs	r3, r2
 800288e:	600b      	str	r3, [r1, #0]
 8002890:	e015      	b.n	80028be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002892:	4b26      	ldr	r3, [pc, #152]	@ (800292c <HAL_RCC_OscConfig+0x270>)
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002898:	f7ff f84e 	bl	8001938 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028a0:	f7ff f84a 	bl	8001938 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e180      	b.n	8002bb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002928 <HAL_RCC_OscConfig+0x26c>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f0      	bne.n	80028a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0308 	and.w	r3, r3, #8
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d03a      	beq.n	8002940 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d019      	beq.n	8002906 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028d2:	4b17      	ldr	r3, [pc, #92]	@ (8002930 <HAL_RCC_OscConfig+0x274>)
 80028d4:	2201      	movs	r2, #1
 80028d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028d8:	f7ff f82e 	bl	8001938 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028e0:	f7ff f82a 	bl	8001938 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e160      	b.n	8002bb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002928 <HAL_RCC_OscConfig+0x26c>)
 80028f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d0f0      	beq.n	80028e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80028fe:	2001      	movs	r0, #1
 8002900:	f000 face 	bl	8002ea0 <RCC_Delay>
 8002904:	e01c      	b.n	8002940 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002906:	4b0a      	ldr	r3, [pc, #40]	@ (8002930 <HAL_RCC_OscConfig+0x274>)
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800290c:	f7ff f814 	bl	8001938 <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002912:	e00f      	b.n	8002934 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002914:	f7ff f810 	bl	8001938 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d908      	bls.n	8002934 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e146      	b.n	8002bb4 <HAL_RCC_OscConfig+0x4f8>
 8002926:	bf00      	nop
 8002928:	40021000 	.word	0x40021000
 800292c:	42420000 	.word	0x42420000
 8002930:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002934:	4b92      	ldr	r3, [pc, #584]	@ (8002b80 <HAL_RCC_OscConfig+0x4c4>)
 8002936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1e9      	bne.n	8002914 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	2b00      	cmp	r3, #0
 800294a:	f000 80a6 	beq.w	8002a9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800294e:	2300      	movs	r3, #0
 8002950:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002952:	4b8b      	ldr	r3, [pc, #556]	@ (8002b80 <HAL_RCC_OscConfig+0x4c4>)
 8002954:	69db      	ldr	r3, [r3, #28]
 8002956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10d      	bne.n	800297a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800295e:	4b88      	ldr	r3, [pc, #544]	@ (8002b80 <HAL_RCC_OscConfig+0x4c4>)
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	4a87      	ldr	r2, [pc, #540]	@ (8002b80 <HAL_RCC_OscConfig+0x4c4>)
 8002964:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002968:	61d3      	str	r3, [r2, #28]
 800296a:	4b85      	ldr	r3, [pc, #532]	@ (8002b80 <HAL_RCC_OscConfig+0x4c4>)
 800296c:	69db      	ldr	r3, [r3, #28]
 800296e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002972:	60bb      	str	r3, [r7, #8]
 8002974:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002976:	2301      	movs	r3, #1
 8002978:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800297a:	4b82      	ldr	r3, [pc, #520]	@ (8002b84 <HAL_RCC_OscConfig+0x4c8>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002982:	2b00      	cmp	r3, #0
 8002984:	d118      	bne.n	80029b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002986:	4b7f      	ldr	r3, [pc, #508]	@ (8002b84 <HAL_RCC_OscConfig+0x4c8>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a7e      	ldr	r2, [pc, #504]	@ (8002b84 <HAL_RCC_OscConfig+0x4c8>)
 800298c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002990:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002992:	f7fe ffd1 	bl	8001938 <HAL_GetTick>
 8002996:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002998:	e008      	b.n	80029ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800299a:	f7fe ffcd 	bl	8001938 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b64      	cmp	r3, #100	@ 0x64
 80029a6:	d901      	bls.n	80029ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e103      	b.n	8002bb4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ac:	4b75      	ldr	r3, [pc, #468]	@ (8002b84 <HAL_RCC_OscConfig+0x4c8>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d0f0      	beq.n	800299a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d106      	bne.n	80029ce <HAL_RCC_OscConfig+0x312>
 80029c0:	4b6f      	ldr	r3, [pc, #444]	@ (8002b80 <HAL_RCC_OscConfig+0x4c4>)
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	4a6e      	ldr	r2, [pc, #440]	@ (8002b80 <HAL_RCC_OscConfig+0x4c4>)
 80029c6:	f043 0301 	orr.w	r3, r3, #1
 80029ca:	6213      	str	r3, [r2, #32]
 80029cc:	e02d      	b.n	8002a2a <HAL_RCC_OscConfig+0x36e>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10c      	bne.n	80029f0 <HAL_RCC_OscConfig+0x334>
 80029d6:	4b6a      	ldr	r3, [pc, #424]	@ (8002b80 <HAL_RCC_OscConfig+0x4c4>)
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	4a69      	ldr	r2, [pc, #420]	@ (8002b80 <HAL_RCC_OscConfig+0x4c4>)
 80029dc:	f023 0301 	bic.w	r3, r3, #1
 80029e0:	6213      	str	r3, [r2, #32]
 80029e2:	4b67      	ldr	r3, [pc, #412]	@ (8002b80 <HAL_RCC_OscConfig+0x4c4>)
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	4a66      	ldr	r2, [pc, #408]	@ (8002b80 <HAL_RCC_OscConfig+0x4c4>)
 80029e8:	f023 0304 	bic.w	r3, r3, #4
 80029ec:	6213      	str	r3, [r2, #32]
 80029ee:	e01c      	b.n	8002a2a <HAL_RCC_OscConfig+0x36e>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	2b05      	cmp	r3, #5
 80029f6:	d10c      	bne.n	8002a12 <HAL_RCC_OscConfig+0x356>
 80029f8:	4b61      	ldr	r3, [pc, #388]	@ (8002b80 <HAL_RCC_OscConfig+0x4c4>)
 80029fa:	6a1b      	ldr	r3, [r3, #32]
 80029fc:	4a60      	ldr	r2, [pc, #384]	@ (8002b80 <HAL_RCC_OscConfig+0x4c4>)
 80029fe:	f043 0304 	orr.w	r3, r3, #4
 8002a02:	6213      	str	r3, [r2, #32]
 8002a04:	4b5e      	ldr	r3, [pc, #376]	@ (8002b80 <HAL_RCC_OscConfig+0x4c4>)
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	4a5d      	ldr	r2, [pc, #372]	@ (8002b80 <HAL_RCC_OscConfig+0x4c4>)
 8002a0a:	f043 0301 	orr.w	r3, r3, #1
 8002a0e:	6213      	str	r3, [r2, #32]
 8002a10:	e00b      	b.n	8002a2a <HAL_RCC_OscConfig+0x36e>
 8002a12:	4b5b      	ldr	r3, [pc, #364]	@ (8002b80 <HAL_RCC_OscConfig+0x4c4>)
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	4a5a      	ldr	r2, [pc, #360]	@ (8002b80 <HAL_RCC_OscConfig+0x4c4>)
 8002a18:	f023 0301 	bic.w	r3, r3, #1
 8002a1c:	6213      	str	r3, [r2, #32]
 8002a1e:	4b58      	ldr	r3, [pc, #352]	@ (8002b80 <HAL_RCC_OscConfig+0x4c4>)
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	4a57      	ldr	r2, [pc, #348]	@ (8002b80 <HAL_RCC_OscConfig+0x4c4>)
 8002a24:	f023 0304 	bic.w	r3, r3, #4
 8002a28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d015      	beq.n	8002a5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a32:	f7fe ff81 	bl	8001938 <HAL_GetTick>
 8002a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a38:	e00a      	b.n	8002a50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a3a:	f7fe ff7d 	bl	8001938 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e0b1      	b.n	8002bb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a50:	4b4b      	ldr	r3, [pc, #300]	@ (8002b80 <HAL_RCC_OscConfig+0x4c4>)
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d0ee      	beq.n	8002a3a <HAL_RCC_OscConfig+0x37e>
 8002a5c:	e014      	b.n	8002a88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a5e:	f7fe ff6b 	bl	8001938 <HAL_GetTick>
 8002a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a64:	e00a      	b.n	8002a7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a66:	f7fe ff67 	bl	8001938 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e09b      	b.n	8002bb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a7c:	4b40      	ldr	r3, [pc, #256]	@ (8002b80 <HAL_RCC_OscConfig+0x4c4>)
 8002a7e:	6a1b      	ldr	r3, [r3, #32]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1ee      	bne.n	8002a66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a88:	7dfb      	ldrb	r3, [r7, #23]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d105      	bne.n	8002a9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a8e:	4b3c      	ldr	r3, [pc, #240]	@ (8002b80 <HAL_RCC_OscConfig+0x4c4>)
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	4a3b      	ldr	r2, [pc, #236]	@ (8002b80 <HAL_RCC_OscConfig+0x4c4>)
 8002a94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 8087 	beq.w	8002bb2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002aa4:	4b36      	ldr	r3, [pc, #216]	@ (8002b80 <HAL_RCC_OscConfig+0x4c4>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 030c 	and.w	r3, r3, #12
 8002aac:	2b08      	cmp	r3, #8
 8002aae:	d061      	beq.n	8002b74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	69db      	ldr	r3, [r3, #28]
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d146      	bne.n	8002b46 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ab8:	4b33      	ldr	r3, [pc, #204]	@ (8002b88 <HAL_RCC_OscConfig+0x4cc>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002abe:	f7fe ff3b 	bl	8001938 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac6:	f7fe ff37 	bl	8001938 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e06d      	b.n	8002bb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ad8:	4b29      	ldr	r3, [pc, #164]	@ (8002b80 <HAL_RCC_OscConfig+0x4c4>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1f0      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002aec:	d108      	bne.n	8002b00 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002aee:	4b24      	ldr	r3, [pc, #144]	@ (8002b80 <HAL_RCC_OscConfig+0x4c4>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	4921      	ldr	r1, [pc, #132]	@ (8002b80 <HAL_RCC_OscConfig+0x4c4>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b00:	4b1f      	ldr	r3, [pc, #124]	@ (8002b80 <HAL_RCC_OscConfig+0x4c4>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a19      	ldr	r1, [r3, #32]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b10:	430b      	orrs	r3, r1
 8002b12:	491b      	ldr	r1, [pc, #108]	@ (8002b80 <HAL_RCC_OscConfig+0x4c4>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b18:	4b1b      	ldr	r3, [pc, #108]	@ (8002b88 <HAL_RCC_OscConfig+0x4cc>)
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1e:	f7fe ff0b 	bl	8001938 <HAL_GetTick>
 8002b22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b24:	e008      	b.n	8002b38 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b26:	f7fe ff07 	bl	8001938 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e03d      	b.n	8002bb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b38:	4b11      	ldr	r3, [pc, #68]	@ (8002b80 <HAL_RCC_OscConfig+0x4c4>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d0f0      	beq.n	8002b26 <HAL_RCC_OscConfig+0x46a>
 8002b44:	e035      	b.n	8002bb2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b46:	4b10      	ldr	r3, [pc, #64]	@ (8002b88 <HAL_RCC_OscConfig+0x4cc>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4c:	f7fe fef4 	bl	8001938 <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b54:	f7fe fef0 	bl	8001938 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e026      	b.n	8002bb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b66:	4b06      	ldr	r3, [pc, #24]	@ (8002b80 <HAL_RCC_OscConfig+0x4c4>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1f0      	bne.n	8002b54 <HAL_RCC_OscConfig+0x498>
 8002b72:	e01e      	b.n	8002bb2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d107      	bne.n	8002b8c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e019      	b.n	8002bb4 <HAL_RCC_OscConfig+0x4f8>
 8002b80:	40021000 	.word	0x40021000
 8002b84:	40007000 	.word	0x40007000
 8002b88:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002bbc <HAL_RCC_OscConfig+0x500>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d106      	bne.n	8002bae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d001      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e000      	b.n	8002bb4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3718      	adds	r7, #24
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	40021000 	.word	0x40021000

08002bc0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e0d0      	b.n	8002d76 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bd4:	4b6a      	ldr	r3, [pc, #424]	@ (8002d80 <HAL_RCC_ClockConfig+0x1c0>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0307 	and.w	r3, r3, #7
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d910      	bls.n	8002c04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be2:	4b67      	ldr	r3, [pc, #412]	@ (8002d80 <HAL_RCC_ClockConfig+0x1c0>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f023 0207 	bic.w	r2, r3, #7
 8002bea:	4965      	ldr	r1, [pc, #404]	@ (8002d80 <HAL_RCC_ClockConfig+0x1c0>)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf2:	4b63      	ldr	r3, [pc, #396]	@ (8002d80 <HAL_RCC_ClockConfig+0x1c0>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d001      	beq.n	8002c04 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e0b8      	b.n	8002d76 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d020      	beq.n	8002c52 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0304 	and.w	r3, r3, #4
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d005      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c1c:	4b59      	ldr	r3, [pc, #356]	@ (8002d84 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	4a58      	ldr	r2, [pc, #352]	@ (8002d84 <HAL_RCC_ClockConfig+0x1c4>)
 8002c22:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002c26:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0308 	and.w	r3, r3, #8
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d005      	beq.n	8002c40 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c34:	4b53      	ldr	r3, [pc, #332]	@ (8002d84 <HAL_RCC_ClockConfig+0x1c4>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	4a52      	ldr	r2, [pc, #328]	@ (8002d84 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002c3e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c40:	4b50      	ldr	r3, [pc, #320]	@ (8002d84 <HAL_RCC_ClockConfig+0x1c4>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	494d      	ldr	r1, [pc, #308]	@ (8002d84 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d040      	beq.n	8002ce0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d107      	bne.n	8002c76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c66:	4b47      	ldr	r3, [pc, #284]	@ (8002d84 <HAL_RCC_ClockConfig+0x1c4>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d115      	bne.n	8002c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e07f      	b.n	8002d76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d107      	bne.n	8002c8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c7e:	4b41      	ldr	r3, [pc, #260]	@ (8002d84 <HAL_RCC_ClockConfig+0x1c4>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d109      	bne.n	8002c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e073      	b.n	8002d76 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c8e:	4b3d      	ldr	r3, [pc, #244]	@ (8002d84 <HAL_RCC_ClockConfig+0x1c4>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e06b      	b.n	8002d76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c9e:	4b39      	ldr	r3, [pc, #228]	@ (8002d84 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f023 0203 	bic.w	r2, r3, #3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	4936      	ldr	r1, [pc, #216]	@ (8002d84 <HAL_RCC_ClockConfig+0x1c4>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cb0:	f7fe fe42 	bl	8001938 <HAL_GetTick>
 8002cb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb6:	e00a      	b.n	8002cce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cb8:	f7fe fe3e 	bl	8001938 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e053      	b.n	8002d76 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cce:	4b2d      	ldr	r3, [pc, #180]	@ (8002d84 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f003 020c 	and.w	r2, r3, #12
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d1eb      	bne.n	8002cb8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ce0:	4b27      	ldr	r3, [pc, #156]	@ (8002d80 <HAL_RCC_ClockConfig+0x1c0>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d210      	bcs.n	8002d10 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cee:	4b24      	ldr	r3, [pc, #144]	@ (8002d80 <HAL_RCC_ClockConfig+0x1c0>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f023 0207 	bic.w	r2, r3, #7
 8002cf6:	4922      	ldr	r1, [pc, #136]	@ (8002d80 <HAL_RCC_ClockConfig+0x1c0>)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cfe:	4b20      	ldr	r3, [pc, #128]	@ (8002d80 <HAL_RCC_ClockConfig+0x1c0>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0307 	and.w	r3, r3, #7
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d001      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e032      	b.n	8002d76 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d008      	beq.n	8002d2e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d1c:	4b19      	ldr	r3, [pc, #100]	@ (8002d84 <HAL_RCC_ClockConfig+0x1c4>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	4916      	ldr	r1, [pc, #88]	@ (8002d84 <HAL_RCC_ClockConfig+0x1c4>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0308 	and.w	r3, r3, #8
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d009      	beq.n	8002d4e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d3a:	4b12      	ldr	r3, [pc, #72]	@ (8002d84 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	490e      	ldr	r1, [pc, #56]	@ (8002d84 <HAL_RCC_ClockConfig+0x1c4>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d4e:	f000 f821 	bl	8002d94 <HAL_RCC_GetSysClockFreq>
 8002d52:	4602      	mov	r2, r0
 8002d54:	4b0b      	ldr	r3, [pc, #44]	@ (8002d84 <HAL_RCC_ClockConfig+0x1c4>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	091b      	lsrs	r3, r3, #4
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	490a      	ldr	r1, [pc, #40]	@ (8002d88 <HAL_RCC_ClockConfig+0x1c8>)
 8002d60:	5ccb      	ldrb	r3, [r1, r3]
 8002d62:	fa22 f303 	lsr.w	r3, r2, r3
 8002d66:	4a09      	ldr	r2, [pc, #36]	@ (8002d8c <HAL_RCC_ClockConfig+0x1cc>)
 8002d68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d6a:	4b09      	ldr	r3, [pc, #36]	@ (8002d90 <HAL_RCC_ClockConfig+0x1d0>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7fe fda0 	bl	80018b4 <HAL_InitTick>

  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40022000 	.word	0x40022000
 8002d84:	40021000 	.word	0x40021000
 8002d88:	08006a30 	.word	0x08006a30
 8002d8c:	20000000 	.word	0x20000000
 8002d90:	20000004 	.word	0x20000004

08002d94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b087      	sub	sp, #28
 8002d98:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60bb      	str	r3, [r7, #8]
 8002da2:	2300      	movs	r3, #0
 8002da4:	617b      	str	r3, [r7, #20]
 8002da6:	2300      	movs	r3, #0
 8002da8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002daa:	2300      	movs	r3, #0
 8002dac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002dae:	4b1e      	ldr	r3, [pc, #120]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x94>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f003 030c 	and.w	r3, r3, #12
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	d002      	beq.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x30>
 8002dbe:	2b08      	cmp	r3, #8
 8002dc0:	d003      	beq.n	8002dca <HAL_RCC_GetSysClockFreq+0x36>
 8002dc2:	e027      	b.n	8002e14 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002dc4:	4b19      	ldr	r3, [pc, #100]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x98>)
 8002dc6:	613b      	str	r3, [r7, #16]
      break;
 8002dc8:	e027      	b.n	8002e1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	0c9b      	lsrs	r3, r3, #18
 8002dce:	f003 030f 	and.w	r3, r3, #15
 8002dd2:	4a17      	ldr	r2, [pc, #92]	@ (8002e30 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002dd4:	5cd3      	ldrb	r3, [r2, r3]
 8002dd6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d010      	beq.n	8002e04 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002de2:	4b11      	ldr	r3, [pc, #68]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x94>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	0c5b      	lsrs	r3, r3, #17
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	4a11      	ldr	r2, [pc, #68]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002dee:	5cd3      	ldrb	r3, [r2, r3]
 8002df0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a0d      	ldr	r2, [pc, #52]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x98>)
 8002df6:	fb03 f202 	mul.w	r2, r3, r2
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e00:	617b      	str	r3, [r7, #20]
 8002e02:	e004      	b.n	8002e0e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a0c      	ldr	r2, [pc, #48]	@ (8002e38 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e08:	fb02 f303 	mul.w	r3, r2, r3
 8002e0c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	613b      	str	r3, [r7, #16]
      break;
 8002e12:	e002      	b.n	8002e1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e14:	4b05      	ldr	r3, [pc, #20]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x98>)
 8002e16:	613b      	str	r3, [r7, #16]
      break;
 8002e18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e1a:	693b      	ldr	r3, [r7, #16]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	371c      	adds	r7, #28
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bc80      	pop	{r7}
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	007a1200 	.word	0x007a1200
 8002e30:	08006a48 	.word	0x08006a48
 8002e34:	08006a58 	.word	0x08006a58
 8002e38:	003d0900 	.word	0x003d0900

08002e3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e40:	4b02      	ldr	r3, [pc, #8]	@ (8002e4c <HAL_RCC_GetHCLKFreq+0x10>)
 8002e42:	681b      	ldr	r3, [r3, #0]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr
 8002e4c:	20000000 	.word	0x20000000

08002e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e54:	f7ff fff2 	bl	8002e3c <HAL_RCC_GetHCLKFreq>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	4b05      	ldr	r3, [pc, #20]	@ (8002e70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	0a1b      	lsrs	r3, r3, #8
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	4903      	ldr	r1, [pc, #12]	@ (8002e74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e66:	5ccb      	ldrb	r3, [r1, r3]
 8002e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40021000 	.word	0x40021000
 8002e74:	08006a40 	.word	0x08006a40

08002e78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e7c:	f7ff ffde 	bl	8002e3c <HAL_RCC_GetHCLKFreq>
 8002e80:	4602      	mov	r2, r0
 8002e82:	4b05      	ldr	r3, [pc, #20]	@ (8002e98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	0adb      	lsrs	r3, r3, #11
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	4903      	ldr	r1, [pc, #12]	@ (8002e9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e8e:	5ccb      	ldrb	r3, [r1, r3]
 8002e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	08006a40 	.word	0x08006a40

08002ea0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed4 <RCC_Delay+0x34>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a0a      	ldr	r2, [pc, #40]	@ (8002ed8 <RCC_Delay+0x38>)
 8002eae:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb2:	0a5b      	lsrs	r3, r3, #9
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	fb02 f303 	mul.w	r3, r2, r3
 8002eba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ebc:	bf00      	nop
  }
  while (Delay --);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	1e5a      	subs	r2, r3, #1
 8002ec2:	60fa      	str	r2, [r7, #12]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1f9      	bne.n	8002ebc <RCC_Delay+0x1c>
}
 8002ec8:	bf00      	nop
 8002eca:	bf00      	nop
 8002ecc:	3714      	adds	r7, #20
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bc80      	pop	{r7}
 8002ed2:	4770      	bx	lr
 8002ed4:	20000000 	.word	0x20000000
 8002ed8:	10624dd3 	.word	0x10624dd3

08002edc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	613b      	str	r3, [r7, #16]
 8002ee8:	2300      	movs	r3, #0
 8002eea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d07d      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002efc:	4b4f      	ldr	r3, [pc, #316]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10d      	bne.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f08:	4b4c      	ldr	r3, [pc, #304]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f0a:	69db      	ldr	r3, [r3, #28]
 8002f0c:	4a4b      	ldr	r2, [pc, #300]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f12:	61d3      	str	r3, [r2, #28]
 8002f14:	4b49      	ldr	r3, [pc, #292]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f16:	69db      	ldr	r3, [r3, #28]
 8002f18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f1c:	60bb      	str	r3, [r7, #8]
 8002f1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f20:	2301      	movs	r3, #1
 8002f22:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f24:	4b46      	ldr	r3, [pc, #280]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d118      	bne.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f30:	4b43      	ldr	r3, [pc, #268]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a42      	ldr	r2, [pc, #264]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f3c:	f7fe fcfc 	bl	8001938 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f42:	e008      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f44:	f7fe fcf8 	bl	8001938 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b64      	cmp	r3, #100	@ 0x64
 8002f50:	d901      	bls.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e06d      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f56:	4b3a      	ldr	r3, [pc, #232]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0f0      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f62:	4b36      	ldr	r3, [pc, #216]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f6a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d02e      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d027      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f80:	4b2e      	ldr	r3, [pc, #184]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f88:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f8a:	4b2e      	ldr	r3, [pc, #184]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f90:	4b2c      	ldr	r3, [pc, #176]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f96:	4a29      	ldr	r2, [pc, #164]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d014      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa6:	f7fe fcc7 	bl	8001938 <HAL_GetTick>
 8002faa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fac:	e00a      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fae:	f7fe fcc3 	bl	8001938 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e036      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fc4:	4b1d      	ldr	r3, [pc, #116]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d0ee      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fd0:	4b1a      	ldr	r3, [pc, #104]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	4917      	ldr	r1, [pc, #92]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fe2:	7dfb      	ldrb	r3, [r7, #23]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d105      	bne.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fe8:	4b14      	ldr	r3, [pc, #80]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fea:	69db      	ldr	r3, [r3, #28]
 8002fec:	4a13      	ldr	r2, [pc, #76]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ff2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d008      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003000:	4b0e      	ldr	r3, [pc, #56]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	490b      	ldr	r1, [pc, #44]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800300e:	4313      	orrs	r3, r2
 8003010:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0310 	and.w	r3, r3, #16
 800301a:	2b00      	cmp	r3, #0
 800301c:	d008      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800301e:	4b07      	ldr	r3, [pc, #28]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	4904      	ldr	r1, [pc, #16]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800302c:	4313      	orrs	r3, r2
 800302e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3718      	adds	r7, #24
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	40021000 	.word	0x40021000
 8003040:	40007000 	.word	0x40007000
 8003044:	42420440 	.word	0x42420440

08003048 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e042      	b.n	80030e0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d106      	bne.n	8003074 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f7fe fa48 	bl	8001504 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2224      	movs	r2, #36	@ 0x24
 8003078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800308a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 fdb7 	bl	8003c00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	691a      	ldr	r2, [r3, #16]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80030a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	695a      	ldr	r2, [r3, #20]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80030b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68da      	ldr	r2, [r3, #12]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80030c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2220      	movs	r2, #32
 80030cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2220      	movs	r2, #32
 80030d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3708      	adds	r7, #8
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b08a      	sub	sp, #40	@ 0x28
 80030ec:	af02      	add	r7, sp, #8
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	603b      	str	r3, [r7, #0]
 80030f4:	4613      	mov	r3, r2
 80030f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030f8:	2300      	movs	r3, #0
 80030fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b20      	cmp	r3, #32
 8003106:	d175      	bne.n	80031f4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d002      	beq.n	8003114 <HAL_UART_Transmit+0x2c>
 800310e:	88fb      	ldrh	r3, [r7, #6]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e06e      	b.n	80031f6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2221      	movs	r2, #33	@ 0x21
 8003122:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003126:	f7fe fc07 	bl	8001938 <HAL_GetTick>
 800312a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	88fa      	ldrh	r2, [r7, #6]
 8003130:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	88fa      	ldrh	r2, [r7, #6]
 8003136:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003140:	d108      	bne.n	8003154 <HAL_UART_Transmit+0x6c>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d104      	bne.n	8003154 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800314a:	2300      	movs	r3, #0
 800314c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	61bb      	str	r3, [r7, #24]
 8003152:	e003      	b.n	800315c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003158:	2300      	movs	r3, #0
 800315a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800315c:	e02e      	b.n	80031bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	2200      	movs	r2, #0
 8003166:	2180      	movs	r1, #128	@ 0x80
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f000 fb1c 	bl	80037a6 <UART_WaitOnFlagUntilTimeout>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d005      	beq.n	8003180 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2220      	movs	r2, #32
 8003178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e03a      	b.n	80031f6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10b      	bne.n	800319e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	881b      	ldrh	r3, [r3, #0]
 800318a:	461a      	mov	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003194:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	3302      	adds	r3, #2
 800319a:	61bb      	str	r3, [r7, #24]
 800319c:	e007      	b.n	80031ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	781a      	ldrb	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	3301      	adds	r3, #1
 80031ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1cb      	bne.n	800315e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	2200      	movs	r2, #0
 80031ce:	2140      	movs	r1, #64	@ 0x40
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f000 fae8 	bl	80037a6 <UART_WaitOnFlagUntilTimeout>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d005      	beq.n	80031e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2220      	movs	r2, #32
 80031e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e006      	b.n	80031f6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2220      	movs	r2, #32
 80031ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80031f0:	2300      	movs	r3, #0
 80031f2:	e000      	b.n	80031f6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80031f4:	2302      	movs	r3, #2
  }
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3720      	adds	r7, #32
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b084      	sub	sp, #16
 8003202:	af00      	add	r7, sp, #0
 8003204:	60f8      	str	r0, [r7, #12]
 8003206:	60b9      	str	r1, [r7, #8]
 8003208:	4613      	mov	r3, r2
 800320a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b20      	cmp	r3, #32
 8003216:	d112      	bne.n	800323e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d002      	beq.n	8003224 <HAL_UART_Receive_IT+0x26>
 800321e:	88fb      	ldrh	r3, [r7, #6]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e00b      	b.n	8003240 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800322e:	88fb      	ldrh	r3, [r7, #6]
 8003230:	461a      	mov	r2, r3
 8003232:	68b9      	ldr	r1, [r7, #8]
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f000 fb0f 	bl	8003858 <UART_Start_Receive_IT>
 800323a:	4603      	mov	r3, r0
 800323c:	e000      	b.n	8003240 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800323e:	2302      	movs	r3, #2
  }
}
 8003240:	4618      	mov	r0, r3
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b0ba      	sub	sp, #232	@ 0xe8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800326e:	2300      	movs	r3, #0
 8003270:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003274:	2300      	movs	r3, #0
 8003276:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800327a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003286:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10f      	bne.n	80032ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800328e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003292:	f003 0320 	and.w	r3, r3, #32
 8003296:	2b00      	cmp	r3, #0
 8003298:	d009      	beq.n	80032ae <HAL_UART_IRQHandler+0x66>
 800329a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800329e:	f003 0320 	and.w	r3, r3, #32
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 fbec 	bl	8003a84 <UART_Receive_IT>
      return;
 80032ac:	e25b      	b.n	8003766 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80032ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f000 80de 	beq.w	8003474 <HAL_UART_IRQHandler+0x22c>
 80032b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d106      	bne.n	80032d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80032c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032c8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 80d1 	beq.w	8003474 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80032d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00b      	beq.n	80032f6 <HAL_UART_IRQHandler+0xae>
 80032de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d005      	beq.n	80032f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ee:	f043 0201 	orr.w	r2, r3, #1
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032fa:	f003 0304 	and.w	r3, r3, #4
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00b      	beq.n	800331a <HAL_UART_IRQHandler+0xd2>
 8003302:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	d005      	beq.n	800331a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003312:	f043 0202 	orr.w	r2, r3, #2
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800331a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00b      	beq.n	800333e <HAL_UART_IRQHandler+0xf6>
 8003326:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b00      	cmp	r3, #0
 8003330:	d005      	beq.n	800333e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003336:	f043 0204 	orr.w	r2, r3, #4
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800333e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003342:	f003 0308 	and.w	r3, r3, #8
 8003346:	2b00      	cmp	r3, #0
 8003348:	d011      	beq.n	800336e <HAL_UART_IRQHandler+0x126>
 800334a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800334e:	f003 0320 	and.w	r3, r3, #32
 8003352:	2b00      	cmp	r3, #0
 8003354:	d105      	bne.n	8003362 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003356:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d005      	beq.n	800336e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003366:	f043 0208 	orr.w	r2, r3, #8
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 81f2 	beq.w	800375c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800337c:	f003 0320 	and.w	r3, r3, #32
 8003380:	2b00      	cmp	r3, #0
 8003382:	d008      	beq.n	8003396 <HAL_UART_IRQHandler+0x14e>
 8003384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003388:	f003 0320 	and.w	r3, r3, #32
 800338c:	2b00      	cmp	r3, #0
 800338e:	d002      	beq.n	8003396 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 fb77 	bl	8003a84 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	bf14      	ite	ne
 80033a4:	2301      	movne	r3, #1
 80033a6:	2300      	moveq	r3, #0
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b2:	f003 0308 	and.w	r3, r3, #8
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d103      	bne.n	80033c2 <HAL_UART_IRQHandler+0x17a>
 80033ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d04f      	beq.n	8003462 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 fa81 	bl	80038ca <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d041      	beq.n	800345a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	3314      	adds	r3, #20
 80033dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80033e4:	e853 3f00 	ldrex	r3, [r3]
 80033e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80033ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80033f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	3314      	adds	r3, #20
 80033fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003402:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003406:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800340e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003412:	e841 2300 	strex	r3, r2, [r1]
 8003416:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800341a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1d9      	bne.n	80033d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003426:	2b00      	cmp	r3, #0
 8003428:	d013      	beq.n	8003452 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800342e:	4a7e      	ldr	r2, [pc, #504]	@ (8003628 <HAL_UART_IRQHandler+0x3e0>)
 8003430:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003436:	4618      	mov	r0, r3
 8003438:	f7fe ff1a 	bl	8002270 <HAL_DMA_Abort_IT>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d016      	beq.n	8003470 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003446:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800344c:	4610      	mov	r0, r2
 800344e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003450:	e00e      	b.n	8003470 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f993 	bl	800377e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003458:	e00a      	b.n	8003470 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 f98f 	bl	800377e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003460:	e006      	b.n	8003470 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 f98b 	bl	800377e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800346e:	e175      	b.n	800375c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003470:	bf00      	nop
    return;
 8003472:	e173      	b.n	800375c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003478:	2b01      	cmp	r3, #1
 800347a:	f040 814f 	bne.w	800371c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800347e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003482:	f003 0310 	and.w	r3, r3, #16
 8003486:	2b00      	cmp	r3, #0
 8003488:	f000 8148 	beq.w	800371c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800348c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003490:	f003 0310 	and.w	r3, r3, #16
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 8141 	beq.w	800371c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800349a:	2300      	movs	r3, #0
 800349c:	60bb      	str	r3, [r7, #8]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	60bb      	str	r3, [r7, #8]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	60bb      	str	r3, [r7, #8]
 80034ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 80b6 	beq.w	800362c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80034cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 8145 	beq.w	8003760 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80034da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80034de:	429a      	cmp	r2, r3
 80034e0:	f080 813e 	bcs.w	8003760 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80034ea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	2b20      	cmp	r3, #32
 80034f4:	f000 8088 	beq.w	8003608 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	330c      	adds	r3, #12
 80034fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003502:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003506:	e853 3f00 	ldrex	r3, [r3]
 800350a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800350e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003512:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003516:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	330c      	adds	r3, #12
 8003520:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003524:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003528:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800352c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003530:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003534:	e841 2300 	strex	r3, r2, [r1]
 8003538:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800353c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1d9      	bne.n	80034f8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	3314      	adds	r3, #20
 800354a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800354c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800354e:	e853 3f00 	ldrex	r3, [r3]
 8003552:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003554:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003556:	f023 0301 	bic.w	r3, r3, #1
 800355a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	3314      	adds	r3, #20
 8003564:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003568:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800356c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003570:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003574:	e841 2300 	strex	r3, r2, [r1]
 8003578:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800357a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1e1      	bne.n	8003544 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	3314      	adds	r3, #20
 8003586:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003588:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800358a:	e853 3f00 	ldrex	r3, [r3]
 800358e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003590:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003592:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003596:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	3314      	adds	r3, #20
 80035a0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80035a4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80035a6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80035aa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80035ac:	e841 2300 	strex	r3, r2, [r1]
 80035b0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80035b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1e3      	bne.n	8003580 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2220      	movs	r2, #32
 80035bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	330c      	adds	r3, #12
 80035cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035d0:	e853 3f00 	ldrex	r3, [r3]
 80035d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80035d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035d8:	f023 0310 	bic.w	r3, r3, #16
 80035dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	330c      	adds	r3, #12
 80035e6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80035ea:	65ba      	str	r2, [r7, #88]	@ 0x58
 80035ec:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80035f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80035f2:	e841 2300 	strex	r3, r2, [r1]
 80035f6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80035f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1e3      	bne.n	80035c6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003602:	4618      	mov	r0, r3
 8003604:	f7fe fdf9 	bl	80021fa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2202      	movs	r2, #2
 800360c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003616:	b29b      	uxth	r3, r3
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	b29b      	uxth	r3, r3
 800361c:	4619      	mov	r1, r3
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f8b6 	bl	8003790 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003624:	e09c      	b.n	8003760 <HAL_UART_IRQHandler+0x518>
 8003626:	bf00      	nop
 8003628:	0800398f 	.word	0x0800398f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003634:	b29b      	uxth	r3, r3
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003640:	b29b      	uxth	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	f000 808e 	beq.w	8003764 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003648:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800364c:	2b00      	cmp	r3, #0
 800364e:	f000 8089 	beq.w	8003764 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	330c      	adds	r3, #12
 8003658:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800365c:	e853 3f00 	ldrex	r3, [r3]
 8003660:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003664:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003668:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	330c      	adds	r3, #12
 8003672:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003676:	647a      	str	r2, [r7, #68]	@ 0x44
 8003678:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800367c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800367e:	e841 2300 	strex	r3, r2, [r1]
 8003682:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003684:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1e3      	bne.n	8003652 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	3314      	adds	r3, #20
 8003690:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003694:	e853 3f00 	ldrex	r3, [r3]
 8003698:	623b      	str	r3, [r7, #32]
   return(result);
 800369a:	6a3b      	ldr	r3, [r7, #32]
 800369c:	f023 0301 	bic.w	r3, r3, #1
 80036a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	3314      	adds	r3, #20
 80036aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80036ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80036b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80036b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036b6:	e841 2300 	strex	r3, r2, [r1]
 80036ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80036bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1e3      	bne.n	800368a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2220      	movs	r2, #32
 80036c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	330c      	adds	r3, #12
 80036d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	e853 3f00 	ldrex	r3, [r3]
 80036de:	60fb      	str	r3, [r7, #12]
   return(result);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f023 0310 	bic.w	r3, r3, #16
 80036e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	330c      	adds	r3, #12
 80036f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80036f4:	61fa      	str	r2, [r7, #28]
 80036f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f8:	69b9      	ldr	r1, [r7, #24]
 80036fa:	69fa      	ldr	r2, [r7, #28]
 80036fc:	e841 2300 	strex	r3, r2, [r1]
 8003700:	617b      	str	r3, [r7, #20]
   return(result);
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1e3      	bne.n	80036d0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2202      	movs	r2, #2
 800370c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800370e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003712:	4619      	mov	r1, r3
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f83b 	bl	8003790 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800371a:	e023      	b.n	8003764 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800371c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003720:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003724:	2b00      	cmp	r3, #0
 8003726:	d009      	beq.n	800373c <HAL_UART_IRQHandler+0x4f4>
 8003728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800372c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003730:	2b00      	cmp	r3, #0
 8003732:	d003      	beq.n	800373c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f93e 	bl	80039b6 <UART_Transmit_IT>
    return;
 800373a:	e014      	b.n	8003766 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800373c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00e      	beq.n	8003766 <HAL_UART_IRQHandler+0x51e>
 8003748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800374c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003750:	2b00      	cmp	r3, #0
 8003752:	d008      	beq.n	8003766 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 f97d 	bl	8003a54 <UART_EndTransmit_IT>
    return;
 800375a:	e004      	b.n	8003766 <HAL_UART_IRQHandler+0x51e>
    return;
 800375c:	bf00      	nop
 800375e:	e002      	b.n	8003766 <HAL_UART_IRQHandler+0x51e>
      return;
 8003760:	bf00      	nop
 8003762:	e000      	b.n	8003766 <HAL_UART_IRQHandler+0x51e>
      return;
 8003764:	bf00      	nop
  }
}
 8003766:	37e8      	adds	r7, #232	@ 0xe8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	bc80      	pop	{r7}
 800377c:	4770      	bx	lr

0800377e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800377e:	b480      	push	{r7}
 8003780:	b083      	sub	sp, #12
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	bc80      	pop	{r7}
 800378e:	4770      	bx	lr

08003790 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	460b      	mov	r3, r1
 800379a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bc80      	pop	{r7}
 80037a4:	4770      	bx	lr

080037a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b086      	sub	sp, #24
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	60f8      	str	r0, [r7, #12]
 80037ae:	60b9      	str	r1, [r7, #8]
 80037b0:	603b      	str	r3, [r7, #0]
 80037b2:	4613      	mov	r3, r2
 80037b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037b6:	e03b      	b.n	8003830 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037b8:	6a3b      	ldr	r3, [r7, #32]
 80037ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037be:	d037      	beq.n	8003830 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037c0:	f7fe f8ba 	bl	8001938 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	6a3a      	ldr	r2, [r7, #32]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d302      	bcc.n	80037d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80037d0:	6a3b      	ldr	r3, [r7, #32]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e03a      	b.n	8003850 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d023      	beq.n	8003830 <UART_WaitOnFlagUntilTimeout+0x8a>
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	2b80      	cmp	r3, #128	@ 0x80
 80037ec:	d020      	beq.n	8003830 <UART_WaitOnFlagUntilTimeout+0x8a>
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	2b40      	cmp	r3, #64	@ 0x40
 80037f2:	d01d      	beq.n	8003830 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0308 	and.w	r3, r3, #8
 80037fe:	2b08      	cmp	r3, #8
 8003800:	d116      	bne.n	8003830 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003802:	2300      	movs	r3, #0
 8003804:	617b      	str	r3, [r7, #20]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	617b      	str	r3, [r7, #20]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	617b      	str	r3, [r7, #20]
 8003816:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f000 f856 	bl	80038ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2208      	movs	r2, #8
 8003822:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e00f      	b.n	8003850 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	4013      	ands	r3, r2
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	429a      	cmp	r2, r3
 800383e:	bf0c      	ite	eq
 8003840:	2301      	moveq	r3, #1
 8003842:	2300      	movne	r3, #0
 8003844:	b2db      	uxtb	r3, r3
 8003846:	461a      	mov	r2, r3
 8003848:	79fb      	ldrb	r3, [r7, #7]
 800384a:	429a      	cmp	r2, r3
 800384c:	d0b4      	beq.n	80037b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3718      	adds	r7, #24
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	4613      	mov	r3, r2
 8003864:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	68ba      	ldr	r2, [r7, #8]
 800386a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	88fa      	ldrh	r2, [r7, #6]
 8003870:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	88fa      	ldrh	r2, [r7, #6]
 8003876:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2222      	movs	r2, #34	@ 0x22
 8003882:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d007      	beq.n	800389e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800389c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	695a      	ldr	r2, [r3, #20]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f042 0201 	orr.w	r2, r2, #1
 80038ac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68da      	ldr	r2, [r3, #12]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f042 0220 	orr.w	r2, r2, #32
 80038bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3714      	adds	r7, #20
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bc80      	pop	{r7}
 80038c8:	4770      	bx	lr

080038ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038ca:	b480      	push	{r7}
 80038cc:	b095      	sub	sp, #84	@ 0x54
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	330c      	adds	r3, #12
 80038d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038dc:	e853 3f00 	ldrex	r3, [r3]
 80038e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80038e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	330c      	adds	r3, #12
 80038f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038f2:	643a      	str	r2, [r7, #64]	@ 0x40
 80038f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80038f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80038fa:	e841 2300 	strex	r3, r2, [r1]
 80038fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1e5      	bne.n	80038d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	3314      	adds	r3, #20
 800390c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800390e:	6a3b      	ldr	r3, [r7, #32]
 8003910:	e853 3f00 	ldrex	r3, [r3]
 8003914:	61fb      	str	r3, [r7, #28]
   return(result);
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	f023 0301 	bic.w	r3, r3, #1
 800391c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	3314      	adds	r3, #20
 8003924:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003926:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003928:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800392c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800392e:	e841 2300 	strex	r3, r2, [r1]
 8003932:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1e5      	bne.n	8003906 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800393e:	2b01      	cmp	r3, #1
 8003940:	d119      	bne.n	8003976 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	330c      	adds	r3, #12
 8003948:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	e853 3f00 	ldrex	r3, [r3]
 8003950:	60bb      	str	r3, [r7, #8]
   return(result);
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	f023 0310 	bic.w	r3, r3, #16
 8003958:	647b      	str	r3, [r7, #68]	@ 0x44
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	330c      	adds	r3, #12
 8003960:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003962:	61ba      	str	r2, [r7, #24]
 8003964:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003966:	6979      	ldr	r1, [r7, #20]
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	e841 2300 	strex	r3, r2, [r1]
 800396e:	613b      	str	r3, [r7, #16]
   return(result);
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1e5      	bne.n	8003942 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2220      	movs	r2, #32
 800397a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003984:	bf00      	nop
 8003986:	3754      	adds	r7, #84	@ 0x54
 8003988:	46bd      	mov	sp, r7
 800398a:	bc80      	pop	{r7}
 800398c:	4770      	bx	lr

0800398e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b084      	sub	sp, #16
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800399a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f7ff fee8 	bl	800377e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039ae:	bf00      	nop
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b085      	sub	sp, #20
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b21      	cmp	r3, #33	@ 0x21
 80039c8:	d13e      	bne.n	8003a48 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039d2:	d114      	bne.n	80039fe <UART_Transmit_IT+0x48>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d110      	bne.n	80039fe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	881b      	ldrh	r3, [r3, #0]
 80039e6:	461a      	mov	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	1c9a      	adds	r2, r3, #2
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	621a      	str	r2, [r3, #32]
 80039fc:	e008      	b.n	8003a10 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	1c59      	adds	r1, r3, #1
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	6211      	str	r1, [r2, #32]
 8003a08:	781a      	ldrb	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	3b01      	subs	r3, #1
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10f      	bne.n	8003a44 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68da      	ldr	r2, [r3, #12]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a32:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68da      	ldr	r2, [r3, #12]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a42:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a44:	2300      	movs	r3, #0
 8003a46:	e000      	b.n	8003a4a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003a48:	2302      	movs	r3, #2
  }
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3714      	adds	r7, #20
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bc80      	pop	{r7}
 8003a52:	4770      	bx	lr

08003a54 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68da      	ldr	r2, [r3, #12]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a6a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2220      	movs	r2, #32
 8003a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f7ff fe79 	bl	800376c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3708      	adds	r7, #8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b08c      	sub	sp, #48	@ 0x30
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b22      	cmp	r3, #34	@ 0x22
 8003a96:	f040 80ae 	bne.w	8003bf6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aa2:	d117      	bne.n	8003ad4 <UART_Receive_IT+0x50>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d113      	bne.n	8003ad4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003aac:	2300      	movs	r3, #0
 8003aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ac6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003acc:	1c9a      	adds	r2, r3, #2
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ad2:	e026      	b.n	8003b22 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003ada:	2300      	movs	r3, #0
 8003adc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ae6:	d007      	beq.n	8003af8 <UART_Receive_IT+0x74>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10a      	bne.n	8003b06 <UART_Receive_IT+0x82>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d106      	bne.n	8003b06 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	b2da      	uxtb	r2, r3
 8003b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b02:	701a      	strb	r2, [r3, #0]
 8003b04:	e008      	b.n	8003b18 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b12:	b2da      	uxtb	r2, r3
 8003b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b16:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b1c:	1c5a      	adds	r2, r3, #1
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	4619      	mov	r1, r3
 8003b30:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d15d      	bne.n	8003bf2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68da      	ldr	r2, [r3, #12]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 0220 	bic.w	r2, r2, #32
 8003b44:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68da      	ldr	r2, [r3, #12]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b54:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	695a      	ldr	r2, [r3, #20]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 0201 	bic.w	r2, r2, #1
 8003b64:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d135      	bne.n	8003be8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	330c      	adds	r3, #12
 8003b88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	e853 3f00 	ldrex	r3, [r3]
 8003b90:	613b      	str	r3, [r7, #16]
   return(result);
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	f023 0310 	bic.w	r3, r3, #16
 8003b98:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	330c      	adds	r3, #12
 8003ba0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ba2:	623a      	str	r2, [r7, #32]
 8003ba4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba6:	69f9      	ldr	r1, [r7, #28]
 8003ba8:	6a3a      	ldr	r2, [r7, #32]
 8003baa:	e841 2300 	strex	r3, r2, [r1]
 8003bae:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1e5      	bne.n	8003b82 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0310 	and.w	r3, r3, #16
 8003bc0:	2b10      	cmp	r3, #16
 8003bc2:	d10a      	bne.n	8003bda <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	60fb      	str	r3, [r7, #12]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	60fb      	str	r3, [r7, #12]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	60fb      	str	r3, [r7, #12]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003bde:	4619      	mov	r1, r3
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f7ff fdd5 	bl	8003790 <HAL_UARTEx_RxEventCallback>
 8003be6:	e002      	b.n	8003bee <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f7fd fbc1 	bl	8001370 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	e002      	b.n	8003bf8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	e000      	b.n	8003bf8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003bf6:	2302      	movs	r3, #2
  }
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3730      	adds	r7, #48	@ 0x30
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68da      	ldr	r2, [r3, #12]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689a      	ldr	r2, [r3, #8]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	431a      	orrs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003c3a:	f023 030c 	bic.w	r3, r3, #12
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	6812      	ldr	r2, [r2, #0]
 8003c42:	68b9      	ldr	r1, [r7, #8]
 8003c44:	430b      	orrs	r3, r1
 8003c46:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	699a      	ldr	r2, [r3, #24]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a2c      	ldr	r2, [pc, #176]	@ (8003d14 <UART_SetConfig+0x114>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d103      	bne.n	8003c70 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c68:	f7ff f906 	bl	8002e78 <HAL_RCC_GetPCLK2Freq>
 8003c6c:	60f8      	str	r0, [r7, #12]
 8003c6e:	e002      	b.n	8003c76 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c70:	f7ff f8ee 	bl	8002e50 <HAL_RCC_GetPCLK1Freq>
 8003c74:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	4413      	add	r3, r2
 8003c7e:	009a      	lsls	r2, r3, #2
 8003c80:	441a      	add	r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c8c:	4a22      	ldr	r2, [pc, #136]	@ (8003d18 <UART_SetConfig+0x118>)
 8003c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c92:	095b      	lsrs	r3, r3, #5
 8003c94:	0119      	lsls	r1, r3, #4
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	4413      	add	r3, r2
 8003c9e:	009a      	lsls	r2, r3, #2
 8003ca0:	441a      	add	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cac:	4b1a      	ldr	r3, [pc, #104]	@ (8003d18 <UART_SetConfig+0x118>)
 8003cae:	fba3 0302 	umull	r0, r3, r3, r2
 8003cb2:	095b      	lsrs	r3, r3, #5
 8003cb4:	2064      	movs	r0, #100	@ 0x64
 8003cb6:	fb00 f303 	mul.w	r3, r0, r3
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	011b      	lsls	r3, r3, #4
 8003cbe:	3332      	adds	r3, #50	@ 0x32
 8003cc0:	4a15      	ldr	r2, [pc, #84]	@ (8003d18 <UART_SetConfig+0x118>)
 8003cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc6:	095b      	lsrs	r3, r3, #5
 8003cc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ccc:	4419      	add	r1, r3
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	4413      	add	r3, r2
 8003cd6:	009a      	lsls	r2, r3, #2
 8003cd8:	441a      	add	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8003d18 <UART_SetConfig+0x118>)
 8003ce6:	fba3 0302 	umull	r0, r3, r3, r2
 8003cea:	095b      	lsrs	r3, r3, #5
 8003cec:	2064      	movs	r0, #100	@ 0x64
 8003cee:	fb00 f303 	mul.w	r3, r0, r3
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	011b      	lsls	r3, r3, #4
 8003cf6:	3332      	adds	r3, #50	@ 0x32
 8003cf8:	4a07      	ldr	r2, [pc, #28]	@ (8003d18 <UART_SetConfig+0x118>)
 8003cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfe:	095b      	lsrs	r3, r3, #5
 8003d00:	f003 020f 	and.w	r2, r3, #15
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	440a      	add	r2, r1
 8003d0a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003d0c:	bf00      	nop
 8003d0e:	3710      	adds	r7, #16
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	40013800 	.word	0x40013800
 8003d18:	51eb851f 	.word	0x51eb851f

08003d1c <__cvt>:
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d22:	461d      	mov	r5, r3
 8003d24:	bfbb      	ittet	lt
 8003d26:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003d2a:	461d      	movlt	r5, r3
 8003d2c:	2300      	movge	r3, #0
 8003d2e:	232d      	movlt	r3, #45	@ 0x2d
 8003d30:	b088      	sub	sp, #32
 8003d32:	4614      	mov	r4, r2
 8003d34:	bfb8      	it	lt
 8003d36:	4614      	movlt	r4, r2
 8003d38:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003d3a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003d3c:	7013      	strb	r3, [r2, #0]
 8003d3e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003d40:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003d44:	f023 0820 	bic.w	r8, r3, #32
 8003d48:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003d4c:	d005      	beq.n	8003d5a <__cvt+0x3e>
 8003d4e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003d52:	d100      	bne.n	8003d56 <__cvt+0x3a>
 8003d54:	3601      	adds	r6, #1
 8003d56:	2302      	movs	r3, #2
 8003d58:	e000      	b.n	8003d5c <__cvt+0x40>
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	aa07      	add	r2, sp, #28
 8003d5e:	9204      	str	r2, [sp, #16]
 8003d60:	aa06      	add	r2, sp, #24
 8003d62:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003d66:	e9cd 3600 	strd	r3, r6, [sp]
 8003d6a:	4622      	mov	r2, r4
 8003d6c:	462b      	mov	r3, r5
 8003d6e:	f000 fe6f 	bl	8004a50 <_dtoa_r>
 8003d72:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003d76:	4607      	mov	r7, r0
 8003d78:	d119      	bne.n	8003dae <__cvt+0x92>
 8003d7a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003d7c:	07db      	lsls	r3, r3, #31
 8003d7e:	d50e      	bpl.n	8003d9e <__cvt+0x82>
 8003d80:	eb00 0906 	add.w	r9, r0, r6
 8003d84:	2200      	movs	r2, #0
 8003d86:	2300      	movs	r3, #0
 8003d88:	4620      	mov	r0, r4
 8003d8a:	4629      	mov	r1, r5
 8003d8c:	f7fc fe16 	bl	80009bc <__aeabi_dcmpeq>
 8003d90:	b108      	cbz	r0, 8003d96 <__cvt+0x7a>
 8003d92:	f8cd 901c 	str.w	r9, [sp, #28]
 8003d96:	2230      	movs	r2, #48	@ 0x30
 8003d98:	9b07      	ldr	r3, [sp, #28]
 8003d9a:	454b      	cmp	r3, r9
 8003d9c:	d31e      	bcc.n	8003ddc <__cvt+0xc0>
 8003d9e:	4638      	mov	r0, r7
 8003da0:	9b07      	ldr	r3, [sp, #28]
 8003da2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003da4:	1bdb      	subs	r3, r3, r7
 8003da6:	6013      	str	r3, [r2, #0]
 8003da8:	b008      	add	sp, #32
 8003daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dae:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003db2:	eb00 0906 	add.w	r9, r0, r6
 8003db6:	d1e5      	bne.n	8003d84 <__cvt+0x68>
 8003db8:	7803      	ldrb	r3, [r0, #0]
 8003dba:	2b30      	cmp	r3, #48	@ 0x30
 8003dbc:	d10a      	bne.n	8003dd4 <__cvt+0xb8>
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	4620      	mov	r0, r4
 8003dc4:	4629      	mov	r1, r5
 8003dc6:	f7fc fdf9 	bl	80009bc <__aeabi_dcmpeq>
 8003dca:	b918      	cbnz	r0, 8003dd4 <__cvt+0xb8>
 8003dcc:	f1c6 0601 	rsb	r6, r6, #1
 8003dd0:	f8ca 6000 	str.w	r6, [sl]
 8003dd4:	f8da 3000 	ldr.w	r3, [sl]
 8003dd8:	4499      	add	r9, r3
 8003dda:	e7d3      	b.n	8003d84 <__cvt+0x68>
 8003ddc:	1c59      	adds	r1, r3, #1
 8003dde:	9107      	str	r1, [sp, #28]
 8003de0:	701a      	strb	r2, [r3, #0]
 8003de2:	e7d9      	b.n	8003d98 <__cvt+0x7c>

08003de4 <__exponent>:
 8003de4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003de6:	2900      	cmp	r1, #0
 8003de8:	bfb6      	itet	lt
 8003dea:	232d      	movlt	r3, #45	@ 0x2d
 8003dec:	232b      	movge	r3, #43	@ 0x2b
 8003dee:	4249      	neglt	r1, r1
 8003df0:	2909      	cmp	r1, #9
 8003df2:	7002      	strb	r2, [r0, #0]
 8003df4:	7043      	strb	r3, [r0, #1]
 8003df6:	dd29      	ble.n	8003e4c <__exponent+0x68>
 8003df8:	f10d 0307 	add.w	r3, sp, #7
 8003dfc:	461d      	mov	r5, r3
 8003dfe:	270a      	movs	r7, #10
 8003e00:	fbb1 f6f7 	udiv	r6, r1, r7
 8003e04:	461a      	mov	r2, r3
 8003e06:	fb07 1416 	mls	r4, r7, r6, r1
 8003e0a:	3430      	adds	r4, #48	@ 0x30
 8003e0c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003e10:	460c      	mov	r4, r1
 8003e12:	2c63      	cmp	r4, #99	@ 0x63
 8003e14:	4631      	mov	r1, r6
 8003e16:	f103 33ff 	add.w	r3, r3, #4294967295
 8003e1a:	dcf1      	bgt.n	8003e00 <__exponent+0x1c>
 8003e1c:	3130      	adds	r1, #48	@ 0x30
 8003e1e:	1e94      	subs	r4, r2, #2
 8003e20:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003e24:	4623      	mov	r3, r4
 8003e26:	1c41      	adds	r1, r0, #1
 8003e28:	42ab      	cmp	r3, r5
 8003e2a:	d30a      	bcc.n	8003e42 <__exponent+0x5e>
 8003e2c:	f10d 0309 	add.w	r3, sp, #9
 8003e30:	1a9b      	subs	r3, r3, r2
 8003e32:	42ac      	cmp	r4, r5
 8003e34:	bf88      	it	hi
 8003e36:	2300      	movhi	r3, #0
 8003e38:	3302      	adds	r3, #2
 8003e3a:	4403      	add	r3, r0
 8003e3c:	1a18      	subs	r0, r3, r0
 8003e3e:	b003      	add	sp, #12
 8003e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e42:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003e46:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003e4a:	e7ed      	b.n	8003e28 <__exponent+0x44>
 8003e4c:	2330      	movs	r3, #48	@ 0x30
 8003e4e:	3130      	adds	r1, #48	@ 0x30
 8003e50:	7083      	strb	r3, [r0, #2]
 8003e52:	70c1      	strb	r1, [r0, #3]
 8003e54:	1d03      	adds	r3, r0, #4
 8003e56:	e7f1      	b.n	8003e3c <__exponent+0x58>

08003e58 <_printf_float>:
 8003e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e5c:	b091      	sub	sp, #68	@ 0x44
 8003e5e:	460c      	mov	r4, r1
 8003e60:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003e64:	4616      	mov	r6, r2
 8003e66:	461f      	mov	r7, r3
 8003e68:	4605      	mov	r5, r0
 8003e6a:	f000 fce1 	bl	8004830 <_localeconv_r>
 8003e6e:	6803      	ldr	r3, [r0, #0]
 8003e70:	4618      	mov	r0, r3
 8003e72:	9308      	str	r3, [sp, #32]
 8003e74:	f7fc f976 	bl	8000164 <strlen>
 8003e78:	2300      	movs	r3, #0
 8003e7a:	930e      	str	r3, [sp, #56]	@ 0x38
 8003e7c:	f8d8 3000 	ldr.w	r3, [r8]
 8003e80:	9009      	str	r0, [sp, #36]	@ 0x24
 8003e82:	3307      	adds	r3, #7
 8003e84:	f023 0307 	bic.w	r3, r3, #7
 8003e88:	f103 0208 	add.w	r2, r3, #8
 8003e8c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003e90:	f8d4 b000 	ldr.w	fp, [r4]
 8003e94:	f8c8 2000 	str.w	r2, [r8]
 8003e98:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003e9c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003ea0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003ea2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8003eaa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003eae:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003eb2:	4b9c      	ldr	r3, [pc, #624]	@ (8004124 <_printf_float+0x2cc>)
 8003eb4:	f7fc fdb4 	bl	8000a20 <__aeabi_dcmpun>
 8003eb8:	bb70      	cbnz	r0, 8003f18 <_printf_float+0xc0>
 8003eba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8003ec2:	4b98      	ldr	r3, [pc, #608]	@ (8004124 <_printf_float+0x2cc>)
 8003ec4:	f7fc fd8e 	bl	80009e4 <__aeabi_dcmple>
 8003ec8:	bb30      	cbnz	r0, 8003f18 <_printf_float+0xc0>
 8003eca:	2200      	movs	r2, #0
 8003ecc:	2300      	movs	r3, #0
 8003ece:	4640      	mov	r0, r8
 8003ed0:	4649      	mov	r1, r9
 8003ed2:	f7fc fd7d 	bl	80009d0 <__aeabi_dcmplt>
 8003ed6:	b110      	cbz	r0, 8003ede <_printf_float+0x86>
 8003ed8:	232d      	movs	r3, #45	@ 0x2d
 8003eda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ede:	4a92      	ldr	r2, [pc, #584]	@ (8004128 <_printf_float+0x2d0>)
 8003ee0:	4b92      	ldr	r3, [pc, #584]	@ (800412c <_printf_float+0x2d4>)
 8003ee2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003ee6:	bf94      	ite	ls
 8003ee8:	4690      	movls	r8, r2
 8003eea:	4698      	movhi	r8, r3
 8003eec:	2303      	movs	r3, #3
 8003eee:	f04f 0900 	mov.w	r9, #0
 8003ef2:	6123      	str	r3, [r4, #16]
 8003ef4:	f02b 0304 	bic.w	r3, fp, #4
 8003ef8:	6023      	str	r3, [r4, #0]
 8003efa:	4633      	mov	r3, r6
 8003efc:	4621      	mov	r1, r4
 8003efe:	4628      	mov	r0, r5
 8003f00:	9700      	str	r7, [sp, #0]
 8003f02:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003f04:	f000 f9d4 	bl	80042b0 <_printf_common>
 8003f08:	3001      	adds	r0, #1
 8003f0a:	f040 8090 	bne.w	800402e <_printf_float+0x1d6>
 8003f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8003f12:	b011      	add	sp, #68	@ 0x44
 8003f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f18:	4642      	mov	r2, r8
 8003f1a:	464b      	mov	r3, r9
 8003f1c:	4640      	mov	r0, r8
 8003f1e:	4649      	mov	r1, r9
 8003f20:	f7fc fd7e 	bl	8000a20 <__aeabi_dcmpun>
 8003f24:	b148      	cbz	r0, 8003f3a <_printf_float+0xe2>
 8003f26:	464b      	mov	r3, r9
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	bfb8      	it	lt
 8003f2c:	232d      	movlt	r3, #45	@ 0x2d
 8003f2e:	4a80      	ldr	r2, [pc, #512]	@ (8004130 <_printf_float+0x2d8>)
 8003f30:	bfb8      	it	lt
 8003f32:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003f36:	4b7f      	ldr	r3, [pc, #508]	@ (8004134 <_printf_float+0x2dc>)
 8003f38:	e7d3      	b.n	8003ee2 <_printf_float+0x8a>
 8003f3a:	6863      	ldr	r3, [r4, #4]
 8003f3c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003f40:	1c5a      	adds	r2, r3, #1
 8003f42:	d13f      	bne.n	8003fc4 <_printf_float+0x16c>
 8003f44:	2306      	movs	r3, #6
 8003f46:	6063      	str	r3, [r4, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003f4e:	6023      	str	r3, [r4, #0]
 8003f50:	9206      	str	r2, [sp, #24]
 8003f52:	aa0e      	add	r2, sp, #56	@ 0x38
 8003f54:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003f58:	aa0d      	add	r2, sp, #52	@ 0x34
 8003f5a:	9203      	str	r2, [sp, #12]
 8003f5c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003f60:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003f64:	6863      	ldr	r3, [r4, #4]
 8003f66:	4642      	mov	r2, r8
 8003f68:	9300      	str	r3, [sp, #0]
 8003f6a:	4628      	mov	r0, r5
 8003f6c:	464b      	mov	r3, r9
 8003f6e:	910a      	str	r1, [sp, #40]	@ 0x28
 8003f70:	f7ff fed4 	bl	8003d1c <__cvt>
 8003f74:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003f76:	4680      	mov	r8, r0
 8003f78:	2947      	cmp	r1, #71	@ 0x47
 8003f7a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003f7c:	d128      	bne.n	8003fd0 <_printf_float+0x178>
 8003f7e:	1cc8      	adds	r0, r1, #3
 8003f80:	db02      	blt.n	8003f88 <_printf_float+0x130>
 8003f82:	6863      	ldr	r3, [r4, #4]
 8003f84:	4299      	cmp	r1, r3
 8003f86:	dd40      	ble.n	800400a <_printf_float+0x1b2>
 8003f88:	f1aa 0a02 	sub.w	sl, sl, #2
 8003f8c:	fa5f fa8a 	uxtb.w	sl, sl
 8003f90:	4652      	mov	r2, sl
 8003f92:	3901      	subs	r1, #1
 8003f94:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003f98:	910d      	str	r1, [sp, #52]	@ 0x34
 8003f9a:	f7ff ff23 	bl	8003de4 <__exponent>
 8003f9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003fa0:	4681      	mov	r9, r0
 8003fa2:	1813      	adds	r3, r2, r0
 8003fa4:	2a01      	cmp	r2, #1
 8003fa6:	6123      	str	r3, [r4, #16]
 8003fa8:	dc02      	bgt.n	8003fb0 <_printf_float+0x158>
 8003faa:	6822      	ldr	r2, [r4, #0]
 8003fac:	07d2      	lsls	r2, r2, #31
 8003fae:	d501      	bpl.n	8003fb4 <_printf_float+0x15c>
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	6123      	str	r3, [r4, #16]
 8003fb4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d09e      	beq.n	8003efa <_printf_float+0xa2>
 8003fbc:	232d      	movs	r3, #45	@ 0x2d
 8003fbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003fc2:	e79a      	b.n	8003efa <_printf_float+0xa2>
 8003fc4:	2947      	cmp	r1, #71	@ 0x47
 8003fc6:	d1bf      	bne.n	8003f48 <_printf_float+0xf0>
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1bd      	bne.n	8003f48 <_printf_float+0xf0>
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e7ba      	b.n	8003f46 <_printf_float+0xee>
 8003fd0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003fd4:	d9dc      	bls.n	8003f90 <_printf_float+0x138>
 8003fd6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003fda:	d118      	bne.n	800400e <_printf_float+0x1b6>
 8003fdc:	2900      	cmp	r1, #0
 8003fde:	6863      	ldr	r3, [r4, #4]
 8003fe0:	dd0b      	ble.n	8003ffa <_printf_float+0x1a2>
 8003fe2:	6121      	str	r1, [r4, #16]
 8003fe4:	b913      	cbnz	r3, 8003fec <_printf_float+0x194>
 8003fe6:	6822      	ldr	r2, [r4, #0]
 8003fe8:	07d0      	lsls	r0, r2, #31
 8003fea:	d502      	bpl.n	8003ff2 <_printf_float+0x19a>
 8003fec:	3301      	adds	r3, #1
 8003fee:	440b      	add	r3, r1
 8003ff0:	6123      	str	r3, [r4, #16]
 8003ff2:	f04f 0900 	mov.w	r9, #0
 8003ff6:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003ff8:	e7dc      	b.n	8003fb4 <_printf_float+0x15c>
 8003ffa:	b913      	cbnz	r3, 8004002 <_printf_float+0x1aa>
 8003ffc:	6822      	ldr	r2, [r4, #0]
 8003ffe:	07d2      	lsls	r2, r2, #31
 8004000:	d501      	bpl.n	8004006 <_printf_float+0x1ae>
 8004002:	3302      	adds	r3, #2
 8004004:	e7f4      	b.n	8003ff0 <_printf_float+0x198>
 8004006:	2301      	movs	r3, #1
 8004008:	e7f2      	b.n	8003ff0 <_printf_float+0x198>
 800400a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800400e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004010:	4299      	cmp	r1, r3
 8004012:	db05      	blt.n	8004020 <_printf_float+0x1c8>
 8004014:	6823      	ldr	r3, [r4, #0]
 8004016:	6121      	str	r1, [r4, #16]
 8004018:	07d8      	lsls	r0, r3, #31
 800401a:	d5ea      	bpl.n	8003ff2 <_printf_float+0x19a>
 800401c:	1c4b      	adds	r3, r1, #1
 800401e:	e7e7      	b.n	8003ff0 <_printf_float+0x198>
 8004020:	2900      	cmp	r1, #0
 8004022:	bfcc      	ite	gt
 8004024:	2201      	movgt	r2, #1
 8004026:	f1c1 0202 	rsble	r2, r1, #2
 800402a:	4413      	add	r3, r2
 800402c:	e7e0      	b.n	8003ff0 <_printf_float+0x198>
 800402e:	6823      	ldr	r3, [r4, #0]
 8004030:	055a      	lsls	r2, r3, #21
 8004032:	d407      	bmi.n	8004044 <_printf_float+0x1ec>
 8004034:	6923      	ldr	r3, [r4, #16]
 8004036:	4642      	mov	r2, r8
 8004038:	4631      	mov	r1, r6
 800403a:	4628      	mov	r0, r5
 800403c:	47b8      	blx	r7
 800403e:	3001      	adds	r0, #1
 8004040:	d12b      	bne.n	800409a <_printf_float+0x242>
 8004042:	e764      	b.n	8003f0e <_printf_float+0xb6>
 8004044:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004048:	f240 80dc 	bls.w	8004204 <_printf_float+0x3ac>
 800404c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004050:	2200      	movs	r2, #0
 8004052:	2300      	movs	r3, #0
 8004054:	f7fc fcb2 	bl	80009bc <__aeabi_dcmpeq>
 8004058:	2800      	cmp	r0, #0
 800405a:	d033      	beq.n	80040c4 <_printf_float+0x26c>
 800405c:	2301      	movs	r3, #1
 800405e:	4631      	mov	r1, r6
 8004060:	4628      	mov	r0, r5
 8004062:	4a35      	ldr	r2, [pc, #212]	@ (8004138 <_printf_float+0x2e0>)
 8004064:	47b8      	blx	r7
 8004066:	3001      	adds	r0, #1
 8004068:	f43f af51 	beq.w	8003f0e <_printf_float+0xb6>
 800406c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004070:	4543      	cmp	r3, r8
 8004072:	db02      	blt.n	800407a <_printf_float+0x222>
 8004074:	6823      	ldr	r3, [r4, #0]
 8004076:	07d8      	lsls	r0, r3, #31
 8004078:	d50f      	bpl.n	800409a <_printf_float+0x242>
 800407a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800407e:	4631      	mov	r1, r6
 8004080:	4628      	mov	r0, r5
 8004082:	47b8      	blx	r7
 8004084:	3001      	adds	r0, #1
 8004086:	f43f af42 	beq.w	8003f0e <_printf_float+0xb6>
 800408a:	f04f 0900 	mov.w	r9, #0
 800408e:	f108 38ff 	add.w	r8, r8, #4294967295
 8004092:	f104 0a1a 	add.w	sl, r4, #26
 8004096:	45c8      	cmp	r8, r9
 8004098:	dc09      	bgt.n	80040ae <_printf_float+0x256>
 800409a:	6823      	ldr	r3, [r4, #0]
 800409c:	079b      	lsls	r3, r3, #30
 800409e:	f100 8102 	bmi.w	80042a6 <_printf_float+0x44e>
 80040a2:	68e0      	ldr	r0, [r4, #12]
 80040a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80040a6:	4298      	cmp	r0, r3
 80040a8:	bfb8      	it	lt
 80040aa:	4618      	movlt	r0, r3
 80040ac:	e731      	b.n	8003f12 <_printf_float+0xba>
 80040ae:	2301      	movs	r3, #1
 80040b0:	4652      	mov	r2, sl
 80040b2:	4631      	mov	r1, r6
 80040b4:	4628      	mov	r0, r5
 80040b6:	47b8      	blx	r7
 80040b8:	3001      	adds	r0, #1
 80040ba:	f43f af28 	beq.w	8003f0e <_printf_float+0xb6>
 80040be:	f109 0901 	add.w	r9, r9, #1
 80040c2:	e7e8      	b.n	8004096 <_printf_float+0x23e>
 80040c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	dc38      	bgt.n	800413c <_printf_float+0x2e4>
 80040ca:	2301      	movs	r3, #1
 80040cc:	4631      	mov	r1, r6
 80040ce:	4628      	mov	r0, r5
 80040d0:	4a19      	ldr	r2, [pc, #100]	@ (8004138 <_printf_float+0x2e0>)
 80040d2:	47b8      	blx	r7
 80040d4:	3001      	adds	r0, #1
 80040d6:	f43f af1a 	beq.w	8003f0e <_printf_float+0xb6>
 80040da:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80040de:	ea59 0303 	orrs.w	r3, r9, r3
 80040e2:	d102      	bne.n	80040ea <_printf_float+0x292>
 80040e4:	6823      	ldr	r3, [r4, #0]
 80040e6:	07d9      	lsls	r1, r3, #31
 80040e8:	d5d7      	bpl.n	800409a <_printf_float+0x242>
 80040ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80040ee:	4631      	mov	r1, r6
 80040f0:	4628      	mov	r0, r5
 80040f2:	47b8      	blx	r7
 80040f4:	3001      	adds	r0, #1
 80040f6:	f43f af0a 	beq.w	8003f0e <_printf_float+0xb6>
 80040fa:	f04f 0a00 	mov.w	sl, #0
 80040fe:	f104 0b1a 	add.w	fp, r4, #26
 8004102:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004104:	425b      	negs	r3, r3
 8004106:	4553      	cmp	r3, sl
 8004108:	dc01      	bgt.n	800410e <_printf_float+0x2b6>
 800410a:	464b      	mov	r3, r9
 800410c:	e793      	b.n	8004036 <_printf_float+0x1de>
 800410e:	2301      	movs	r3, #1
 8004110:	465a      	mov	r2, fp
 8004112:	4631      	mov	r1, r6
 8004114:	4628      	mov	r0, r5
 8004116:	47b8      	blx	r7
 8004118:	3001      	adds	r0, #1
 800411a:	f43f aef8 	beq.w	8003f0e <_printf_float+0xb6>
 800411e:	f10a 0a01 	add.w	sl, sl, #1
 8004122:	e7ee      	b.n	8004102 <_printf_float+0x2aa>
 8004124:	7fefffff 	.word	0x7fefffff
 8004128:	08006a5a 	.word	0x08006a5a
 800412c:	08006a5e 	.word	0x08006a5e
 8004130:	08006a62 	.word	0x08006a62
 8004134:	08006a66 	.word	0x08006a66
 8004138:	08006a6a 	.word	0x08006a6a
 800413c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800413e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004142:	4553      	cmp	r3, sl
 8004144:	bfa8      	it	ge
 8004146:	4653      	movge	r3, sl
 8004148:	2b00      	cmp	r3, #0
 800414a:	4699      	mov	r9, r3
 800414c:	dc36      	bgt.n	80041bc <_printf_float+0x364>
 800414e:	f04f 0b00 	mov.w	fp, #0
 8004152:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004156:	f104 021a 	add.w	r2, r4, #26
 800415a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800415c:	930a      	str	r3, [sp, #40]	@ 0x28
 800415e:	eba3 0309 	sub.w	r3, r3, r9
 8004162:	455b      	cmp	r3, fp
 8004164:	dc31      	bgt.n	80041ca <_printf_float+0x372>
 8004166:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004168:	459a      	cmp	sl, r3
 800416a:	dc3a      	bgt.n	80041e2 <_printf_float+0x38a>
 800416c:	6823      	ldr	r3, [r4, #0]
 800416e:	07da      	lsls	r2, r3, #31
 8004170:	d437      	bmi.n	80041e2 <_printf_float+0x38a>
 8004172:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004174:	ebaa 0903 	sub.w	r9, sl, r3
 8004178:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800417a:	ebaa 0303 	sub.w	r3, sl, r3
 800417e:	4599      	cmp	r9, r3
 8004180:	bfa8      	it	ge
 8004182:	4699      	movge	r9, r3
 8004184:	f1b9 0f00 	cmp.w	r9, #0
 8004188:	dc33      	bgt.n	80041f2 <_printf_float+0x39a>
 800418a:	f04f 0800 	mov.w	r8, #0
 800418e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004192:	f104 0b1a 	add.w	fp, r4, #26
 8004196:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004198:	ebaa 0303 	sub.w	r3, sl, r3
 800419c:	eba3 0309 	sub.w	r3, r3, r9
 80041a0:	4543      	cmp	r3, r8
 80041a2:	f77f af7a 	ble.w	800409a <_printf_float+0x242>
 80041a6:	2301      	movs	r3, #1
 80041a8:	465a      	mov	r2, fp
 80041aa:	4631      	mov	r1, r6
 80041ac:	4628      	mov	r0, r5
 80041ae:	47b8      	blx	r7
 80041b0:	3001      	adds	r0, #1
 80041b2:	f43f aeac 	beq.w	8003f0e <_printf_float+0xb6>
 80041b6:	f108 0801 	add.w	r8, r8, #1
 80041ba:	e7ec      	b.n	8004196 <_printf_float+0x33e>
 80041bc:	4642      	mov	r2, r8
 80041be:	4631      	mov	r1, r6
 80041c0:	4628      	mov	r0, r5
 80041c2:	47b8      	blx	r7
 80041c4:	3001      	adds	r0, #1
 80041c6:	d1c2      	bne.n	800414e <_printf_float+0x2f6>
 80041c8:	e6a1      	b.n	8003f0e <_printf_float+0xb6>
 80041ca:	2301      	movs	r3, #1
 80041cc:	4631      	mov	r1, r6
 80041ce:	4628      	mov	r0, r5
 80041d0:	920a      	str	r2, [sp, #40]	@ 0x28
 80041d2:	47b8      	blx	r7
 80041d4:	3001      	adds	r0, #1
 80041d6:	f43f ae9a 	beq.w	8003f0e <_printf_float+0xb6>
 80041da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80041dc:	f10b 0b01 	add.w	fp, fp, #1
 80041e0:	e7bb      	b.n	800415a <_printf_float+0x302>
 80041e2:	4631      	mov	r1, r6
 80041e4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80041e8:	4628      	mov	r0, r5
 80041ea:	47b8      	blx	r7
 80041ec:	3001      	adds	r0, #1
 80041ee:	d1c0      	bne.n	8004172 <_printf_float+0x31a>
 80041f0:	e68d      	b.n	8003f0e <_printf_float+0xb6>
 80041f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80041f4:	464b      	mov	r3, r9
 80041f6:	4631      	mov	r1, r6
 80041f8:	4628      	mov	r0, r5
 80041fa:	4442      	add	r2, r8
 80041fc:	47b8      	blx	r7
 80041fe:	3001      	adds	r0, #1
 8004200:	d1c3      	bne.n	800418a <_printf_float+0x332>
 8004202:	e684      	b.n	8003f0e <_printf_float+0xb6>
 8004204:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004208:	f1ba 0f01 	cmp.w	sl, #1
 800420c:	dc01      	bgt.n	8004212 <_printf_float+0x3ba>
 800420e:	07db      	lsls	r3, r3, #31
 8004210:	d536      	bpl.n	8004280 <_printf_float+0x428>
 8004212:	2301      	movs	r3, #1
 8004214:	4642      	mov	r2, r8
 8004216:	4631      	mov	r1, r6
 8004218:	4628      	mov	r0, r5
 800421a:	47b8      	blx	r7
 800421c:	3001      	adds	r0, #1
 800421e:	f43f ae76 	beq.w	8003f0e <_printf_float+0xb6>
 8004222:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004226:	4631      	mov	r1, r6
 8004228:	4628      	mov	r0, r5
 800422a:	47b8      	blx	r7
 800422c:	3001      	adds	r0, #1
 800422e:	f43f ae6e 	beq.w	8003f0e <_printf_float+0xb6>
 8004232:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004236:	2200      	movs	r2, #0
 8004238:	2300      	movs	r3, #0
 800423a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800423e:	f7fc fbbd 	bl	80009bc <__aeabi_dcmpeq>
 8004242:	b9c0      	cbnz	r0, 8004276 <_printf_float+0x41e>
 8004244:	4653      	mov	r3, sl
 8004246:	f108 0201 	add.w	r2, r8, #1
 800424a:	4631      	mov	r1, r6
 800424c:	4628      	mov	r0, r5
 800424e:	47b8      	blx	r7
 8004250:	3001      	adds	r0, #1
 8004252:	d10c      	bne.n	800426e <_printf_float+0x416>
 8004254:	e65b      	b.n	8003f0e <_printf_float+0xb6>
 8004256:	2301      	movs	r3, #1
 8004258:	465a      	mov	r2, fp
 800425a:	4631      	mov	r1, r6
 800425c:	4628      	mov	r0, r5
 800425e:	47b8      	blx	r7
 8004260:	3001      	adds	r0, #1
 8004262:	f43f ae54 	beq.w	8003f0e <_printf_float+0xb6>
 8004266:	f108 0801 	add.w	r8, r8, #1
 800426a:	45d0      	cmp	r8, sl
 800426c:	dbf3      	blt.n	8004256 <_printf_float+0x3fe>
 800426e:	464b      	mov	r3, r9
 8004270:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004274:	e6e0      	b.n	8004038 <_printf_float+0x1e0>
 8004276:	f04f 0800 	mov.w	r8, #0
 800427a:	f104 0b1a 	add.w	fp, r4, #26
 800427e:	e7f4      	b.n	800426a <_printf_float+0x412>
 8004280:	2301      	movs	r3, #1
 8004282:	4642      	mov	r2, r8
 8004284:	e7e1      	b.n	800424a <_printf_float+0x3f2>
 8004286:	2301      	movs	r3, #1
 8004288:	464a      	mov	r2, r9
 800428a:	4631      	mov	r1, r6
 800428c:	4628      	mov	r0, r5
 800428e:	47b8      	blx	r7
 8004290:	3001      	adds	r0, #1
 8004292:	f43f ae3c 	beq.w	8003f0e <_printf_float+0xb6>
 8004296:	f108 0801 	add.w	r8, r8, #1
 800429a:	68e3      	ldr	r3, [r4, #12]
 800429c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800429e:	1a5b      	subs	r3, r3, r1
 80042a0:	4543      	cmp	r3, r8
 80042a2:	dcf0      	bgt.n	8004286 <_printf_float+0x42e>
 80042a4:	e6fd      	b.n	80040a2 <_printf_float+0x24a>
 80042a6:	f04f 0800 	mov.w	r8, #0
 80042aa:	f104 0919 	add.w	r9, r4, #25
 80042ae:	e7f4      	b.n	800429a <_printf_float+0x442>

080042b0 <_printf_common>:
 80042b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042b4:	4616      	mov	r6, r2
 80042b6:	4698      	mov	r8, r3
 80042b8:	688a      	ldr	r2, [r1, #8]
 80042ba:	690b      	ldr	r3, [r1, #16]
 80042bc:	4607      	mov	r7, r0
 80042be:	4293      	cmp	r3, r2
 80042c0:	bfb8      	it	lt
 80042c2:	4613      	movlt	r3, r2
 80042c4:	6033      	str	r3, [r6, #0]
 80042c6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80042ca:	460c      	mov	r4, r1
 80042cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80042d0:	b10a      	cbz	r2, 80042d6 <_printf_common+0x26>
 80042d2:	3301      	adds	r3, #1
 80042d4:	6033      	str	r3, [r6, #0]
 80042d6:	6823      	ldr	r3, [r4, #0]
 80042d8:	0699      	lsls	r1, r3, #26
 80042da:	bf42      	ittt	mi
 80042dc:	6833      	ldrmi	r3, [r6, #0]
 80042de:	3302      	addmi	r3, #2
 80042e0:	6033      	strmi	r3, [r6, #0]
 80042e2:	6825      	ldr	r5, [r4, #0]
 80042e4:	f015 0506 	ands.w	r5, r5, #6
 80042e8:	d106      	bne.n	80042f8 <_printf_common+0x48>
 80042ea:	f104 0a19 	add.w	sl, r4, #25
 80042ee:	68e3      	ldr	r3, [r4, #12]
 80042f0:	6832      	ldr	r2, [r6, #0]
 80042f2:	1a9b      	subs	r3, r3, r2
 80042f4:	42ab      	cmp	r3, r5
 80042f6:	dc2b      	bgt.n	8004350 <_printf_common+0xa0>
 80042f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80042fc:	6822      	ldr	r2, [r4, #0]
 80042fe:	3b00      	subs	r3, #0
 8004300:	bf18      	it	ne
 8004302:	2301      	movne	r3, #1
 8004304:	0692      	lsls	r2, r2, #26
 8004306:	d430      	bmi.n	800436a <_printf_common+0xba>
 8004308:	4641      	mov	r1, r8
 800430a:	4638      	mov	r0, r7
 800430c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004310:	47c8      	blx	r9
 8004312:	3001      	adds	r0, #1
 8004314:	d023      	beq.n	800435e <_printf_common+0xae>
 8004316:	6823      	ldr	r3, [r4, #0]
 8004318:	6922      	ldr	r2, [r4, #16]
 800431a:	f003 0306 	and.w	r3, r3, #6
 800431e:	2b04      	cmp	r3, #4
 8004320:	bf14      	ite	ne
 8004322:	2500      	movne	r5, #0
 8004324:	6833      	ldreq	r3, [r6, #0]
 8004326:	f04f 0600 	mov.w	r6, #0
 800432a:	bf08      	it	eq
 800432c:	68e5      	ldreq	r5, [r4, #12]
 800432e:	f104 041a 	add.w	r4, r4, #26
 8004332:	bf08      	it	eq
 8004334:	1aed      	subeq	r5, r5, r3
 8004336:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800433a:	bf08      	it	eq
 800433c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004340:	4293      	cmp	r3, r2
 8004342:	bfc4      	itt	gt
 8004344:	1a9b      	subgt	r3, r3, r2
 8004346:	18ed      	addgt	r5, r5, r3
 8004348:	42b5      	cmp	r5, r6
 800434a:	d11a      	bne.n	8004382 <_printf_common+0xd2>
 800434c:	2000      	movs	r0, #0
 800434e:	e008      	b.n	8004362 <_printf_common+0xb2>
 8004350:	2301      	movs	r3, #1
 8004352:	4652      	mov	r2, sl
 8004354:	4641      	mov	r1, r8
 8004356:	4638      	mov	r0, r7
 8004358:	47c8      	blx	r9
 800435a:	3001      	adds	r0, #1
 800435c:	d103      	bne.n	8004366 <_printf_common+0xb6>
 800435e:	f04f 30ff 	mov.w	r0, #4294967295
 8004362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004366:	3501      	adds	r5, #1
 8004368:	e7c1      	b.n	80042ee <_printf_common+0x3e>
 800436a:	2030      	movs	r0, #48	@ 0x30
 800436c:	18e1      	adds	r1, r4, r3
 800436e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004372:	1c5a      	adds	r2, r3, #1
 8004374:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004378:	4422      	add	r2, r4
 800437a:	3302      	adds	r3, #2
 800437c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004380:	e7c2      	b.n	8004308 <_printf_common+0x58>
 8004382:	2301      	movs	r3, #1
 8004384:	4622      	mov	r2, r4
 8004386:	4641      	mov	r1, r8
 8004388:	4638      	mov	r0, r7
 800438a:	47c8      	blx	r9
 800438c:	3001      	adds	r0, #1
 800438e:	d0e6      	beq.n	800435e <_printf_common+0xae>
 8004390:	3601      	adds	r6, #1
 8004392:	e7d9      	b.n	8004348 <_printf_common+0x98>

08004394 <_printf_i>:
 8004394:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004398:	7e0f      	ldrb	r7, [r1, #24]
 800439a:	4691      	mov	r9, r2
 800439c:	2f78      	cmp	r7, #120	@ 0x78
 800439e:	4680      	mov	r8, r0
 80043a0:	460c      	mov	r4, r1
 80043a2:	469a      	mov	sl, r3
 80043a4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80043a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80043aa:	d807      	bhi.n	80043bc <_printf_i+0x28>
 80043ac:	2f62      	cmp	r7, #98	@ 0x62
 80043ae:	d80a      	bhi.n	80043c6 <_printf_i+0x32>
 80043b0:	2f00      	cmp	r7, #0
 80043b2:	f000 80d3 	beq.w	800455c <_printf_i+0x1c8>
 80043b6:	2f58      	cmp	r7, #88	@ 0x58
 80043b8:	f000 80ba 	beq.w	8004530 <_printf_i+0x19c>
 80043bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80043c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80043c4:	e03a      	b.n	800443c <_printf_i+0xa8>
 80043c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80043ca:	2b15      	cmp	r3, #21
 80043cc:	d8f6      	bhi.n	80043bc <_printf_i+0x28>
 80043ce:	a101      	add	r1, pc, #4	@ (adr r1, 80043d4 <_printf_i+0x40>)
 80043d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80043d4:	0800442d 	.word	0x0800442d
 80043d8:	08004441 	.word	0x08004441
 80043dc:	080043bd 	.word	0x080043bd
 80043e0:	080043bd 	.word	0x080043bd
 80043e4:	080043bd 	.word	0x080043bd
 80043e8:	080043bd 	.word	0x080043bd
 80043ec:	08004441 	.word	0x08004441
 80043f0:	080043bd 	.word	0x080043bd
 80043f4:	080043bd 	.word	0x080043bd
 80043f8:	080043bd 	.word	0x080043bd
 80043fc:	080043bd 	.word	0x080043bd
 8004400:	08004543 	.word	0x08004543
 8004404:	0800446b 	.word	0x0800446b
 8004408:	080044fd 	.word	0x080044fd
 800440c:	080043bd 	.word	0x080043bd
 8004410:	080043bd 	.word	0x080043bd
 8004414:	08004565 	.word	0x08004565
 8004418:	080043bd 	.word	0x080043bd
 800441c:	0800446b 	.word	0x0800446b
 8004420:	080043bd 	.word	0x080043bd
 8004424:	080043bd 	.word	0x080043bd
 8004428:	08004505 	.word	0x08004505
 800442c:	6833      	ldr	r3, [r6, #0]
 800442e:	1d1a      	adds	r2, r3, #4
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	6032      	str	r2, [r6, #0]
 8004434:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004438:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800443c:	2301      	movs	r3, #1
 800443e:	e09e      	b.n	800457e <_printf_i+0x1ea>
 8004440:	6833      	ldr	r3, [r6, #0]
 8004442:	6820      	ldr	r0, [r4, #0]
 8004444:	1d19      	adds	r1, r3, #4
 8004446:	6031      	str	r1, [r6, #0]
 8004448:	0606      	lsls	r6, r0, #24
 800444a:	d501      	bpl.n	8004450 <_printf_i+0xbc>
 800444c:	681d      	ldr	r5, [r3, #0]
 800444e:	e003      	b.n	8004458 <_printf_i+0xc4>
 8004450:	0645      	lsls	r5, r0, #25
 8004452:	d5fb      	bpl.n	800444c <_printf_i+0xb8>
 8004454:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004458:	2d00      	cmp	r5, #0
 800445a:	da03      	bge.n	8004464 <_printf_i+0xd0>
 800445c:	232d      	movs	r3, #45	@ 0x2d
 800445e:	426d      	negs	r5, r5
 8004460:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004464:	230a      	movs	r3, #10
 8004466:	4859      	ldr	r0, [pc, #356]	@ (80045cc <_printf_i+0x238>)
 8004468:	e011      	b.n	800448e <_printf_i+0xfa>
 800446a:	6821      	ldr	r1, [r4, #0]
 800446c:	6833      	ldr	r3, [r6, #0]
 800446e:	0608      	lsls	r0, r1, #24
 8004470:	f853 5b04 	ldr.w	r5, [r3], #4
 8004474:	d402      	bmi.n	800447c <_printf_i+0xe8>
 8004476:	0649      	lsls	r1, r1, #25
 8004478:	bf48      	it	mi
 800447a:	b2ad      	uxthmi	r5, r5
 800447c:	2f6f      	cmp	r7, #111	@ 0x6f
 800447e:	6033      	str	r3, [r6, #0]
 8004480:	bf14      	ite	ne
 8004482:	230a      	movne	r3, #10
 8004484:	2308      	moveq	r3, #8
 8004486:	4851      	ldr	r0, [pc, #324]	@ (80045cc <_printf_i+0x238>)
 8004488:	2100      	movs	r1, #0
 800448a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800448e:	6866      	ldr	r6, [r4, #4]
 8004490:	2e00      	cmp	r6, #0
 8004492:	bfa8      	it	ge
 8004494:	6821      	ldrge	r1, [r4, #0]
 8004496:	60a6      	str	r6, [r4, #8]
 8004498:	bfa4      	itt	ge
 800449a:	f021 0104 	bicge.w	r1, r1, #4
 800449e:	6021      	strge	r1, [r4, #0]
 80044a0:	b90d      	cbnz	r5, 80044a6 <_printf_i+0x112>
 80044a2:	2e00      	cmp	r6, #0
 80044a4:	d04b      	beq.n	800453e <_printf_i+0x1aa>
 80044a6:	4616      	mov	r6, r2
 80044a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80044ac:	fb03 5711 	mls	r7, r3, r1, r5
 80044b0:	5dc7      	ldrb	r7, [r0, r7]
 80044b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80044b6:	462f      	mov	r7, r5
 80044b8:	42bb      	cmp	r3, r7
 80044ba:	460d      	mov	r5, r1
 80044bc:	d9f4      	bls.n	80044a8 <_printf_i+0x114>
 80044be:	2b08      	cmp	r3, #8
 80044c0:	d10b      	bne.n	80044da <_printf_i+0x146>
 80044c2:	6823      	ldr	r3, [r4, #0]
 80044c4:	07df      	lsls	r7, r3, #31
 80044c6:	d508      	bpl.n	80044da <_printf_i+0x146>
 80044c8:	6923      	ldr	r3, [r4, #16]
 80044ca:	6861      	ldr	r1, [r4, #4]
 80044cc:	4299      	cmp	r1, r3
 80044ce:	bfde      	ittt	le
 80044d0:	2330      	movle	r3, #48	@ 0x30
 80044d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80044d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80044da:	1b92      	subs	r2, r2, r6
 80044dc:	6122      	str	r2, [r4, #16]
 80044de:	464b      	mov	r3, r9
 80044e0:	4621      	mov	r1, r4
 80044e2:	4640      	mov	r0, r8
 80044e4:	f8cd a000 	str.w	sl, [sp]
 80044e8:	aa03      	add	r2, sp, #12
 80044ea:	f7ff fee1 	bl	80042b0 <_printf_common>
 80044ee:	3001      	adds	r0, #1
 80044f0:	d14a      	bne.n	8004588 <_printf_i+0x1f4>
 80044f2:	f04f 30ff 	mov.w	r0, #4294967295
 80044f6:	b004      	add	sp, #16
 80044f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044fc:	6823      	ldr	r3, [r4, #0]
 80044fe:	f043 0320 	orr.w	r3, r3, #32
 8004502:	6023      	str	r3, [r4, #0]
 8004504:	2778      	movs	r7, #120	@ 0x78
 8004506:	4832      	ldr	r0, [pc, #200]	@ (80045d0 <_printf_i+0x23c>)
 8004508:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800450c:	6823      	ldr	r3, [r4, #0]
 800450e:	6831      	ldr	r1, [r6, #0]
 8004510:	061f      	lsls	r7, r3, #24
 8004512:	f851 5b04 	ldr.w	r5, [r1], #4
 8004516:	d402      	bmi.n	800451e <_printf_i+0x18a>
 8004518:	065f      	lsls	r7, r3, #25
 800451a:	bf48      	it	mi
 800451c:	b2ad      	uxthmi	r5, r5
 800451e:	6031      	str	r1, [r6, #0]
 8004520:	07d9      	lsls	r1, r3, #31
 8004522:	bf44      	itt	mi
 8004524:	f043 0320 	orrmi.w	r3, r3, #32
 8004528:	6023      	strmi	r3, [r4, #0]
 800452a:	b11d      	cbz	r5, 8004534 <_printf_i+0x1a0>
 800452c:	2310      	movs	r3, #16
 800452e:	e7ab      	b.n	8004488 <_printf_i+0xf4>
 8004530:	4826      	ldr	r0, [pc, #152]	@ (80045cc <_printf_i+0x238>)
 8004532:	e7e9      	b.n	8004508 <_printf_i+0x174>
 8004534:	6823      	ldr	r3, [r4, #0]
 8004536:	f023 0320 	bic.w	r3, r3, #32
 800453a:	6023      	str	r3, [r4, #0]
 800453c:	e7f6      	b.n	800452c <_printf_i+0x198>
 800453e:	4616      	mov	r6, r2
 8004540:	e7bd      	b.n	80044be <_printf_i+0x12a>
 8004542:	6833      	ldr	r3, [r6, #0]
 8004544:	6825      	ldr	r5, [r4, #0]
 8004546:	1d18      	adds	r0, r3, #4
 8004548:	6961      	ldr	r1, [r4, #20]
 800454a:	6030      	str	r0, [r6, #0]
 800454c:	062e      	lsls	r6, r5, #24
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	d501      	bpl.n	8004556 <_printf_i+0x1c2>
 8004552:	6019      	str	r1, [r3, #0]
 8004554:	e002      	b.n	800455c <_printf_i+0x1c8>
 8004556:	0668      	lsls	r0, r5, #25
 8004558:	d5fb      	bpl.n	8004552 <_printf_i+0x1be>
 800455a:	8019      	strh	r1, [r3, #0]
 800455c:	2300      	movs	r3, #0
 800455e:	4616      	mov	r6, r2
 8004560:	6123      	str	r3, [r4, #16]
 8004562:	e7bc      	b.n	80044de <_printf_i+0x14a>
 8004564:	6833      	ldr	r3, [r6, #0]
 8004566:	2100      	movs	r1, #0
 8004568:	1d1a      	adds	r2, r3, #4
 800456a:	6032      	str	r2, [r6, #0]
 800456c:	681e      	ldr	r6, [r3, #0]
 800456e:	6862      	ldr	r2, [r4, #4]
 8004570:	4630      	mov	r0, r6
 8004572:	f000 f9d4 	bl	800491e <memchr>
 8004576:	b108      	cbz	r0, 800457c <_printf_i+0x1e8>
 8004578:	1b80      	subs	r0, r0, r6
 800457a:	6060      	str	r0, [r4, #4]
 800457c:	6863      	ldr	r3, [r4, #4]
 800457e:	6123      	str	r3, [r4, #16]
 8004580:	2300      	movs	r3, #0
 8004582:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004586:	e7aa      	b.n	80044de <_printf_i+0x14a>
 8004588:	4632      	mov	r2, r6
 800458a:	4649      	mov	r1, r9
 800458c:	4640      	mov	r0, r8
 800458e:	6923      	ldr	r3, [r4, #16]
 8004590:	47d0      	blx	sl
 8004592:	3001      	adds	r0, #1
 8004594:	d0ad      	beq.n	80044f2 <_printf_i+0x15e>
 8004596:	6823      	ldr	r3, [r4, #0]
 8004598:	079b      	lsls	r3, r3, #30
 800459a:	d413      	bmi.n	80045c4 <_printf_i+0x230>
 800459c:	68e0      	ldr	r0, [r4, #12]
 800459e:	9b03      	ldr	r3, [sp, #12]
 80045a0:	4298      	cmp	r0, r3
 80045a2:	bfb8      	it	lt
 80045a4:	4618      	movlt	r0, r3
 80045a6:	e7a6      	b.n	80044f6 <_printf_i+0x162>
 80045a8:	2301      	movs	r3, #1
 80045aa:	4632      	mov	r2, r6
 80045ac:	4649      	mov	r1, r9
 80045ae:	4640      	mov	r0, r8
 80045b0:	47d0      	blx	sl
 80045b2:	3001      	adds	r0, #1
 80045b4:	d09d      	beq.n	80044f2 <_printf_i+0x15e>
 80045b6:	3501      	adds	r5, #1
 80045b8:	68e3      	ldr	r3, [r4, #12]
 80045ba:	9903      	ldr	r1, [sp, #12]
 80045bc:	1a5b      	subs	r3, r3, r1
 80045be:	42ab      	cmp	r3, r5
 80045c0:	dcf2      	bgt.n	80045a8 <_printf_i+0x214>
 80045c2:	e7eb      	b.n	800459c <_printf_i+0x208>
 80045c4:	2500      	movs	r5, #0
 80045c6:	f104 0619 	add.w	r6, r4, #25
 80045ca:	e7f5      	b.n	80045b8 <_printf_i+0x224>
 80045cc:	08006a6c 	.word	0x08006a6c
 80045d0:	08006a7d 	.word	0x08006a7d

080045d4 <std>:
 80045d4:	2300      	movs	r3, #0
 80045d6:	b510      	push	{r4, lr}
 80045d8:	4604      	mov	r4, r0
 80045da:	e9c0 3300 	strd	r3, r3, [r0]
 80045de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80045e2:	6083      	str	r3, [r0, #8]
 80045e4:	8181      	strh	r1, [r0, #12]
 80045e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80045e8:	81c2      	strh	r2, [r0, #14]
 80045ea:	6183      	str	r3, [r0, #24]
 80045ec:	4619      	mov	r1, r3
 80045ee:	2208      	movs	r2, #8
 80045f0:	305c      	adds	r0, #92	@ 0x5c
 80045f2:	f000 f914 	bl	800481e <memset>
 80045f6:	4b0d      	ldr	r3, [pc, #52]	@ (800462c <std+0x58>)
 80045f8:	6224      	str	r4, [r4, #32]
 80045fa:	6263      	str	r3, [r4, #36]	@ 0x24
 80045fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004630 <std+0x5c>)
 80045fe:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004600:	4b0c      	ldr	r3, [pc, #48]	@ (8004634 <std+0x60>)
 8004602:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004604:	4b0c      	ldr	r3, [pc, #48]	@ (8004638 <std+0x64>)
 8004606:	6323      	str	r3, [r4, #48]	@ 0x30
 8004608:	4b0c      	ldr	r3, [pc, #48]	@ (800463c <std+0x68>)
 800460a:	429c      	cmp	r4, r3
 800460c:	d006      	beq.n	800461c <std+0x48>
 800460e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004612:	4294      	cmp	r4, r2
 8004614:	d002      	beq.n	800461c <std+0x48>
 8004616:	33d0      	adds	r3, #208	@ 0xd0
 8004618:	429c      	cmp	r4, r3
 800461a:	d105      	bne.n	8004628 <std+0x54>
 800461c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004624:	f000 b978 	b.w	8004918 <__retarget_lock_init_recursive>
 8004628:	bd10      	pop	{r4, pc}
 800462a:	bf00      	nop
 800462c:	08004799 	.word	0x08004799
 8004630:	080047bb 	.word	0x080047bb
 8004634:	080047f3 	.word	0x080047f3
 8004638:	08004817 	.word	0x08004817
 800463c:	20000304 	.word	0x20000304

08004640 <stdio_exit_handler>:
 8004640:	4a02      	ldr	r2, [pc, #8]	@ (800464c <stdio_exit_handler+0xc>)
 8004642:	4903      	ldr	r1, [pc, #12]	@ (8004650 <stdio_exit_handler+0x10>)
 8004644:	4803      	ldr	r0, [pc, #12]	@ (8004654 <stdio_exit_handler+0x14>)
 8004646:	f000 b869 	b.w	800471c <_fwalk_sglue>
 800464a:	bf00      	nop
 800464c:	2000000c 	.word	0x2000000c
 8004650:	0800628d 	.word	0x0800628d
 8004654:	2000001c 	.word	0x2000001c

08004658 <cleanup_stdio>:
 8004658:	6841      	ldr	r1, [r0, #4]
 800465a:	4b0c      	ldr	r3, [pc, #48]	@ (800468c <cleanup_stdio+0x34>)
 800465c:	b510      	push	{r4, lr}
 800465e:	4299      	cmp	r1, r3
 8004660:	4604      	mov	r4, r0
 8004662:	d001      	beq.n	8004668 <cleanup_stdio+0x10>
 8004664:	f001 fe12 	bl	800628c <_fflush_r>
 8004668:	68a1      	ldr	r1, [r4, #8]
 800466a:	4b09      	ldr	r3, [pc, #36]	@ (8004690 <cleanup_stdio+0x38>)
 800466c:	4299      	cmp	r1, r3
 800466e:	d002      	beq.n	8004676 <cleanup_stdio+0x1e>
 8004670:	4620      	mov	r0, r4
 8004672:	f001 fe0b 	bl	800628c <_fflush_r>
 8004676:	68e1      	ldr	r1, [r4, #12]
 8004678:	4b06      	ldr	r3, [pc, #24]	@ (8004694 <cleanup_stdio+0x3c>)
 800467a:	4299      	cmp	r1, r3
 800467c:	d004      	beq.n	8004688 <cleanup_stdio+0x30>
 800467e:	4620      	mov	r0, r4
 8004680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004684:	f001 be02 	b.w	800628c <_fflush_r>
 8004688:	bd10      	pop	{r4, pc}
 800468a:	bf00      	nop
 800468c:	20000304 	.word	0x20000304
 8004690:	2000036c 	.word	0x2000036c
 8004694:	200003d4 	.word	0x200003d4

08004698 <global_stdio_init.part.0>:
 8004698:	b510      	push	{r4, lr}
 800469a:	4b0b      	ldr	r3, [pc, #44]	@ (80046c8 <global_stdio_init.part.0+0x30>)
 800469c:	4c0b      	ldr	r4, [pc, #44]	@ (80046cc <global_stdio_init.part.0+0x34>)
 800469e:	4a0c      	ldr	r2, [pc, #48]	@ (80046d0 <global_stdio_init.part.0+0x38>)
 80046a0:	4620      	mov	r0, r4
 80046a2:	601a      	str	r2, [r3, #0]
 80046a4:	2104      	movs	r1, #4
 80046a6:	2200      	movs	r2, #0
 80046a8:	f7ff ff94 	bl	80045d4 <std>
 80046ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80046b0:	2201      	movs	r2, #1
 80046b2:	2109      	movs	r1, #9
 80046b4:	f7ff ff8e 	bl	80045d4 <std>
 80046b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80046bc:	2202      	movs	r2, #2
 80046be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046c2:	2112      	movs	r1, #18
 80046c4:	f7ff bf86 	b.w	80045d4 <std>
 80046c8:	2000043c 	.word	0x2000043c
 80046cc:	20000304 	.word	0x20000304
 80046d0:	08004641 	.word	0x08004641

080046d4 <__sfp_lock_acquire>:
 80046d4:	4801      	ldr	r0, [pc, #4]	@ (80046dc <__sfp_lock_acquire+0x8>)
 80046d6:	f000 b920 	b.w	800491a <__retarget_lock_acquire_recursive>
 80046da:	bf00      	nop
 80046dc:	20000445 	.word	0x20000445

080046e0 <__sfp_lock_release>:
 80046e0:	4801      	ldr	r0, [pc, #4]	@ (80046e8 <__sfp_lock_release+0x8>)
 80046e2:	f000 b91b 	b.w	800491c <__retarget_lock_release_recursive>
 80046e6:	bf00      	nop
 80046e8:	20000445 	.word	0x20000445

080046ec <__sinit>:
 80046ec:	b510      	push	{r4, lr}
 80046ee:	4604      	mov	r4, r0
 80046f0:	f7ff fff0 	bl	80046d4 <__sfp_lock_acquire>
 80046f4:	6a23      	ldr	r3, [r4, #32]
 80046f6:	b11b      	cbz	r3, 8004700 <__sinit+0x14>
 80046f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046fc:	f7ff bff0 	b.w	80046e0 <__sfp_lock_release>
 8004700:	4b04      	ldr	r3, [pc, #16]	@ (8004714 <__sinit+0x28>)
 8004702:	6223      	str	r3, [r4, #32]
 8004704:	4b04      	ldr	r3, [pc, #16]	@ (8004718 <__sinit+0x2c>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1f5      	bne.n	80046f8 <__sinit+0xc>
 800470c:	f7ff ffc4 	bl	8004698 <global_stdio_init.part.0>
 8004710:	e7f2      	b.n	80046f8 <__sinit+0xc>
 8004712:	bf00      	nop
 8004714:	08004659 	.word	0x08004659
 8004718:	2000043c 	.word	0x2000043c

0800471c <_fwalk_sglue>:
 800471c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004720:	4607      	mov	r7, r0
 8004722:	4688      	mov	r8, r1
 8004724:	4614      	mov	r4, r2
 8004726:	2600      	movs	r6, #0
 8004728:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800472c:	f1b9 0901 	subs.w	r9, r9, #1
 8004730:	d505      	bpl.n	800473e <_fwalk_sglue+0x22>
 8004732:	6824      	ldr	r4, [r4, #0]
 8004734:	2c00      	cmp	r4, #0
 8004736:	d1f7      	bne.n	8004728 <_fwalk_sglue+0xc>
 8004738:	4630      	mov	r0, r6
 800473a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800473e:	89ab      	ldrh	r3, [r5, #12]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d907      	bls.n	8004754 <_fwalk_sglue+0x38>
 8004744:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004748:	3301      	adds	r3, #1
 800474a:	d003      	beq.n	8004754 <_fwalk_sglue+0x38>
 800474c:	4629      	mov	r1, r5
 800474e:	4638      	mov	r0, r7
 8004750:	47c0      	blx	r8
 8004752:	4306      	orrs	r6, r0
 8004754:	3568      	adds	r5, #104	@ 0x68
 8004756:	e7e9      	b.n	800472c <_fwalk_sglue+0x10>

08004758 <siprintf>:
 8004758:	b40e      	push	{r1, r2, r3}
 800475a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800475e:	b500      	push	{lr}
 8004760:	b09c      	sub	sp, #112	@ 0x70
 8004762:	ab1d      	add	r3, sp, #116	@ 0x74
 8004764:	9002      	str	r0, [sp, #8]
 8004766:	9006      	str	r0, [sp, #24]
 8004768:	9107      	str	r1, [sp, #28]
 800476a:	9104      	str	r1, [sp, #16]
 800476c:	4808      	ldr	r0, [pc, #32]	@ (8004790 <siprintf+0x38>)
 800476e:	4909      	ldr	r1, [pc, #36]	@ (8004794 <siprintf+0x3c>)
 8004770:	f853 2b04 	ldr.w	r2, [r3], #4
 8004774:	9105      	str	r1, [sp, #20]
 8004776:	6800      	ldr	r0, [r0, #0]
 8004778:	a902      	add	r1, sp, #8
 800477a:	9301      	str	r3, [sp, #4]
 800477c:	f001 fc0a 	bl	8005f94 <_svfiprintf_r>
 8004780:	2200      	movs	r2, #0
 8004782:	9b02      	ldr	r3, [sp, #8]
 8004784:	701a      	strb	r2, [r3, #0]
 8004786:	b01c      	add	sp, #112	@ 0x70
 8004788:	f85d eb04 	ldr.w	lr, [sp], #4
 800478c:	b003      	add	sp, #12
 800478e:	4770      	bx	lr
 8004790:	20000018 	.word	0x20000018
 8004794:	ffff0208 	.word	0xffff0208

08004798 <__sread>:
 8004798:	b510      	push	{r4, lr}
 800479a:	460c      	mov	r4, r1
 800479c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047a0:	f000 f86c 	bl	800487c <_read_r>
 80047a4:	2800      	cmp	r0, #0
 80047a6:	bfab      	itete	ge
 80047a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80047aa:	89a3      	ldrhlt	r3, [r4, #12]
 80047ac:	181b      	addge	r3, r3, r0
 80047ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80047b2:	bfac      	ite	ge
 80047b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80047b6:	81a3      	strhlt	r3, [r4, #12]
 80047b8:	bd10      	pop	{r4, pc}

080047ba <__swrite>:
 80047ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047be:	461f      	mov	r7, r3
 80047c0:	898b      	ldrh	r3, [r1, #12]
 80047c2:	4605      	mov	r5, r0
 80047c4:	05db      	lsls	r3, r3, #23
 80047c6:	460c      	mov	r4, r1
 80047c8:	4616      	mov	r6, r2
 80047ca:	d505      	bpl.n	80047d8 <__swrite+0x1e>
 80047cc:	2302      	movs	r3, #2
 80047ce:	2200      	movs	r2, #0
 80047d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047d4:	f000 f840 	bl	8004858 <_lseek_r>
 80047d8:	89a3      	ldrh	r3, [r4, #12]
 80047da:	4632      	mov	r2, r6
 80047dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80047e0:	81a3      	strh	r3, [r4, #12]
 80047e2:	4628      	mov	r0, r5
 80047e4:	463b      	mov	r3, r7
 80047e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047ee:	f000 b857 	b.w	80048a0 <_write_r>

080047f2 <__sseek>:
 80047f2:	b510      	push	{r4, lr}
 80047f4:	460c      	mov	r4, r1
 80047f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047fa:	f000 f82d 	bl	8004858 <_lseek_r>
 80047fe:	1c43      	adds	r3, r0, #1
 8004800:	89a3      	ldrh	r3, [r4, #12]
 8004802:	bf15      	itete	ne
 8004804:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004806:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800480a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800480e:	81a3      	strheq	r3, [r4, #12]
 8004810:	bf18      	it	ne
 8004812:	81a3      	strhne	r3, [r4, #12]
 8004814:	bd10      	pop	{r4, pc}

08004816 <__sclose>:
 8004816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800481a:	f000 b80d 	b.w	8004838 <_close_r>

0800481e <memset>:
 800481e:	4603      	mov	r3, r0
 8004820:	4402      	add	r2, r0
 8004822:	4293      	cmp	r3, r2
 8004824:	d100      	bne.n	8004828 <memset+0xa>
 8004826:	4770      	bx	lr
 8004828:	f803 1b01 	strb.w	r1, [r3], #1
 800482c:	e7f9      	b.n	8004822 <memset+0x4>
	...

08004830 <_localeconv_r>:
 8004830:	4800      	ldr	r0, [pc, #0]	@ (8004834 <_localeconv_r+0x4>)
 8004832:	4770      	bx	lr
 8004834:	20000158 	.word	0x20000158

08004838 <_close_r>:
 8004838:	b538      	push	{r3, r4, r5, lr}
 800483a:	2300      	movs	r3, #0
 800483c:	4d05      	ldr	r5, [pc, #20]	@ (8004854 <_close_r+0x1c>)
 800483e:	4604      	mov	r4, r0
 8004840:	4608      	mov	r0, r1
 8004842:	602b      	str	r3, [r5, #0]
 8004844:	f7fc ff8d 	bl	8001762 <_close>
 8004848:	1c43      	adds	r3, r0, #1
 800484a:	d102      	bne.n	8004852 <_close_r+0x1a>
 800484c:	682b      	ldr	r3, [r5, #0]
 800484e:	b103      	cbz	r3, 8004852 <_close_r+0x1a>
 8004850:	6023      	str	r3, [r4, #0]
 8004852:	bd38      	pop	{r3, r4, r5, pc}
 8004854:	20000440 	.word	0x20000440

08004858 <_lseek_r>:
 8004858:	b538      	push	{r3, r4, r5, lr}
 800485a:	4604      	mov	r4, r0
 800485c:	4608      	mov	r0, r1
 800485e:	4611      	mov	r1, r2
 8004860:	2200      	movs	r2, #0
 8004862:	4d05      	ldr	r5, [pc, #20]	@ (8004878 <_lseek_r+0x20>)
 8004864:	602a      	str	r2, [r5, #0]
 8004866:	461a      	mov	r2, r3
 8004868:	f7fc ff9f 	bl	80017aa <_lseek>
 800486c:	1c43      	adds	r3, r0, #1
 800486e:	d102      	bne.n	8004876 <_lseek_r+0x1e>
 8004870:	682b      	ldr	r3, [r5, #0]
 8004872:	b103      	cbz	r3, 8004876 <_lseek_r+0x1e>
 8004874:	6023      	str	r3, [r4, #0]
 8004876:	bd38      	pop	{r3, r4, r5, pc}
 8004878:	20000440 	.word	0x20000440

0800487c <_read_r>:
 800487c:	b538      	push	{r3, r4, r5, lr}
 800487e:	4604      	mov	r4, r0
 8004880:	4608      	mov	r0, r1
 8004882:	4611      	mov	r1, r2
 8004884:	2200      	movs	r2, #0
 8004886:	4d05      	ldr	r5, [pc, #20]	@ (800489c <_read_r+0x20>)
 8004888:	602a      	str	r2, [r5, #0]
 800488a:	461a      	mov	r2, r3
 800488c:	f7fc ff30 	bl	80016f0 <_read>
 8004890:	1c43      	adds	r3, r0, #1
 8004892:	d102      	bne.n	800489a <_read_r+0x1e>
 8004894:	682b      	ldr	r3, [r5, #0]
 8004896:	b103      	cbz	r3, 800489a <_read_r+0x1e>
 8004898:	6023      	str	r3, [r4, #0]
 800489a:	bd38      	pop	{r3, r4, r5, pc}
 800489c:	20000440 	.word	0x20000440

080048a0 <_write_r>:
 80048a0:	b538      	push	{r3, r4, r5, lr}
 80048a2:	4604      	mov	r4, r0
 80048a4:	4608      	mov	r0, r1
 80048a6:	4611      	mov	r1, r2
 80048a8:	2200      	movs	r2, #0
 80048aa:	4d05      	ldr	r5, [pc, #20]	@ (80048c0 <_write_r+0x20>)
 80048ac:	602a      	str	r2, [r5, #0]
 80048ae:	461a      	mov	r2, r3
 80048b0:	f7fc ff3b 	bl	800172a <_write>
 80048b4:	1c43      	adds	r3, r0, #1
 80048b6:	d102      	bne.n	80048be <_write_r+0x1e>
 80048b8:	682b      	ldr	r3, [r5, #0]
 80048ba:	b103      	cbz	r3, 80048be <_write_r+0x1e>
 80048bc:	6023      	str	r3, [r4, #0]
 80048be:	bd38      	pop	{r3, r4, r5, pc}
 80048c0:	20000440 	.word	0x20000440

080048c4 <__errno>:
 80048c4:	4b01      	ldr	r3, [pc, #4]	@ (80048cc <__errno+0x8>)
 80048c6:	6818      	ldr	r0, [r3, #0]
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	20000018 	.word	0x20000018

080048d0 <__libc_init_array>:
 80048d0:	b570      	push	{r4, r5, r6, lr}
 80048d2:	2600      	movs	r6, #0
 80048d4:	4d0c      	ldr	r5, [pc, #48]	@ (8004908 <__libc_init_array+0x38>)
 80048d6:	4c0d      	ldr	r4, [pc, #52]	@ (800490c <__libc_init_array+0x3c>)
 80048d8:	1b64      	subs	r4, r4, r5
 80048da:	10a4      	asrs	r4, r4, #2
 80048dc:	42a6      	cmp	r6, r4
 80048de:	d109      	bne.n	80048f4 <__libc_init_array+0x24>
 80048e0:	f002 f870 	bl	80069c4 <_init>
 80048e4:	2600      	movs	r6, #0
 80048e6:	4d0a      	ldr	r5, [pc, #40]	@ (8004910 <__libc_init_array+0x40>)
 80048e8:	4c0a      	ldr	r4, [pc, #40]	@ (8004914 <__libc_init_array+0x44>)
 80048ea:	1b64      	subs	r4, r4, r5
 80048ec:	10a4      	asrs	r4, r4, #2
 80048ee:	42a6      	cmp	r6, r4
 80048f0:	d105      	bne.n	80048fe <__libc_init_array+0x2e>
 80048f2:	bd70      	pop	{r4, r5, r6, pc}
 80048f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80048f8:	4798      	blx	r3
 80048fa:	3601      	adds	r6, #1
 80048fc:	e7ee      	b.n	80048dc <__libc_init_array+0xc>
 80048fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004902:	4798      	blx	r3
 8004904:	3601      	adds	r6, #1
 8004906:	e7f2      	b.n	80048ee <__libc_init_array+0x1e>
 8004908:	08006dd0 	.word	0x08006dd0
 800490c:	08006dd0 	.word	0x08006dd0
 8004910:	08006dd0 	.word	0x08006dd0
 8004914:	08006dd4 	.word	0x08006dd4

08004918 <__retarget_lock_init_recursive>:
 8004918:	4770      	bx	lr

0800491a <__retarget_lock_acquire_recursive>:
 800491a:	4770      	bx	lr

0800491c <__retarget_lock_release_recursive>:
 800491c:	4770      	bx	lr

0800491e <memchr>:
 800491e:	4603      	mov	r3, r0
 8004920:	b510      	push	{r4, lr}
 8004922:	b2c9      	uxtb	r1, r1
 8004924:	4402      	add	r2, r0
 8004926:	4293      	cmp	r3, r2
 8004928:	4618      	mov	r0, r3
 800492a:	d101      	bne.n	8004930 <memchr+0x12>
 800492c:	2000      	movs	r0, #0
 800492e:	e003      	b.n	8004938 <memchr+0x1a>
 8004930:	7804      	ldrb	r4, [r0, #0]
 8004932:	3301      	adds	r3, #1
 8004934:	428c      	cmp	r4, r1
 8004936:	d1f6      	bne.n	8004926 <memchr+0x8>
 8004938:	bd10      	pop	{r4, pc}

0800493a <quorem>:
 800493a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800493e:	6903      	ldr	r3, [r0, #16]
 8004940:	690c      	ldr	r4, [r1, #16]
 8004942:	4607      	mov	r7, r0
 8004944:	42a3      	cmp	r3, r4
 8004946:	db7e      	blt.n	8004a46 <quorem+0x10c>
 8004948:	3c01      	subs	r4, #1
 800494a:	00a3      	lsls	r3, r4, #2
 800494c:	f100 0514 	add.w	r5, r0, #20
 8004950:	f101 0814 	add.w	r8, r1, #20
 8004954:	9300      	str	r3, [sp, #0]
 8004956:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800495a:	9301      	str	r3, [sp, #4]
 800495c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004960:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004964:	3301      	adds	r3, #1
 8004966:	429a      	cmp	r2, r3
 8004968:	fbb2 f6f3 	udiv	r6, r2, r3
 800496c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004970:	d32e      	bcc.n	80049d0 <quorem+0x96>
 8004972:	f04f 0a00 	mov.w	sl, #0
 8004976:	46c4      	mov	ip, r8
 8004978:	46ae      	mov	lr, r5
 800497a:	46d3      	mov	fp, sl
 800497c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004980:	b298      	uxth	r0, r3
 8004982:	fb06 a000 	mla	r0, r6, r0, sl
 8004986:	0c1b      	lsrs	r3, r3, #16
 8004988:	0c02      	lsrs	r2, r0, #16
 800498a:	fb06 2303 	mla	r3, r6, r3, r2
 800498e:	f8de 2000 	ldr.w	r2, [lr]
 8004992:	b280      	uxth	r0, r0
 8004994:	b292      	uxth	r2, r2
 8004996:	1a12      	subs	r2, r2, r0
 8004998:	445a      	add	r2, fp
 800499a:	f8de 0000 	ldr.w	r0, [lr]
 800499e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80049a8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80049ac:	b292      	uxth	r2, r2
 80049ae:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80049b2:	45e1      	cmp	r9, ip
 80049b4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80049b8:	f84e 2b04 	str.w	r2, [lr], #4
 80049bc:	d2de      	bcs.n	800497c <quorem+0x42>
 80049be:	9b00      	ldr	r3, [sp, #0]
 80049c0:	58eb      	ldr	r3, [r5, r3]
 80049c2:	b92b      	cbnz	r3, 80049d0 <quorem+0x96>
 80049c4:	9b01      	ldr	r3, [sp, #4]
 80049c6:	3b04      	subs	r3, #4
 80049c8:	429d      	cmp	r5, r3
 80049ca:	461a      	mov	r2, r3
 80049cc:	d32f      	bcc.n	8004a2e <quorem+0xf4>
 80049ce:	613c      	str	r4, [r7, #16]
 80049d0:	4638      	mov	r0, r7
 80049d2:	f001 f97b 	bl	8005ccc <__mcmp>
 80049d6:	2800      	cmp	r0, #0
 80049d8:	db25      	blt.n	8004a26 <quorem+0xec>
 80049da:	4629      	mov	r1, r5
 80049dc:	2000      	movs	r0, #0
 80049de:	f858 2b04 	ldr.w	r2, [r8], #4
 80049e2:	f8d1 c000 	ldr.w	ip, [r1]
 80049e6:	fa1f fe82 	uxth.w	lr, r2
 80049ea:	fa1f f38c 	uxth.w	r3, ip
 80049ee:	eba3 030e 	sub.w	r3, r3, lr
 80049f2:	4403      	add	r3, r0
 80049f4:	0c12      	lsrs	r2, r2, #16
 80049f6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80049fa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a04:	45c1      	cmp	r9, r8
 8004a06:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004a0a:	f841 3b04 	str.w	r3, [r1], #4
 8004a0e:	d2e6      	bcs.n	80049de <quorem+0xa4>
 8004a10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a14:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a18:	b922      	cbnz	r2, 8004a24 <quorem+0xea>
 8004a1a:	3b04      	subs	r3, #4
 8004a1c:	429d      	cmp	r5, r3
 8004a1e:	461a      	mov	r2, r3
 8004a20:	d30b      	bcc.n	8004a3a <quorem+0x100>
 8004a22:	613c      	str	r4, [r7, #16]
 8004a24:	3601      	adds	r6, #1
 8004a26:	4630      	mov	r0, r6
 8004a28:	b003      	add	sp, #12
 8004a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a2e:	6812      	ldr	r2, [r2, #0]
 8004a30:	3b04      	subs	r3, #4
 8004a32:	2a00      	cmp	r2, #0
 8004a34:	d1cb      	bne.n	80049ce <quorem+0x94>
 8004a36:	3c01      	subs	r4, #1
 8004a38:	e7c6      	b.n	80049c8 <quorem+0x8e>
 8004a3a:	6812      	ldr	r2, [r2, #0]
 8004a3c:	3b04      	subs	r3, #4
 8004a3e:	2a00      	cmp	r2, #0
 8004a40:	d1ef      	bne.n	8004a22 <quorem+0xe8>
 8004a42:	3c01      	subs	r4, #1
 8004a44:	e7ea      	b.n	8004a1c <quorem+0xe2>
 8004a46:	2000      	movs	r0, #0
 8004a48:	e7ee      	b.n	8004a28 <quorem+0xee>
 8004a4a:	0000      	movs	r0, r0
 8004a4c:	0000      	movs	r0, r0
	...

08004a50 <_dtoa_r>:
 8004a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a54:	4614      	mov	r4, r2
 8004a56:	461d      	mov	r5, r3
 8004a58:	69c7      	ldr	r7, [r0, #28]
 8004a5a:	b097      	sub	sp, #92	@ 0x5c
 8004a5c:	4683      	mov	fp, r0
 8004a5e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004a62:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004a64:	b97f      	cbnz	r7, 8004a86 <_dtoa_r+0x36>
 8004a66:	2010      	movs	r0, #16
 8004a68:	f000 fe02 	bl	8005670 <malloc>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	f8cb 001c 	str.w	r0, [fp, #28]
 8004a72:	b920      	cbnz	r0, 8004a7e <_dtoa_r+0x2e>
 8004a74:	21ef      	movs	r1, #239	@ 0xef
 8004a76:	4ba8      	ldr	r3, [pc, #672]	@ (8004d18 <_dtoa_r+0x2c8>)
 8004a78:	48a8      	ldr	r0, [pc, #672]	@ (8004d1c <_dtoa_r+0x2cc>)
 8004a7a:	f001 fc67 	bl	800634c <__assert_func>
 8004a7e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004a82:	6007      	str	r7, [r0, #0]
 8004a84:	60c7      	str	r7, [r0, #12]
 8004a86:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004a8a:	6819      	ldr	r1, [r3, #0]
 8004a8c:	b159      	cbz	r1, 8004aa6 <_dtoa_r+0x56>
 8004a8e:	685a      	ldr	r2, [r3, #4]
 8004a90:	2301      	movs	r3, #1
 8004a92:	4093      	lsls	r3, r2
 8004a94:	604a      	str	r2, [r1, #4]
 8004a96:	608b      	str	r3, [r1, #8]
 8004a98:	4658      	mov	r0, fp
 8004a9a:	f000 fedf 	bl	800585c <_Bfree>
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004aa4:	601a      	str	r2, [r3, #0]
 8004aa6:	1e2b      	subs	r3, r5, #0
 8004aa8:	bfaf      	iteee	ge
 8004aaa:	2300      	movge	r3, #0
 8004aac:	2201      	movlt	r2, #1
 8004aae:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004ab2:	9303      	strlt	r3, [sp, #12]
 8004ab4:	bfa8      	it	ge
 8004ab6:	6033      	strge	r3, [r6, #0]
 8004ab8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004abc:	4b98      	ldr	r3, [pc, #608]	@ (8004d20 <_dtoa_r+0x2d0>)
 8004abe:	bfb8      	it	lt
 8004ac0:	6032      	strlt	r2, [r6, #0]
 8004ac2:	ea33 0308 	bics.w	r3, r3, r8
 8004ac6:	d112      	bne.n	8004aee <_dtoa_r+0x9e>
 8004ac8:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004acc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004ace:	6013      	str	r3, [r2, #0]
 8004ad0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004ad4:	4323      	orrs	r3, r4
 8004ad6:	f000 8550 	beq.w	800557a <_dtoa_r+0xb2a>
 8004ada:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004adc:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8004d24 <_dtoa_r+0x2d4>
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f000 8552 	beq.w	800558a <_dtoa_r+0xb3a>
 8004ae6:	f10a 0303 	add.w	r3, sl, #3
 8004aea:	f000 bd4c 	b.w	8005586 <_dtoa_r+0xb36>
 8004aee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004af2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004af6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004afa:	2200      	movs	r2, #0
 8004afc:	2300      	movs	r3, #0
 8004afe:	f7fb ff5d 	bl	80009bc <__aeabi_dcmpeq>
 8004b02:	4607      	mov	r7, r0
 8004b04:	b158      	cbz	r0, 8004b1e <_dtoa_r+0xce>
 8004b06:	2301      	movs	r3, #1
 8004b08:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004b0a:	6013      	str	r3, [r2, #0]
 8004b0c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004b0e:	b113      	cbz	r3, 8004b16 <_dtoa_r+0xc6>
 8004b10:	4b85      	ldr	r3, [pc, #532]	@ (8004d28 <_dtoa_r+0x2d8>)
 8004b12:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004b14:	6013      	str	r3, [r2, #0]
 8004b16:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8004d2c <_dtoa_r+0x2dc>
 8004b1a:	f000 bd36 	b.w	800558a <_dtoa_r+0xb3a>
 8004b1e:	ab14      	add	r3, sp, #80	@ 0x50
 8004b20:	9301      	str	r3, [sp, #4]
 8004b22:	ab15      	add	r3, sp, #84	@ 0x54
 8004b24:	9300      	str	r3, [sp, #0]
 8004b26:	4658      	mov	r0, fp
 8004b28:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004b2c:	f001 f97e 	bl	8005e2c <__d2b>
 8004b30:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8004b34:	4681      	mov	r9, r0
 8004b36:	2e00      	cmp	r6, #0
 8004b38:	d077      	beq.n	8004c2a <_dtoa_r+0x1da>
 8004b3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004b3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004b40:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004b44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b48:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004b4c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004b50:	9712      	str	r7, [sp, #72]	@ 0x48
 8004b52:	4619      	mov	r1, r3
 8004b54:	2200      	movs	r2, #0
 8004b56:	4b76      	ldr	r3, [pc, #472]	@ (8004d30 <_dtoa_r+0x2e0>)
 8004b58:	f7fb fb10 	bl	800017c <__aeabi_dsub>
 8004b5c:	a368      	add	r3, pc, #416	@ (adr r3, 8004d00 <_dtoa_r+0x2b0>)
 8004b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b62:	f7fb fcc3 	bl	80004ec <__aeabi_dmul>
 8004b66:	a368      	add	r3, pc, #416	@ (adr r3, 8004d08 <_dtoa_r+0x2b8>)
 8004b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6c:	f7fb fb08 	bl	8000180 <__adddf3>
 8004b70:	4604      	mov	r4, r0
 8004b72:	4630      	mov	r0, r6
 8004b74:	460d      	mov	r5, r1
 8004b76:	f7fb fc4f 	bl	8000418 <__aeabi_i2d>
 8004b7a:	a365      	add	r3, pc, #404	@ (adr r3, 8004d10 <_dtoa_r+0x2c0>)
 8004b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b80:	f7fb fcb4 	bl	80004ec <__aeabi_dmul>
 8004b84:	4602      	mov	r2, r0
 8004b86:	460b      	mov	r3, r1
 8004b88:	4620      	mov	r0, r4
 8004b8a:	4629      	mov	r1, r5
 8004b8c:	f7fb faf8 	bl	8000180 <__adddf3>
 8004b90:	4604      	mov	r4, r0
 8004b92:	460d      	mov	r5, r1
 8004b94:	f7fb ff5a 	bl	8000a4c <__aeabi_d2iz>
 8004b98:	2200      	movs	r2, #0
 8004b9a:	4607      	mov	r7, r0
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	4620      	mov	r0, r4
 8004ba0:	4629      	mov	r1, r5
 8004ba2:	f7fb ff15 	bl	80009d0 <__aeabi_dcmplt>
 8004ba6:	b140      	cbz	r0, 8004bba <_dtoa_r+0x16a>
 8004ba8:	4638      	mov	r0, r7
 8004baa:	f7fb fc35 	bl	8000418 <__aeabi_i2d>
 8004bae:	4622      	mov	r2, r4
 8004bb0:	462b      	mov	r3, r5
 8004bb2:	f7fb ff03 	bl	80009bc <__aeabi_dcmpeq>
 8004bb6:	b900      	cbnz	r0, 8004bba <_dtoa_r+0x16a>
 8004bb8:	3f01      	subs	r7, #1
 8004bba:	2f16      	cmp	r7, #22
 8004bbc:	d853      	bhi.n	8004c66 <_dtoa_r+0x216>
 8004bbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004bc2:	4b5c      	ldr	r3, [pc, #368]	@ (8004d34 <_dtoa_r+0x2e4>)
 8004bc4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bcc:	f7fb ff00 	bl	80009d0 <__aeabi_dcmplt>
 8004bd0:	2800      	cmp	r0, #0
 8004bd2:	d04a      	beq.n	8004c6a <_dtoa_r+0x21a>
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	3f01      	subs	r7, #1
 8004bd8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004bda:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004bdc:	1b9b      	subs	r3, r3, r6
 8004bde:	1e5a      	subs	r2, r3, #1
 8004be0:	bf46      	itte	mi
 8004be2:	f1c3 0801 	rsbmi	r8, r3, #1
 8004be6:	2300      	movmi	r3, #0
 8004be8:	f04f 0800 	movpl.w	r8, #0
 8004bec:	9209      	str	r2, [sp, #36]	@ 0x24
 8004bee:	bf48      	it	mi
 8004bf0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004bf2:	2f00      	cmp	r7, #0
 8004bf4:	db3b      	blt.n	8004c6e <_dtoa_r+0x21e>
 8004bf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bf8:	970e      	str	r7, [sp, #56]	@ 0x38
 8004bfa:	443b      	add	r3, r7
 8004bfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8004bfe:	2300      	movs	r3, #0
 8004c00:	930a      	str	r3, [sp, #40]	@ 0x28
 8004c02:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004c04:	2b09      	cmp	r3, #9
 8004c06:	d866      	bhi.n	8004cd6 <_dtoa_r+0x286>
 8004c08:	2b05      	cmp	r3, #5
 8004c0a:	bfc4      	itt	gt
 8004c0c:	3b04      	subgt	r3, #4
 8004c0e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004c10:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004c12:	bfc8      	it	gt
 8004c14:	2400      	movgt	r4, #0
 8004c16:	f1a3 0302 	sub.w	r3, r3, #2
 8004c1a:	bfd8      	it	le
 8004c1c:	2401      	movle	r4, #1
 8004c1e:	2b03      	cmp	r3, #3
 8004c20:	d864      	bhi.n	8004cec <_dtoa_r+0x29c>
 8004c22:	e8df f003 	tbb	[pc, r3]
 8004c26:	382b      	.short	0x382b
 8004c28:	5636      	.short	0x5636
 8004c2a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004c2e:	441e      	add	r6, r3
 8004c30:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004c34:	2b20      	cmp	r3, #32
 8004c36:	bfc1      	itttt	gt
 8004c38:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004c3c:	fa08 f803 	lslgt.w	r8, r8, r3
 8004c40:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004c44:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004c48:	bfd6      	itet	le
 8004c4a:	f1c3 0320 	rsble	r3, r3, #32
 8004c4e:	ea48 0003 	orrgt.w	r0, r8, r3
 8004c52:	fa04 f003 	lslle.w	r0, r4, r3
 8004c56:	f7fb fbcf 	bl	80003f8 <__aeabi_ui2d>
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004c60:	3e01      	subs	r6, #1
 8004c62:	9212      	str	r2, [sp, #72]	@ 0x48
 8004c64:	e775      	b.n	8004b52 <_dtoa_r+0x102>
 8004c66:	2301      	movs	r3, #1
 8004c68:	e7b6      	b.n	8004bd8 <_dtoa_r+0x188>
 8004c6a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004c6c:	e7b5      	b.n	8004bda <_dtoa_r+0x18a>
 8004c6e:	427b      	negs	r3, r7
 8004c70:	930a      	str	r3, [sp, #40]	@ 0x28
 8004c72:	2300      	movs	r3, #0
 8004c74:	eba8 0807 	sub.w	r8, r8, r7
 8004c78:	930e      	str	r3, [sp, #56]	@ 0x38
 8004c7a:	e7c2      	b.n	8004c02 <_dtoa_r+0x1b2>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004c80:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	dc35      	bgt.n	8004cf2 <_dtoa_r+0x2a2>
 8004c86:	2301      	movs	r3, #1
 8004c88:	461a      	mov	r2, r3
 8004c8a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004c8e:	9221      	str	r2, [sp, #132]	@ 0x84
 8004c90:	e00b      	b.n	8004caa <_dtoa_r+0x25a>
 8004c92:	2301      	movs	r3, #1
 8004c94:	e7f3      	b.n	8004c7e <_dtoa_r+0x22e>
 8004c96:	2300      	movs	r3, #0
 8004c98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004c9a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004c9c:	18fb      	adds	r3, r7, r3
 8004c9e:	9308      	str	r3, [sp, #32]
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	9307      	str	r3, [sp, #28]
 8004ca6:	bfb8      	it	lt
 8004ca8:	2301      	movlt	r3, #1
 8004caa:	2100      	movs	r1, #0
 8004cac:	2204      	movs	r2, #4
 8004cae:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004cb2:	f102 0514 	add.w	r5, r2, #20
 8004cb6:	429d      	cmp	r5, r3
 8004cb8:	d91f      	bls.n	8004cfa <_dtoa_r+0x2aa>
 8004cba:	6041      	str	r1, [r0, #4]
 8004cbc:	4658      	mov	r0, fp
 8004cbe:	f000 fd8d 	bl	80057dc <_Balloc>
 8004cc2:	4682      	mov	sl, r0
 8004cc4:	2800      	cmp	r0, #0
 8004cc6:	d139      	bne.n	8004d3c <_dtoa_r+0x2ec>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	f240 11af 	movw	r1, #431	@ 0x1af
 8004cce:	4b1a      	ldr	r3, [pc, #104]	@ (8004d38 <_dtoa_r+0x2e8>)
 8004cd0:	e6d2      	b.n	8004a78 <_dtoa_r+0x28>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e7e0      	b.n	8004c98 <_dtoa_r+0x248>
 8004cd6:	2401      	movs	r4, #1
 8004cd8:	2300      	movs	r3, #0
 8004cda:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004cdc:	9320      	str	r3, [sp, #128]	@ 0x80
 8004cde:	f04f 33ff 	mov.w	r3, #4294967295
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004ce8:	2312      	movs	r3, #18
 8004cea:	e7d0      	b.n	8004c8e <_dtoa_r+0x23e>
 8004cec:	2301      	movs	r3, #1
 8004cee:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004cf0:	e7f5      	b.n	8004cde <_dtoa_r+0x28e>
 8004cf2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004cf4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004cf8:	e7d7      	b.n	8004caa <_dtoa_r+0x25a>
 8004cfa:	3101      	adds	r1, #1
 8004cfc:	0052      	lsls	r2, r2, #1
 8004cfe:	e7d8      	b.n	8004cb2 <_dtoa_r+0x262>
 8004d00:	636f4361 	.word	0x636f4361
 8004d04:	3fd287a7 	.word	0x3fd287a7
 8004d08:	8b60c8b3 	.word	0x8b60c8b3
 8004d0c:	3fc68a28 	.word	0x3fc68a28
 8004d10:	509f79fb 	.word	0x509f79fb
 8004d14:	3fd34413 	.word	0x3fd34413
 8004d18:	08006a9b 	.word	0x08006a9b
 8004d1c:	08006ab2 	.word	0x08006ab2
 8004d20:	7ff00000 	.word	0x7ff00000
 8004d24:	08006a97 	.word	0x08006a97
 8004d28:	08006a6b 	.word	0x08006a6b
 8004d2c:	08006a6a 	.word	0x08006a6a
 8004d30:	3ff80000 	.word	0x3ff80000
 8004d34:	08006ba8 	.word	0x08006ba8
 8004d38:	08006b0a 	.word	0x08006b0a
 8004d3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004d40:	6018      	str	r0, [r3, #0]
 8004d42:	9b07      	ldr	r3, [sp, #28]
 8004d44:	2b0e      	cmp	r3, #14
 8004d46:	f200 80a4 	bhi.w	8004e92 <_dtoa_r+0x442>
 8004d4a:	2c00      	cmp	r4, #0
 8004d4c:	f000 80a1 	beq.w	8004e92 <_dtoa_r+0x442>
 8004d50:	2f00      	cmp	r7, #0
 8004d52:	dd33      	ble.n	8004dbc <_dtoa_r+0x36c>
 8004d54:	4b86      	ldr	r3, [pc, #536]	@ (8004f70 <_dtoa_r+0x520>)
 8004d56:	f007 020f 	and.w	r2, r7, #15
 8004d5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d5e:	05f8      	lsls	r0, r7, #23
 8004d60:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004d64:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004d68:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004d6c:	d516      	bpl.n	8004d9c <_dtoa_r+0x34c>
 8004d6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004d72:	4b80      	ldr	r3, [pc, #512]	@ (8004f74 <_dtoa_r+0x524>)
 8004d74:	2603      	movs	r6, #3
 8004d76:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004d7a:	f7fb fce1 	bl	8000740 <__aeabi_ddiv>
 8004d7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d82:	f004 040f 	and.w	r4, r4, #15
 8004d86:	4d7b      	ldr	r5, [pc, #492]	@ (8004f74 <_dtoa_r+0x524>)
 8004d88:	b954      	cbnz	r4, 8004da0 <_dtoa_r+0x350>
 8004d8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d92:	f7fb fcd5 	bl	8000740 <__aeabi_ddiv>
 8004d96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d9a:	e028      	b.n	8004dee <_dtoa_r+0x39e>
 8004d9c:	2602      	movs	r6, #2
 8004d9e:	e7f2      	b.n	8004d86 <_dtoa_r+0x336>
 8004da0:	07e1      	lsls	r1, r4, #31
 8004da2:	d508      	bpl.n	8004db6 <_dtoa_r+0x366>
 8004da4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004da8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004dac:	f7fb fb9e 	bl	80004ec <__aeabi_dmul>
 8004db0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004db4:	3601      	adds	r6, #1
 8004db6:	1064      	asrs	r4, r4, #1
 8004db8:	3508      	adds	r5, #8
 8004dba:	e7e5      	b.n	8004d88 <_dtoa_r+0x338>
 8004dbc:	f000 80d2 	beq.w	8004f64 <_dtoa_r+0x514>
 8004dc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004dc4:	427c      	negs	r4, r7
 8004dc6:	4b6a      	ldr	r3, [pc, #424]	@ (8004f70 <_dtoa_r+0x520>)
 8004dc8:	f004 020f 	and.w	r2, r4, #15
 8004dcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd4:	f7fb fb8a 	bl	80004ec <__aeabi_dmul>
 8004dd8:	2602      	movs	r6, #2
 8004dda:	2300      	movs	r3, #0
 8004ddc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004de0:	4d64      	ldr	r5, [pc, #400]	@ (8004f74 <_dtoa_r+0x524>)
 8004de2:	1124      	asrs	r4, r4, #4
 8004de4:	2c00      	cmp	r4, #0
 8004de6:	f040 80b2 	bne.w	8004f4e <_dtoa_r+0x4fe>
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1d3      	bne.n	8004d96 <_dtoa_r+0x346>
 8004dee:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004df2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f000 80b7 	beq.w	8004f68 <_dtoa_r+0x518>
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	4620      	mov	r0, r4
 8004dfe:	4629      	mov	r1, r5
 8004e00:	4b5d      	ldr	r3, [pc, #372]	@ (8004f78 <_dtoa_r+0x528>)
 8004e02:	f7fb fde5 	bl	80009d0 <__aeabi_dcmplt>
 8004e06:	2800      	cmp	r0, #0
 8004e08:	f000 80ae 	beq.w	8004f68 <_dtoa_r+0x518>
 8004e0c:	9b07      	ldr	r3, [sp, #28]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f000 80aa 	beq.w	8004f68 <_dtoa_r+0x518>
 8004e14:	9b08      	ldr	r3, [sp, #32]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	dd37      	ble.n	8004e8a <_dtoa_r+0x43a>
 8004e1a:	1e7b      	subs	r3, r7, #1
 8004e1c:	4620      	mov	r0, r4
 8004e1e:	9304      	str	r3, [sp, #16]
 8004e20:	2200      	movs	r2, #0
 8004e22:	4629      	mov	r1, r5
 8004e24:	4b55      	ldr	r3, [pc, #340]	@ (8004f7c <_dtoa_r+0x52c>)
 8004e26:	f7fb fb61 	bl	80004ec <__aeabi_dmul>
 8004e2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e2e:	9c08      	ldr	r4, [sp, #32]
 8004e30:	3601      	adds	r6, #1
 8004e32:	4630      	mov	r0, r6
 8004e34:	f7fb faf0 	bl	8000418 <__aeabi_i2d>
 8004e38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e3c:	f7fb fb56 	bl	80004ec <__aeabi_dmul>
 8004e40:	2200      	movs	r2, #0
 8004e42:	4b4f      	ldr	r3, [pc, #316]	@ (8004f80 <_dtoa_r+0x530>)
 8004e44:	f7fb f99c 	bl	8000180 <__adddf3>
 8004e48:	4605      	mov	r5, r0
 8004e4a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004e4e:	2c00      	cmp	r4, #0
 8004e50:	f040 809a 	bne.w	8004f88 <_dtoa_r+0x538>
 8004e54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	4b4a      	ldr	r3, [pc, #296]	@ (8004f84 <_dtoa_r+0x534>)
 8004e5c:	f7fb f98e 	bl	800017c <__aeabi_dsub>
 8004e60:	4602      	mov	r2, r0
 8004e62:	460b      	mov	r3, r1
 8004e64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004e68:	462a      	mov	r2, r5
 8004e6a:	4633      	mov	r3, r6
 8004e6c:	f7fb fdce 	bl	8000a0c <__aeabi_dcmpgt>
 8004e70:	2800      	cmp	r0, #0
 8004e72:	f040 828e 	bne.w	8005392 <_dtoa_r+0x942>
 8004e76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e7a:	462a      	mov	r2, r5
 8004e7c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004e80:	f7fb fda6 	bl	80009d0 <__aeabi_dcmplt>
 8004e84:	2800      	cmp	r0, #0
 8004e86:	f040 8127 	bne.w	80050d8 <_dtoa_r+0x688>
 8004e8a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004e8e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004e92:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f2c0 8163 	blt.w	8005160 <_dtoa_r+0x710>
 8004e9a:	2f0e      	cmp	r7, #14
 8004e9c:	f300 8160 	bgt.w	8005160 <_dtoa_r+0x710>
 8004ea0:	4b33      	ldr	r3, [pc, #204]	@ (8004f70 <_dtoa_r+0x520>)
 8004ea2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004ea6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004eaa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004eae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	da03      	bge.n	8004ebc <_dtoa_r+0x46c>
 8004eb4:	9b07      	ldr	r3, [sp, #28]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	f340 8100 	ble.w	80050bc <_dtoa_r+0x66c>
 8004ebc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004ec0:	4656      	mov	r6, sl
 8004ec2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ec6:	4620      	mov	r0, r4
 8004ec8:	4629      	mov	r1, r5
 8004eca:	f7fb fc39 	bl	8000740 <__aeabi_ddiv>
 8004ece:	f7fb fdbd 	bl	8000a4c <__aeabi_d2iz>
 8004ed2:	4680      	mov	r8, r0
 8004ed4:	f7fb faa0 	bl	8000418 <__aeabi_i2d>
 8004ed8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004edc:	f7fb fb06 	bl	80004ec <__aeabi_dmul>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	4620      	mov	r0, r4
 8004ee6:	4629      	mov	r1, r5
 8004ee8:	f7fb f948 	bl	800017c <__aeabi_dsub>
 8004eec:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004ef0:	9d07      	ldr	r5, [sp, #28]
 8004ef2:	f806 4b01 	strb.w	r4, [r6], #1
 8004ef6:	eba6 040a 	sub.w	r4, r6, sl
 8004efa:	42a5      	cmp	r5, r4
 8004efc:	4602      	mov	r2, r0
 8004efe:	460b      	mov	r3, r1
 8004f00:	f040 8116 	bne.w	8005130 <_dtoa_r+0x6e0>
 8004f04:	f7fb f93c 	bl	8000180 <__adddf3>
 8004f08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f0c:	4604      	mov	r4, r0
 8004f0e:	460d      	mov	r5, r1
 8004f10:	f7fb fd7c 	bl	8000a0c <__aeabi_dcmpgt>
 8004f14:	2800      	cmp	r0, #0
 8004f16:	f040 80f8 	bne.w	800510a <_dtoa_r+0x6ba>
 8004f1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f1e:	4620      	mov	r0, r4
 8004f20:	4629      	mov	r1, r5
 8004f22:	f7fb fd4b 	bl	80009bc <__aeabi_dcmpeq>
 8004f26:	b118      	cbz	r0, 8004f30 <_dtoa_r+0x4e0>
 8004f28:	f018 0f01 	tst.w	r8, #1
 8004f2c:	f040 80ed 	bne.w	800510a <_dtoa_r+0x6ba>
 8004f30:	4649      	mov	r1, r9
 8004f32:	4658      	mov	r0, fp
 8004f34:	f000 fc92 	bl	800585c <_Bfree>
 8004f38:	2300      	movs	r3, #0
 8004f3a:	7033      	strb	r3, [r6, #0]
 8004f3c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004f3e:	3701      	adds	r7, #1
 8004f40:	601f      	str	r7, [r3, #0]
 8004f42:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f000 8320 	beq.w	800558a <_dtoa_r+0xb3a>
 8004f4a:	601e      	str	r6, [r3, #0]
 8004f4c:	e31d      	b.n	800558a <_dtoa_r+0xb3a>
 8004f4e:	07e2      	lsls	r2, r4, #31
 8004f50:	d505      	bpl.n	8004f5e <_dtoa_r+0x50e>
 8004f52:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004f56:	f7fb fac9 	bl	80004ec <__aeabi_dmul>
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	3601      	adds	r6, #1
 8004f5e:	1064      	asrs	r4, r4, #1
 8004f60:	3508      	adds	r5, #8
 8004f62:	e73f      	b.n	8004de4 <_dtoa_r+0x394>
 8004f64:	2602      	movs	r6, #2
 8004f66:	e742      	b.n	8004dee <_dtoa_r+0x39e>
 8004f68:	9c07      	ldr	r4, [sp, #28]
 8004f6a:	9704      	str	r7, [sp, #16]
 8004f6c:	e761      	b.n	8004e32 <_dtoa_r+0x3e2>
 8004f6e:	bf00      	nop
 8004f70:	08006ba8 	.word	0x08006ba8
 8004f74:	08006b80 	.word	0x08006b80
 8004f78:	3ff00000 	.word	0x3ff00000
 8004f7c:	40240000 	.word	0x40240000
 8004f80:	401c0000 	.word	0x401c0000
 8004f84:	40140000 	.word	0x40140000
 8004f88:	4b70      	ldr	r3, [pc, #448]	@ (800514c <_dtoa_r+0x6fc>)
 8004f8a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004f8c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004f90:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004f94:	4454      	add	r4, sl
 8004f96:	2900      	cmp	r1, #0
 8004f98:	d045      	beq.n	8005026 <_dtoa_r+0x5d6>
 8004f9a:	2000      	movs	r0, #0
 8004f9c:	496c      	ldr	r1, [pc, #432]	@ (8005150 <_dtoa_r+0x700>)
 8004f9e:	f7fb fbcf 	bl	8000740 <__aeabi_ddiv>
 8004fa2:	4633      	mov	r3, r6
 8004fa4:	462a      	mov	r2, r5
 8004fa6:	f7fb f8e9 	bl	800017c <__aeabi_dsub>
 8004faa:	4656      	mov	r6, sl
 8004fac:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004fb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fb4:	f7fb fd4a 	bl	8000a4c <__aeabi_d2iz>
 8004fb8:	4605      	mov	r5, r0
 8004fba:	f7fb fa2d 	bl	8000418 <__aeabi_i2d>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fc6:	f7fb f8d9 	bl	800017c <__aeabi_dsub>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	460b      	mov	r3, r1
 8004fce:	3530      	adds	r5, #48	@ 0x30
 8004fd0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004fd4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004fd8:	f806 5b01 	strb.w	r5, [r6], #1
 8004fdc:	f7fb fcf8 	bl	80009d0 <__aeabi_dcmplt>
 8004fe0:	2800      	cmp	r0, #0
 8004fe2:	d163      	bne.n	80050ac <_dtoa_r+0x65c>
 8004fe4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004fe8:	2000      	movs	r0, #0
 8004fea:	495a      	ldr	r1, [pc, #360]	@ (8005154 <_dtoa_r+0x704>)
 8004fec:	f7fb f8c6 	bl	800017c <__aeabi_dsub>
 8004ff0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004ff4:	f7fb fcec 	bl	80009d0 <__aeabi_dcmplt>
 8004ff8:	2800      	cmp	r0, #0
 8004ffa:	f040 8087 	bne.w	800510c <_dtoa_r+0x6bc>
 8004ffe:	42a6      	cmp	r6, r4
 8005000:	f43f af43 	beq.w	8004e8a <_dtoa_r+0x43a>
 8005004:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005008:	2200      	movs	r2, #0
 800500a:	4b53      	ldr	r3, [pc, #332]	@ (8005158 <_dtoa_r+0x708>)
 800500c:	f7fb fa6e 	bl	80004ec <__aeabi_dmul>
 8005010:	2200      	movs	r2, #0
 8005012:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005016:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800501a:	4b4f      	ldr	r3, [pc, #316]	@ (8005158 <_dtoa_r+0x708>)
 800501c:	f7fb fa66 	bl	80004ec <__aeabi_dmul>
 8005020:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005024:	e7c4      	b.n	8004fb0 <_dtoa_r+0x560>
 8005026:	4631      	mov	r1, r6
 8005028:	4628      	mov	r0, r5
 800502a:	f7fb fa5f 	bl	80004ec <__aeabi_dmul>
 800502e:	4656      	mov	r6, sl
 8005030:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005034:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005036:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800503a:	f7fb fd07 	bl	8000a4c <__aeabi_d2iz>
 800503e:	4605      	mov	r5, r0
 8005040:	f7fb f9ea 	bl	8000418 <__aeabi_i2d>
 8005044:	4602      	mov	r2, r0
 8005046:	460b      	mov	r3, r1
 8005048:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800504c:	f7fb f896 	bl	800017c <__aeabi_dsub>
 8005050:	4602      	mov	r2, r0
 8005052:	460b      	mov	r3, r1
 8005054:	3530      	adds	r5, #48	@ 0x30
 8005056:	f806 5b01 	strb.w	r5, [r6], #1
 800505a:	42a6      	cmp	r6, r4
 800505c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005060:	f04f 0200 	mov.w	r2, #0
 8005064:	d124      	bne.n	80050b0 <_dtoa_r+0x660>
 8005066:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800506a:	4b39      	ldr	r3, [pc, #228]	@ (8005150 <_dtoa_r+0x700>)
 800506c:	f7fb f888 	bl	8000180 <__adddf3>
 8005070:	4602      	mov	r2, r0
 8005072:	460b      	mov	r3, r1
 8005074:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005078:	f7fb fcc8 	bl	8000a0c <__aeabi_dcmpgt>
 800507c:	2800      	cmp	r0, #0
 800507e:	d145      	bne.n	800510c <_dtoa_r+0x6bc>
 8005080:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005084:	2000      	movs	r0, #0
 8005086:	4932      	ldr	r1, [pc, #200]	@ (8005150 <_dtoa_r+0x700>)
 8005088:	f7fb f878 	bl	800017c <__aeabi_dsub>
 800508c:	4602      	mov	r2, r0
 800508e:	460b      	mov	r3, r1
 8005090:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005094:	f7fb fc9c 	bl	80009d0 <__aeabi_dcmplt>
 8005098:	2800      	cmp	r0, #0
 800509a:	f43f aef6 	beq.w	8004e8a <_dtoa_r+0x43a>
 800509e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80050a0:	1e73      	subs	r3, r6, #1
 80050a2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80050a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80050a8:	2b30      	cmp	r3, #48	@ 0x30
 80050aa:	d0f8      	beq.n	800509e <_dtoa_r+0x64e>
 80050ac:	9f04      	ldr	r7, [sp, #16]
 80050ae:	e73f      	b.n	8004f30 <_dtoa_r+0x4e0>
 80050b0:	4b29      	ldr	r3, [pc, #164]	@ (8005158 <_dtoa_r+0x708>)
 80050b2:	f7fb fa1b 	bl	80004ec <__aeabi_dmul>
 80050b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050ba:	e7bc      	b.n	8005036 <_dtoa_r+0x5e6>
 80050bc:	d10c      	bne.n	80050d8 <_dtoa_r+0x688>
 80050be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050c2:	2200      	movs	r2, #0
 80050c4:	4b25      	ldr	r3, [pc, #148]	@ (800515c <_dtoa_r+0x70c>)
 80050c6:	f7fb fa11 	bl	80004ec <__aeabi_dmul>
 80050ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050ce:	f7fb fc93 	bl	80009f8 <__aeabi_dcmpge>
 80050d2:	2800      	cmp	r0, #0
 80050d4:	f000 815b 	beq.w	800538e <_dtoa_r+0x93e>
 80050d8:	2400      	movs	r4, #0
 80050da:	4625      	mov	r5, r4
 80050dc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80050de:	4656      	mov	r6, sl
 80050e0:	43db      	mvns	r3, r3
 80050e2:	9304      	str	r3, [sp, #16]
 80050e4:	2700      	movs	r7, #0
 80050e6:	4621      	mov	r1, r4
 80050e8:	4658      	mov	r0, fp
 80050ea:	f000 fbb7 	bl	800585c <_Bfree>
 80050ee:	2d00      	cmp	r5, #0
 80050f0:	d0dc      	beq.n	80050ac <_dtoa_r+0x65c>
 80050f2:	b12f      	cbz	r7, 8005100 <_dtoa_r+0x6b0>
 80050f4:	42af      	cmp	r7, r5
 80050f6:	d003      	beq.n	8005100 <_dtoa_r+0x6b0>
 80050f8:	4639      	mov	r1, r7
 80050fa:	4658      	mov	r0, fp
 80050fc:	f000 fbae 	bl	800585c <_Bfree>
 8005100:	4629      	mov	r1, r5
 8005102:	4658      	mov	r0, fp
 8005104:	f000 fbaa 	bl	800585c <_Bfree>
 8005108:	e7d0      	b.n	80050ac <_dtoa_r+0x65c>
 800510a:	9704      	str	r7, [sp, #16]
 800510c:	4633      	mov	r3, r6
 800510e:	461e      	mov	r6, r3
 8005110:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005114:	2a39      	cmp	r2, #57	@ 0x39
 8005116:	d107      	bne.n	8005128 <_dtoa_r+0x6d8>
 8005118:	459a      	cmp	sl, r3
 800511a:	d1f8      	bne.n	800510e <_dtoa_r+0x6be>
 800511c:	9a04      	ldr	r2, [sp, #16]
 800511e:	3201      	adds	r2, #1
 8005120:	9204      	str	r2, [sp, #16]
 8005122:	2230      	movs	r2, #48	@ 0x30
 8005124:	f88a 2000 	strb.w	r2, [sl]
 8005128:	781a      	ldrb	r2, [r3, #0]
 800512a:	3201      	adds	r2, #1
 800512c:	701a      	strb	r2, [r3, #0]
 800512e:	e7bd      	b.n	80050ac <_dtoa_r+0x65c>
 8005130:	2200      	movs	r2, #0
 8005132:	4b09      	ldr	r3, [pc, #36]	@ (8005158 <_dtoa_r+0x708>)
 8005134:	f7fb f9da 	bl	80004ec <__aeabi_dmul>
 8005138:	2200      	movs	r2, #0
 800513a:	2300      	movs	r3, #0
 800513c:	4604      	mov	r4, r0
 800513e:	460d      	mov	r5, r1
 8005140:	f7fb fc3c 	bl	80009bc <__aeabi_dcmpeq>
 8005144:	2800      	cmp	r0, #0
 8005146:	f43f aebc 	beq.w	8004ec2 <_dtoa_r+0x472>
 800514a:	e6f1      	b.n	8004f30 <_dtoa_r+0x4e0>
 800514c:	08006ba8 	.word	0x08006ba8
 8005150:	3fe00000 	.word	0x3fe00000
 8005154:	3ff00000 	.word	0x3ff00000
 8005158:	40240000 	.word	0x40240000
 800515c:	40140000 	.word	0x40140000
 8005160:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005162:	2a00      	cmp	r2, #0
 8005164:	f000 80db 	beq.w	800531e <_dtoa_r+0x8ce>
 8005168:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800516a:	2a01      	cmp	r2, #1
 800516c:	f300 80bf 	bgt.w	80052ee <_dtoa_r+0x89e>
 8005170:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005172:	2a00      	cmp	r2, #0
 8005174:	f000 80b7 	beq.w	80052e6 <_dtoa_r+0x896>
 8005178:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800517c:	4646      	mov	r6, r8
 800517e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005180:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005182:	2101      	movs	r1, #1
 8005184:	441a      	add	r2, r3
 8005186:	4658      	mov	r0, fp
 8005188:	4498      	add	r8, r3
 800518a:	9209      	str	r2, [sp, #36]	@ 0x24
 800518c:	f000 fc1a 	bl	80059c4 <__i2b>
 8005190:	4605      	mov	r5, r0
 8005192:	b15e      	cbz	r6, 80051ac <_dtoa_r+0x75c>
 8005194:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005196:	2b00      	cmp	r3, #0
 8005198:	dd08      	ble.n	80051ac <_dtoa_r+0x75c>
 800519a:	42b3      	cmp	r3, r6
 800519c:	bfa8      	it	ge
 800519e:	4633      	movge	r3, r6
 80051a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80051a2:	eba8 0803 	sub.w	r8, r8, r3
 80051a6:	1af6      	subs	r6, r6, r3
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80051ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051ae:	b1f3      	cbz	r3, 80051ee <_dtoa_r+0x79e>
 80051b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	f000 80b7 	beq.w	8005326 <_dtoa_r+0x8d6>
 80051b8:	b18c      	cbz	r4, 80051de <_dtoa_r+0x78e>
 80051ba:	4629      	mov	r1, r5
 80051bc:	4622      	mov	r2, r4
 80051be:	4658      	mov	r0, fp
 80051c0:	f000 fcbe 	bl	8005b40 <__pow5mult>
 80051c4:	464a      	mov	r2, r9
 80051c6:	4601      	mov	r1, r0
 80051c8:	4605      	mov	r5, r0
 80051ca:	4658      	mov	r0, fp
 80051cc:	f000 fc10 	bl	80059f0 <__multiply>
 80051d0:	4649      	mov	r1, r9
 80051d2:	9004      	str	r0, [sp, #16]
 80051d4:	4658      	mov	r0, fp
 80051d6:	f000 fb41 	bl	800585c <_Bfree>
 80051da:	9b04      	ldr	r3, [sp, #16]
 80051dc:	4699      	mov	r9, r3
 80051de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051e0:	1b1a      	subs	r2, r3, r4
 80051e2:	d004      	beq.n	80051ee <_dtoa_r+0x79e>
 80051e4:	4649      	mov	r1, r9
 80051e6:	4658      	mov	r0, fp
 80051e8:	f000 fcaa 	bl	8005b40 <__pow5mult>
 80051ec:	4681      	mov	r9, r0
 80051ee:	2101      	movs	r1, #1
 80051f0:	4658      	mov	r0, fp
 80051f2:	f000 fbe7 	bl	80059c4 <__i2b>
 80051f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80051f8:	4604      	mov	r4, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f000 81c9 	beq.w	8005592 <_dtoa_r+0xb42>
 8005200:	461a      	mov	r2, r3
 8005202:	4601      	mov	r1, r0
 8005204:	4658      	mov	r0, fp
 8005206:	f000 fc9b 	bl	8005b40 <__pow5mult>
 800520a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800520c:	4604      	mov	r4, r0
 800520e:	2b01      	cmp	r3, #1
 8005210:	f300 808f 	bgt.w	8005332 <_dtoa_r+0x8e2>
 8005214:	9b02      	ldr	r3, [sp, #8]
 8005216:	2b00      	cmp	r3, #0
 8005218:	f040 8087 	bne.w	800532a <_dtoa_r+0x8da>
 800521c:	9b03      	ldr	r3, [sp, #12]
 800521e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005222:	2b00      	cmp	r3, #0
 8005224:	f040 8083 	bne.w	800532e <_dtoa_r+0x8de>
 8005228:	9b03      	ldr	r3, [sp, #12]
 800522a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800522e:	0d1b      	lsrs	r3, r3, #20
 8005230:	051b      	lsls	r3, r3, #20
 8005232:	b12b      	cbz	r3, 8005240 <_dtoa_r+0x7f0>
 8005234:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005236:	f108 0801 	add.w	r8, r8, #1
 800523a:	3301      	adds	r3, #1
 800523c:	9309      	str	r3, [sp, #36]	@ 0x24
 800523e:	2301      	movs	r3, #1
 8005240:	930a      	str	r3, [sp, #40]	@ 0x28
 8005242:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 81aa 	beq.w	800559e <_dtoa_r+0xb4e>
 800524a:	6923      	ldr	r3, [r4, #16]
 800524c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005250:	6918      	ldr	r0, [r3, #16]
 8005252:	f000 fb6b 	bl	800592c <__hi0bits>
 8005256:	f1c0 0020 	rsb	r0, r0, #32
 800525a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800525c:	4418      	add	r0, r3
 800525e:	f010 001f 	ands.w	r0, r0, #31
 8005262:	d071      	beq.n	8005348 <_dtoa_r+0x8f8>
 8005264:	f1c0 0320 	rsb	r3, r0, #32
 8005268:	2b04      	cmp	r3, #4
 800526a:	dd65      	ble.n	8005338 <_dtoa_r+0x8e8>
 800526c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800526e:	f1c0 001c 	rsb	r0, r0, #28
 8005272:	4403      	add	r3, r0
 8005274:	4480      	add	r8, r0
 8005276:	4406      	add	r6, r0
 8005278:	9309      	str	r3, [sp, #36]	@ 0x24
 800527a:	f1b8 0f00 	cmp.w	r8, #0
 800527e:	dd05      	ble.n	800528c <_dtoa_r+0x83c>
 8005280:	4649      	mov	r1, r9
 8005282:	4642      	mov	r2, r8
 8005284:	4658      	mov	r0, fp
 8005286:	f000 fcb5 	bl	8005bf4 <__lshift>
 800528a:	4681      	mov	r9, r0
 800528c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800528e:	2b00      	cmp	r3, #0
 8005290:	dd05      	ble.n	800529e <_dtoa_r+0x84e>
 8005292:	4621      	mov	r1, r4
 8005294:	461a      	mov	r2, r3
 8005296:	4658      	mov	r0, fp
 8005298:	f000 fcac 	bl	8005bf4 <__lshift>
 800529c:	4604      	mov	r4, r0
 800529e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d053      	beq.n	800534c <_dtoa_r+0x8fc>
 80052a4:	4621      	mov	r1, r4
 80052a6:	4648      	mov	r0, r9
 80052a8:	f000 fd10 	bl	8005ccc <__mcmp>
 80052ac:	2800      	cmp	r0, #0
 80052ae:	da4d      	bge.n	800534c <_dtoa_r+0x8fc>
 80052b0:	1e7b      	subs	r3, r7, #1
 80052b2:	4649      	mov	r1, r9
 80052b4:	9304      	str	r3, [sp, #16]
 80052b6:	220a      	movs	r2, #10
 80052b8:	2300      	movs	r3, #0
 80052ba:	4658      	mov	r0, fp
 80052bc:	f000 faf0 	bl	80058a0 <__multadd>
 80052c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80052c2:	4681      	mov	r9, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 816c 	beq.w	80055a2 <_dtoa_r+0xb52>
 80052ca:	2300      	movs	r3, #0
 80052cc:	4629      	mov	r1, r5
 80052ce:	220a      	movs	r2, #10
 80052d0:	4658      	mov	r0, fp
 80052d2:	f000 fae5 	bl	80058a0 <__multadd>
 80052d6:	9b08      	ldr	r3, [sp, #32]
 80052d8:	4605      	mov	r5, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	dc61      	bgt.n	80053a2 <_dtoa_r+0x952>
 80052de:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	dc3b      	bgt.n	800535c <_dtoa_r+0x90c>
 80052e4:	e05d      	b.n	80053a2 <_dtoa_r+0x952>
 80052e6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80052e8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80052ec:	e746      	b.n	800517c <_dtoa_r+0x72c>
 80052ee:	9b07      	ldr	r3, [sp, #28]
 80052f0:	1e5c      	subs	r4, r3, #1
 80052f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80052f4:	42a3      	cmp	r3, r4
 80052f6:	bfbf      	itttt	lt
 80052f8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80052fa:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80052fc:	1ae3      	sublt	r3, r4, r3
 80052fe:	18d2      	addlt	r2, r2, r3
 8005300:	bfa8      	it	ge
 8005302:	1b1c      	subge	r4, r3, r4
 8005304:	9b07      	ldr	r3, [sp, #28]
 8005306:	bfbe      	ittt	lt
 8005308:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800530a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800530c:	2400      	movlt	r4, #0
 800530e:	2b00      	cmp	r3, #0
 8005310:	bfb5      	itete	lt
 8005312:	eba8 0603 	sublt.w	r6, r8, r3
 8005316:	4646      	movge	r6, r8
 8005318:	2300      	movlt	r3, #0
 800531a:	9b07      	ldrge	r3, [sp, #28]
 800531c:	e730      	b.n	8005180 <_dtoa_r+0x730>
 800531e:	4646      	mov	r6, r8
 8005320:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005322:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005324:	e735      	b.n	8005192 <_dtoa_r+0x742>
 8005326:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005328:	e75c      	b.n	80051e4 <_dtoa_r+0x794>
 800532a:	2300      	movs	r3, #0
 800532c:	e788      	b.n	8005240 <_dtoa_r+0x7f0>
 800532e:	9b02      	ldr	r3, [sp, #8]
 8005330:	e786      	b.n	8005240 <_dtoa_r+0x7f0>
 8005332:	2300      	movs	r3, #0
 8005334:	930a      	str	r3, [sp, #40]	@ 0x28
 8005336:	e788      	b.n	800524a <_dtoa_r+0x7fa>
 8005338:	d09f      	beq.n	800527a <_dtoa_r+0x82a>
 800533a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800533c:	331c      	adds	r3, #28
 800533e:	441a      	add	r2, r3
 8005340:	4498      	add	r8, r3
 8005342:	441e      	add	r6, r3
 8005344:	9209      	str	r2, [sp, #36]	@ 0x24
 8005346:	e798      	b.n	800527a <_dtoa_r+0x82a>
 8005348:	4603      	mov	r3, r0
 800534a:	e7f6      	b.n	800533a <_dtoa_r+0x8ea>
 800534c:	9b07      	ldr	r3, [sp, #28]
 800534e:	9704      	str	r7, [sp, #16]
 8005350:	2b00      	cmp	r3, #0
 8005352:	dc20      	bgt.n	8005396 <_dtoa_r+0x946>
 8005354:	9308      	str	r3, [sp, #32]
 8005356:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005358:	2b02      	cmp	r3, #2
 800535a:	dd1e      	ble.n	800539a <_dtoa_r+0x94a>
 800535c:	9b08      	ldr	r3, [sp, #32]
 800535e:	2b00      	cmp	r3, #0
 8005360:	f47f aebc 	bne.w	80050dc <_dtoa_r+0x68c>
 8005364:	4621      	mov	r1, r4
 8005366:	2205      	movs	r2, #5
 8005368:	4658      	mov	r0, fp
 800536a:	f000 fa99 	bl	80058a0 <__multadd>
 800536e:	4601      	mov	r1, r0
 8005370:	4604      	mov	r4, r0
 8005372:	4648      	mov	r0, r9
 8005374:	f000 fcaa 	bl	8005ccc <__mcmp>
 8005378:	2800      	cmp	r0, #0
 800537a:	f77f aeaf 	ble.w	80050dc <_dtoa_r+0x68c>
 800537e:	2331      	movs	r3, #49	@ 0x31
 8005380:	4656      	mov	r6, sl
 8005382:	f806 3b01 	strb.w	r3, [r6], #1
 8005386:	9b04      	ldr	r3, [sp, #16]
 8005388:	3301      	adds	r3, #1
 800538a:	9304      	str	r3, [sp, #16]
 800538c:	e6aa      	b.n	80050e4 <_dtoa_r+0x694>
 800538e:	9c07      	ldr	r4, [sp, #28]
 8005390:	9704      	str	r7, [sp, #16]
 8005392:	4625      	mov	r5, r4
 8005394:	e7f3      	b.n	800537e <_dtoa_r+0x92e>
 8005396:	9b07      	ldr	r3, [sp, #28]
 8005398:	9308      	str	r3, [sp, #32]
 800539a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800539c:	2b00      	cmp	r3, #0
 800539e:	f000 8104 	beq.w	80055aa <_dtoa_r+0xb5a>
 80053a2:	2e00      	cmp	r6, #0
 80053a4:	dd05      	ble.n	80053b2 <_dtoa_r+0x962>
 80053a6:	4629      	mov	r1, r5
 80053a8:	4632      	mov	r2, r6
 80053aa:	4658      	mov	r0, fp
 80053ac:	f000 fc22 	bl	8005bf4 <__lshift>
 80053b0:	4605      	mov	r5, r0
 80053b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d05a      	beq.n	800546e <_dtoa_r+0xa1e>
 80053b8:	4658      	mov	r0, fp
 80053ba:	6869      	ldr	r1, [r5, #4]
 80053bc:	f000 fa0e 	bl	80057dc <_Balloc>
 80053c0:	4606      	mov	r6, r0
 80053c2:	b928      	cbnz	r0, 80053d0 <_dtoa_r+0x980>
 80053c4:	4602      	mov	r2, r0
 80053c6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80053ca:	4b83      	ldr	r3, [pc, #524]	@ (80055d8 <_dtoa_r+0xb88>)
 80053cc:	f7ff bb54 	b.w	8004a78 <_dtoa_r+0x28>
 80053d0:	692a      	ldr	r2, [r5, #16]
 80053d2:	f105 010c 	add.w	r1, r5, #12
 80053d6:	3202      	adds	r2, #2
 80053d8:	0092      	lsls	r2, r2, #2
 80053da:	300c      	adds	r0, #12
 80053dc:	f000 ffa8 	bl	8006330 <memcpy>
 80053e0:	2201      	movs	r2, #1
 80053e2:	4631      	mov	r1, r6
 80053e4:	4658      	mov	r0, fp
 80053e6:	f000 fc05 	bl	8005bf4 <__lshift>
 80053ea:	462f      	mov	r7, r5
 80053ec:	4605      	mov	r5, r0
 80053ee:	f10a 0301 	add.w	r3, sl, #1
 80053f2:	9307      	str	r3, [sp, #28]
 80053f4:	9b08      	ldr	r3, [sp, #32]
 80053f6:	4453      	add	r3, sl
 80053f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80053fa:	9b02      	ldr	r3, [sp, #8]
 80053fc:	f003 0301 	and.w	r3, r3, #1
 8005400:	930a      	str	r3, [sp, #40]	@ 0x28
 8005402:	9b07      	ldr	r3, [sp, #28]
 8005404:	4621      	mov	r1, r4
 8005406:	3b01      	subs	r3, #1
 8005408:	4648      	mov	r0, r9
 800540a:	9302      	str	r3, [sp, #8]
 800540c:	f7ff fa95 	bl	800493a <quorem>
 8005410:	4639      	mov	r1, r7
 8005412:	9008      	str	r0, [sp, #32]
 8005414:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005418:	4648      	mov	r0, r9
 800541a:	f000 fc57 	bl	8005ccc <__mcmp>
 800541e:	462a      	mov	r2, r5
 8005420:	9009      	str	r0, [sp, #36]	@ 0x24
 8005422:	4621      	mov	r1, r4
 8005424:	4658      	mov	r0, fp
 8005426:	f000 fc6d 	bl	8005d04 <__mdiff>
 800542a:	68c2      	ldr	r2, [r0, #12]
 800542c:	4606      	mov	r6, r0
 800542e:	bb02      	cbnz	r2, 8005472 <_dtoa_r+0xa22>
 8005430:	4601      	mov	r1, r0
 8005432:	4648      	mov	r0, r9
 8005434:	f000 fc4a 	bl	8005ccc <__mcmp>
 8005438:	4602      	mov	r2, r0
 800543a:	4631      	mov	r1, r6
 800543c:	4658      	mov	r0, fp
 800543e:	920c      	str	r2, [sp, #48]	@ 0x30
 8005440:	f000 fa0c 	bl	800585c <_Bfree>
 8005444:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005446:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005448:	9e07      	ldr	r6, [sp, #28]
 800544a:	ea43 0102 	orr.w	r1, r3, r2
 800544e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005450:	4319      	orrs	r1, r3
 8005452:	d110      	bne.n	8005476 <_dtoa_r+0xa26>
 8005454:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005458:	d029      	beq.n	80054ae <_dtoa_r+0xa5e>
 800545a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800545c:	2b00      	cmp	r3, #0
 800545e:	dd02      	ble.n	8005466 <_dtoa_r+0xa16>
 8005460:	9b08      	ldr	r3, [sp, #32]
 8005462:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005466:	9b02      	ldr	r3, [sp, #8]
 8005468:	f883 8000 	strb.w	r8, [r3]
 800546c:	e63b      	b.n	80050e6 <_dtoa_r+0x696>
 800546e:	4628      	mov	r0, r5
 8005470:	e7bb      	b.n	80053ea <_dtoa_r+0x99a>
 8005472:	2201      	movs	r2, #1
 8005474:	e7e1      	b.n	800543a <_dtoa_r+0x9ea>
 8005476:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005478:	2b00      	cmp	r3, #0
 800547a:	db04      	blt.n	8005486 <_dtoa_r+0xa36>
 800547c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800547e:	430b      	orrs	r3, r1
 8005480:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005482:	430b      	orrs	r3, r1
 8005484:	d120      	bne.n	80054c8 <_dtoa_r+0xa78>
 8005486:	2a00      	cmp	r2, #0
 8005488:	dded      	ble.n	8005466 <_dtoa_r+0xa16>
 800548a:	4649      	mov	r1, r9
 800548c:	2201      	movs	r2, #1
 800548e:	4658      	mov	r0, fp
 8005490:	f000 fbb0 	bl	8005bf4 <__lshift>
 8005494:	4621      	mov	r1, r4
 8005496:	4681      	mov	r9, r0
 8005498:	f000 fc18 	bl	8005ccc <__mcmp>
 800549c:	2800      	cmp	r0, #0
 800549e:	dc03      	bgt.n	80054a8 <_dtoa_r+0xa58>
 80054a0:	d1e1      	bne.n	8005466 <_dtoa_r+0xa16>
 80054a2:	f018 0f01 	tst.w	r8, #1
 80054a6:	d0de      	beq.n	8005466 <_dtoa_r+0xa16>
 80054a8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80054ac:	d1d8      	bne.n	8005460 <_dtoa_r+0xa10>
 80054ae:	2339      	movs	r3, #57	@ 0x39
 80054b0:	9a02      	ldr	r2, [sp, #8]
 80054b2:	7013      	strb	r3, [r2, #0]
 80054b4:	4633      	mov	r3, r6
 80054b6:	461e      	mov	r6, r3
 80054b8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80054bc:	3b01      	subs	r3, #1
 80054be:	2a39      	cmp	r2, #57	@ 0x39
 80054c0:	d052      	beq.n	8005568 <_dtoa_r+0xb18>
 80054c2:	3201      	adds	r2, #1
 80054c4:	701a      	strb	r2, [r3, #0]
 80054c6:	e60e      	b.n	80050e6 <_dtoa_r+0x696>
 80054c8:	2a00      	cmp	r2, #0
 80054ca:	dd07      	ble.n	80054dc <_dtoa_r+0xa8c>
 80054cc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80054d0:	d0ed      	beq.n	80054ae <_dtoa_r+0xa5e>
 80054d2:	9a02      	ldr	r2, [sp, #8]
 80054d4:	f108 0301 	add.w	r3, r8, #1
 80054d8:	7013      	strb	r3, [r2, #0]
 80054da:	e604      	b.n	80050e6 <_dtoa_r+0x696>
 80054dc:	9b07      	ldr	r3, [sp, #28]
 80054de:	9a07      	ldr	r2, [sp, #28]
 80054e0:	f803 8c01 	strb.w	r8, [r3, #-1]
 80054e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d028      	beq.n	800553c <_dtoa_r+0xaec>
 80054ea:	4649      	mov	r1, r9
 80054ec:	2300      	movs	r3, #0
 80054ee:	220a      	movs	r2, #10
 80054f0:	4658      	mov	r0, fp
 80054f2:	f000 f9d5 	bl	80058a0 <__multadd>
 80054f6:	42af      	cmp	r7, r5
 80054f8:	4681      	mov	r9, r0
 80054fa:	f04f 0300 	mov.w	r3, #0
 80054fe:	f04f 020a 	mov.w	r2, #10
 8005502:	4639      	mov	r1, r7
 8005504:	4658      	mov	r0, fp
 8005506:	d107      	bne.n	8005518 <_dtoa_r+0xac8>
 8005508:	f000 f9ca 	bl	80058a0 <__multadd>
 800550c:	4607      	mov	r7, r0
 800550e:	4605      	mov	r5, r0
 8005510:	9b07      	ldr	r3, [sp, #28]
 8005512:	3301      	adds	r3, #1
 8005514:	9307      	str	r3, [sp, #28]
 8005516:	e774      	b.n	8005402 <_dtoa_r+0x9b2>
 8005518:	f000 f9c2 	bl	80058a0 <__multadd>
 800551c:	4629      	mov	r1, r5
 800551e:	4607      	mov	r7, r0
 8005520:	2300      	movs	r3, #0
 8005522:	220a      	movs	r2, #10
 8005524:	4658      	mov	r0, fp
 8005526:	f000 f9bb 	bl	80058a0 <__multadd>
 800552a:	4605      	mov	r5, r0
 800552c:	e7f0      	b.n	8005510 <_dtoa_r+0xac0>
 800552e:	9b08      	ldr	r3, [sp, #32]
 8005530:	2700      	movs	r7, #0
 8005532:	2b00      	cmp	r3, #0
 8005534:	bfcc      	ite	gt
 8005536:	461e      	movgt	r6, r3
 8005538:	2601      	movle	r6, #1
 800553a:	4456      	add	r6, sl
 800553c:	4649      	mov	r1, r9
 800553e:	2201      	movs	r2, #1
 8005540:	4658      	mov	r0, fp
 8005542:	f000 fb57 	bl	8005bf4 <__lshift>
 8005546:	4621      	mov	r1, r4
 8005548:	4681      	mov	r9, r0
 800554a:	f000 fbbf 	bl	8005ccc <__mcmp>
 800554e:	2800      	cmp	r0, #0
 8005550:	dcb0      	bgt.n	80054b4 <_dtoa_r+0xa64>
 8005552:	d102      	bne.n	800555a <_dtoa_r+0xb0a>
 8005554:	f018 0f01 	tst.w	r8, #1
 8005558:	d1ac      	bne.n	80054b4 <_dtoa_r+0xa64>
 800555a:	4633      	mov	r3, r6
 800555c:	461e      	mov	r6, r3
 800555e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005562:	2a30      	cmp	r2, #48	@ 0x30
 8005564:	d0fa      	beq.n	800555c <_dtoa_r+0xb0c>
 8005566:	e5be      	b.n	80050e6 <_dtoa_r+0x696>
 8005568:	459a      	cmp	sl, r3
 800556a:	d1a4      	bne.n	80054b6 <_dtoa_r+0xa66>
 800556c:	9b04      	ldr	r3, [sp, #16]
 800556e:	3301      	adds	r3, #1
 8005570:	9304      	str	r3, [sp, #16]
 8005572:	2331      	movs	r3, #49	@ 0x31
 8005574:	f88a 3000 	strb.w	r3, [sl]
 8005578:	e5b5      	b.n	80050e6 <_dtoa_r+0x696>
 800557a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800557c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80055dc <_dtoa_r+0xb8c>
 8005580:	b11b      	cbz	r3, 800558a <_dtoa_r+0xb3a>
 8005582:	f10a 0308 	add.w	r3, sl, #8
 8005586:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005588:	6013      	str	r3, [r2, #0]
 800558a:	4650      	mov	r0, sl
 800558c:	b017      	add	sp, #92	@ 0x5c
 800558e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005592:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005594:	2b01      	cmp	r3, #1
 8005596:	f77f ae3d 	ble.w	8005214 <_dtoa_r+0x7c4>
 800559a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800559c:	930a      	str	r3, [sp, #40]	@ 0x28
 800559e:	2001      	movs	r0, #1
 80055a0:	e65b      	b.n	800525a <_dtoa_r+0x80a>
 80055a2:	9b08      	ldr	r3, [sp, #32]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f77f aed6 	ble.w	8005356 <_dtoa_r+0x906>
 80055aa:	4656      	mov	r6, sl
 80055ac:	4621      	mov	r1, r4
 80055ae:	4648      	mov	r0, r9
 80055b0:	f7ff f9c3 	bl	800493a <quorem>
 80055b4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80055b8:	9b08      	ldr	r3, [sp, #32]
 80055ba:	f806 8b01 	strb.w	r8, [r6], #1
 80055be:	eba6 020a 	sub.w	r2, r6, sl
 80055c2:	4293      	cmp	r3, r2
 80055c4:	ddb3      	ble.n	800552e <_dtoa_r+0xade>
 80055c6:	4649      	mov	r1, r9
 80055c8:	2300      	movs	r3, #0
 80055ca:	220a      	movs	r2, #10
 80055cc:	4658      	mov	r0, fp
 80055ce:	f000 f967 	bl	80058a0 <__multadd>
 80055d2:	4681      	mov	r9, r0
 80055d4:	e7ea      	b.n	80055ac <_dtoa_r+0xb5c>
 80055d6:	bf00      	nop
 80055d8:	08006b0a 	.word	0x08006b0a
 80055dc:	08006a8e 	.word	0x08006a8e

080055e0 <_free_r>:
 80055e0:	b538      	push	{r3, r4, r5, lr}
 80055e2:	4605      	mov	r5, r0
 80055e4:	2900      	cmp	r1, #0
 80055e6:	d040      	beq.n	800566a <_free_r+0x8a>
 80055e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055ec:	1f0c      	subs	r4, r1, #4
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	bfb8      	it	lt
 80055f2:	18e4      	addlt	r4, r4, r3
 80055f4:	f000 f8e6 	bl	80057c4 <__malloc_lock>
 80055f8:	4a1c      	ldr	r2, [pc, #112]	@ (800566c <_free_r+0x8c>)
 80055fa:	6813      	ldr	r3, [r2, #0]
 80055fc:	b933      	cbnz	r3, 800560c <_free_r+0x2c>
 80055fe:	6063      	str	r3, [r4, #4]
 8005600:	6014      	str	r4, [r2, #0]
 8005602:	4628      	mov	r0, r5
 8005604:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005608:	f000 b8e2 	b.w	80057d0 <__malloc_unlock>
 800560c:	42a3      	cmp	r3, r4
 800560e:	d908      	bls.n	8005622 <_free_r+0x42>
 8005610:	6820      	ldr	r0, [r4, #0]
 8005612:	1821      	adds	r1, r4, r0
 8005614:	428b      	cmp	r3, r1
 8005616:	bf01      	itttt	eq
 8005618:	6819      	ldreq	r1, [r3, #0]
 800561a:	685b      	ldreq	r3, [r3, #4]
 800561c:	1809      	addeq	r1, r1, r0
 800561e:	6021      	streq	r1, [r4, #0]
 8005620:	e7ed      	b.n	80055fe <_free_r+0x1e>
 8005622:	461a      	mov	r2, r3
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	b10b      	cbz	r3, 800562c <_free_r+0x4c>
 8005628:	42a3      	cmp	r3, r4
 800562a:	d9fa      	bls.n	8005622 <_free_r+0x42>
 800562c:	6811      	ldr	r1, [r2, #0]
 800562e:	1850      	adds	r0, r2, r1
 8005630:	42a0      	cmp	r0, r4
 8005632:	d10b      	bne.n	800564c <_free_r+0x6c>
 8005634:	6820      	ldr	r0, [r4, #0]
 8005636:	4401      	add	r1, r0
 8005638:	1850      	adds	r0, r2, r1
 800563a:	4283      	cmp	r3, r0
 800563c:	6011      	str	r1, [r2, #0]
 800563e:	d1e0      	bne.n	8005602 <_free_r+0x22>
 8005640:	6818      	ldr	r0, [r3, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	4408      	add	r0, r1
 8005646:	6010      	str	r0, [r2, #0]
 8005648:	6053      	str	r3, [r2, #4]
 800564a:	e7da      	b.n	8005602 <_free_r+0x22>
 800564c:	d902      	bls.n	8005654 <_free_r+0x74>
 800564e:	230c      	movs	r3, #12
 8005650:	602b      	str	r3, [r5, #0]
 8005652:	e7d6      	b.n	8005602 <_free_r+0x22>
 8005654:	6820      	ldr	r0, [r4, #0]
 8005656:	1821      	adds	r1, r4, r0
 8005658:	428b      	cmp	r3, r1
 800565a:	bf01      	itttt	eq
 800565c:	6819      	ldreq	r1, [r3, #0]
 800565e:	685b      	ldreq	r3, [r3, #4]
 8005660:	1809      	addeq	r1, r1, r0
 8005662:	6021      	streq	r1, [r4, #0]
 8005664:	6063      	str	r3, [r4, #4]
 8005666:	6054      	str	r4, [r2, #4]
 8005668:	e7cb      	b.n	8005602 <_free_r+0x22>
 800566a:	bd38      	pop	{r3, r4, r5, pc}
 800566c:	2000044c 	.word	0x2000044c

08005670 <malloc>:
 8005670:	4b02      	ldr	r3, [pc, #8]	@ (800567c <malloc+0xc>)
 8005672:	4601      	mov	r1, r0
 8005674:	6818      	ldr	r0, [r3, #0]
 8005676:	f000 b825 	b.w	80056c4 <_malloc_r>
 800567a:	bf00      	nop
 800567c:	20000018 	.word	0x20000018

08005680 <sbrk_aligned>:
 8005680:	b570      	push	{r4, r5, r6, lr}
 8005682:	4e0f      	ldr	r6, [pc, #60]	@ (80056c0 <sbrk_aligned+0x40>)
 8005684:	460c      	mov	r4, r1
 8005686:	6831      	ldr	r1, [r6, #0]
 8005688:	4605      	mov	r5, r0
 800568a:	b911      	cbnz	r1, 8005692 <sbrk_aligned+0x12>
 800568c:	f000 fe40 	bl	8006310 <_sbrk_r>
 8005690:	6030      	str	r0, [r6, #0]
 8005692:	4621      	mov	r1, r4
 8005694:	4628      	mov	r0, r5
 8005696:	f000 fe3b 	bl	8006310 <_sbrk_r>
 800569a:	1c43      	adds	r3, r0, #1
 800569c:	d103      	bne.n	80056a6 <sbrk_aligned+0x26>
 800569e:	f04f 34ff 	mov.w	r4, #4294967295
 80056a2:	4620      	mov	r0, r4
 80056a4:	bd70      	pop	{r4, r5, r6, pc}
 80056a6:	1cc4      	adds	r4, r0, #3
 80056a8:	f024 0403 	bic.w	r4, r4, #3
 80056ac:	42a0      	cmp	r0, r4
 80056ae:	d0f8      	beq.n	80056a2 <sbrk_aligned+0x22>
 80056b0:	1a21      	subs	r1, r4, r0
 80056b2:	4628      	mov	r0, r5
 80056b4:	f000 fe2c 	bl	8006310 <_sbrk_r>
 80056b8:	3001      	adds	r0, #1
 80056ba:	d1f2      	bne.n	80056a2 <sbrk_aligned+0x22>
 80056bc:	e7ef      	b.n	800569e <sbrk_aligned+0x1e>
 80056be:	bf00      	nop
 80056c0:	20000448 	.word	0x20000448

080056c4 <_malloc_r>:
 80056c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056c8:	1ccd      	adds	r5, r1, #3
 80056ca:	f025 0503 	bic.w	r5, r5, #3
 80056ce:	3508      	adds	r5, #8
 80056d0:	2d0c      	cmp	r5, #12
 80056d2:	bf38      	it	cc
 80056d4:	250c      	movcc	r5, #12
 80056d6:	2d00      	cmp	r5, #0
 80056d8:	4606      	mov	r6, r0
 80056da:	db01      	blt.n	80056e0 <_malloc_r+0x1c>
 80056dc:	42a9      	cmp	r1, r5
 80056de:	d904      	bls.n	80056ea <_malloc_r+0x26>
 80056e0:	230c      	movs	r3, #12
 80056e2:	6033      	str	r3, [r6, #0]
 80056e4:	2000      	movs	r0, #0
 80056e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80057c0 <_malloc_r+0xfc>
 80056ee:	f000 f869 	bl	80057c4 <__malloc_lock>
 80056f2:	f8d8 3000 	ldr.w	r3, [r8]
 80056f6:	461c      	mov	r4, r3
 80056f8:	bb44      	cbnz	r4, 800574c <_malloc_r+0x88>
 80056fa:	4629      	mov	r1, r5
 80056fc:	4630      	mov	r0, r6
 80056fe:	f7ff ffbf 	bl	8005680 <sbrk_aligned>
 8005702:	1c43      	adds	r3, r0, #1
 8005704:	4604      	mov	r4, r0
 8005706:	d158      	bne.n	80057ba <_malloc_r+0xf6>
 8005708:	f8d8 4000 	ldr.w	r4, [r8]
 800570c:	4627      	mov	r7, r4
 800570e:	2f00      	cmp	r7, #0
 8005710:	d143      	bne.n	800579a <_malloc_r+0xd6>
 8005712:	2c00      	cmp	r4, #0
 8005714:	d04b      	beq.n	80057ae <_malloc_r+0xea>
 8005716:	6823      	ldr	r3, [r4, #0]
 8005718:	4639      	mov	r1, r7
 800571a:	4630      	mov	r0, r6
 800571c:	eb04 0903 	add.w	r9, r4, r3
 8005720:	f000 fdf6 	bl	8006310 <_sbrk_r>
 8005724:	4581      	cmp	r9, r0
 8005726:	d142      	bne.n	80057ae <_malloc_r+0xea>
 8005728:	6821      	ldr	r1, [r4, #0]
 800572a:	4630      	mov	r0, r6
 800572c:	1a6d      	subs	r5, r5, r1
 800572e:	4629      	mov	r1, r5
 8005730:	f7ff ffa6 	bl	8005680 <sbrk_aligned>
 8005734:	3001      	adds	r0, #1
 8005736:	d03a      	beq.n	80057ae <_malloc_r+0xea>
 8005738:	6823      	ldr	r3, [r4, #0]
 800573a:	442b      	add	r3, r5
 800573c:	6023      	str	r3, [r4, #0]
 800573e:	f8d8 3000 	ldr.w	r3, [r8]
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	bb62      	cbnz	r2, 80057a0 <_malloc_r+0xdc>
 8005746:	f8c8 7000 	str.w	r7, [r8]
 800574a:	e00f      	b.n	800576c <_malloc_r+0xa8>
 800574c:	6822      	ldr	r2, [r4, #0]
 800574e:	1b52      	subs	r2, r2, r5
 8005750:	d420      	bmi.n	8005794 <_malloc_r+0xd0>
 8005752:	2a0b      	cmp	r2, #11
 8005754:	d917      	bls.n	8005786 <_malloc_r+0xc2>
 8005756:	1961      	adds	r1, r4, r5
 8005758:	42a3      	cmp	r3, r4
 800575a:	6025      	str	r5, [r4, #0]
 800575c:	bf18      	it	ne
 800575e:	6059      	strne	r1, [r3, #4]
 8005760:	6863      	ldr	r3, [r4, #4]
 8005762:	bf08      	it	eq
 8005764:	f8c8 1000 	streq.w	r1, [r8]
 8005768:	5162      	str	r2, [r4, r5]
 800576a:	604b      	str	r3, [r1, #4]
 800576c:	4630      	mov	r0, r6
 800576e:	f000 f82f 	bl	80057d0 <__malloc_unlock>
 8005772:	f104 000b 	add.w	r0, r4, #11
 8005776:	1d23      	adds	r3, r4, #4
 8005778:	f020 0007 	bic.w	r0, r0, #7
 800577c:	1ac2      	subs	r2, r0, r3
 800577e:	bf1c      	itt	ne
 8005780:	1a1b      	subne	r3, r3, r0
 8005782:	50a3      	strne	r3, [r4, r2]
 8005784:	e7af      	b.n	80056e6 <_malloc_r+0x22>
 8005786:	6862      	ldr	r2, [r4, #4]
 8005788:	42a3      	cmp	r3, r4
 800578a:	bf0c      	ite	eq
 800578c:	f8c8 2000 	streq.w	r2, [r8]
 8005790:	605a      	strne	r2, [r3, #4]
 8005792:	e7eb      	b.n	800576c <_malloc_r+0xa8>
 8005794:	4623      	mov	r3, r4
 8005796:	6864      	ldr	r4, [r4, #4]
 8005798:	e7ae      	b.n	80056f8 <_malloc_r+0x34>
 800579a:	463c      	mov	r4, r7
 800579c:	687f      	ldr	r7, [r7, #4]
 800579e:	e7b6      	b.n	800570e <_malloc_r+0x4a>
 80057a0:	461a      	mov	r2, r3
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	42a3      	cmp	r3, r4
 80057a6:	d1fb      	bne.n	80057a0 <_malloc_r+0xdc>
 80057a8:	2300      	movs	r3, #0
 80057aa:	6053      	str	r3, [r2, #4]
 80057ac:	e7de      	b.n	800576c <_malloc_r+0xa8>
 80057ae:	230c      	movs	r3, #12
 80057b0:	4630      	mov	r0, r6
 80057b2:	6033      	str	r3, [r6, #0]
 80057b4:	f000 f80c 	bl	80057d0 <__malloc_unlock>
 80057b8:	e794      	b.n	80056e4 <_malloc_r+0x20>
 80057ba:	6005      	str	r5, [r0, #0]
 80057bc:	e7d6      	b.n	800576c <_malloc_r+0xa8>
 80057be:	bf00      	nop
 80057c0:	2000044c 	.word	0x2000044c

080057c4 <__malloc_lock>:
 80057c4:	4801      	ldr	r0, [pc, #4]	@ (80057cc <__malloc_lock+0x8>)
 80057c6:	f7ff b8a8 	b.w	800491a <__retarget_lock_acquire_recursive>
 80057ca:	bf00      	nop
 80057cc:	20000444 	.word	0x20000444

080057d0 <__malloc_unlock>:
 80057d0:	4801      	ldr	r0, [pc, #4]	@ (80057d8 <__malloc_unlock+0x8>)
 80057d2:	f7ff b8a3 	b.w	800491c <__retarget_lock_release_recursive>
 80057d6:	bf00      	nop
 80057d8:	20000444 	.word	0x20000444

080057dc <_Balloc>:
 80057dc:	b570      	push	{r4, r5, r6, lr}
 80057de:	69c6      	ldr	r6, [r0, #28]
 80057e0:	4604      	mov	r4, r0
 80057e2:	460d      	mov	r5, r1
 80057e4:	b976      	cbnz	r6, 8005804 <_Balloc+0x28>
 80057e6:	2010      	movs	r0, #16
 80057e8:	f7ff ff42 	bl	8005670 <malloc>
 80057ec:	4602      	mov	r2, r0
 80057ee:	61e0      	str	r0, [r4, #28]
 80057f0:	b920      	cbnz	r0, 80057fc <_Balloc+0x20>
 80057f2:	216b      	movs	r1, #107	@ 0x6b
 80057f4:	4b17      	ldr	r3, [pc, #92]	@ (8005854 <_Balloc+0x78>)
 80057f6:	4818      	ldr	r0, [pc, #96]	@ (8005858 <_Balloc+0x7c>)
 80057f8:	f000 fda8 	bl	800634c <__assert_func>
 80057fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005800:	6006      	str	r6, [r0, #0]
 8005802:	60c6      	str	r6, [r0, #12]
 8005804:	69e6      	ldr	r6, [r4, #28]
 8005806:	68f3      	ldr	r3, [r6, #12]
 8005808:	b183      	cbz	r3, 800582c <_Balloc+0x50>
 800580a:	69e3      	ldr	r3, [r4, #28]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005812:	b9b8      	cbnz	r0, 8005844 <_Balloc+0x68>
 8005814:	2101      	movs	r1, #1
 8005816:	fa01 f605 	lsl.w	r6, r1, r5
 800581a:	1d72      	adds	r2, r6, #5
 800581c:	4620      	mov	r0, r4
 800581e:	0092      	lsls	r2, r2, #2
 8005820:	f000 fdb2 	bl	8006388 <_calloc_r>
 8005824:	b160      	cbz	r0, 8005840 <_Balloc+0x64>
 8005826:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800582a:	e00e      	b.n	800584a <_Balloc+0x6e>
 800582c:	2221      	movs	r2, #33	@ 0x21
 800582e:	2104      	movs	r1, #4
 8005830:	4620      	mov	r0, r4
 8005832:	f000 fda9 	bl	8006388 <_calloc_r>
 8005836:	69e3      	ldr	r3, [r4, #28]
 8005838:	60f0      	str	r0, [r6, #12]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1e4      	bne.n	800580a <_Balloc+0x2e>
 8005840:	2000      	movs	r0, #0
 8005842:	bd70      	pop	{r4, r5, r6, pc}
 8005844:	6802      	ldr	r2, [r0, #0]
 8005846:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800584a:	2300      	movs	r3, #0
 800584c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005850:	e7f7      	b.n	8005842 <_Balloc+0x66>
 8005852:	bf00      	nop
 8005854:	08006a9b 	.word	0x08006a9b
 8005858:	08006b1b 	.word	0x08006b1b

0800585c <_Bfree>:
 800585c:	b570      	push	{r4, r5, r6, lr}
 800585e:	69c6      	ldr	r6, [r0, #28]
 8005860:	4605      	mov	r5, r0
 8005862:	460c      	mov	r4, r1
 8005864:	b976      	cbnz	r6, 8005884 <_Bfree+0x28>
 8005866:	2010      	movs	r0, #16
 8005868:	f7ff ff02 	bl	8005670 <malloc>
 800586c:	4602      	mov	r2, r0
 800586e:	61e8      	str	r0, [r5, #28]
 8005870:	b920      	cbnz	r0, 800587c <_Bfree+0x20>
 8005872:	218f      	movs	r1, #143	@ 0x8f
 8005874:	4b08      	ldr	r3, [pc, #32]	@ (8005898 <_Bfree+0x3c>)
 8005876:	4809      	ldr	r0, [pc, #36]	@ (800589c <_Bfree+0x40>)
 8005878:	f000 fd68 	bl	800634c <__assert_func>
 800587c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005880:	6006      	str	r6, [r0, #0]
 8005882:	60c6      	str	r6, [r0, #12]
 8005884:	b13c      	cbz	r4, 8005896 <_Bfree+0x3a>
 8005886:	69eb      	ldr	r3, [r5, #28]
 8005888:	6862      	ldr	r2, [r4, #4]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005890:	6021      	str	r1, [r4, #0]
 8005892:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005896:	bd70      	pop	{r4, r5, r6, pc}
 8005898:	08006a9b 	.word	0x08006a9b
 800589c:	08006b1b 	.word	0x08006b1b

080058a0 <__multadd>:
 80058a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058a4:	4607      	mov	r7, r0
 80058a6:	460c      	mov	r4, r1
 80058a8:	461e      	mov	r6, r3
 80058aa:	2000      	movs	r0, #0
 80058ac:	690d      	ldr	r5, [r1, #16]
 80058ae:	f101 0c14 	add.w	ip, r1, #20
 80058b2:	f8dc 3000 	ldr.w	r3, [ip]
 80058b6:	3001      	adds	r0, #1
 80058b8:	b299      	uxth	r1, r3
 80058ba:	fb02 6101 	mla	r1, r2, r1, r6
 80058be:	0c1e      	lsrs	r6, r3, #16
 80058c0:	0c0b      	lsrs	r3, r1, #16
 80058c2:	fb02 3306 	mla	r3, r2, r6, r3
 80058c6:	b289      	uxth	r1, r1
 80058c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80058cc:	4285      	cmp	r5, r0
 80058ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80058d2:	f84c 1b04 	str.w	r1, [ip], #4
 80058d6:	dcec      	bgt.n	80058b2 <__multadd+0x12>
 80058d8:	b30e      	cbz	r6, 800591e <__multadd+0x7e>
 80058da:	68a3      	ldr	r3, [r4, #8]
 80058dc:	42ab      	cmp	r3, r5
 80058de:	dc19      	bgt.n	8005914 <__multadd+0x74>
 80058e0:	6861      	ldr	r1, [r4, #4]
 80058e2:	4638      	mov	r0, r7
 80058e4:	3101      	adds	r1, #1
 80058e6:	f7ff ff79 	bl	80057dc <_Balloc>
 80058ea:	4680      	mov	r8, r0
 80058ec:	b928      	cbnz	r0, 80058fa <__multadd+0x5a>
 80058ee:	4602      	mov	r2, r0
 80058f0:	21ba      	movs	r1, #186	@ 0xba
 80058f2:	4b0c      	ldr	r3, [pc, #48]	@ (8005924 <__multadd+0x84>)
 80058f4:	480c      	ldr	r0, [pc, #48]	@ (8005928 <__multadd+0x88>)
 80058f6:	f000 fd29 	bl	800634c <__assert_func>
 80058fa:	6922      	ldr	r2, [r4, #16]
 80058fc:	f104 010c 	add.w	r1, r4, #12
 8005900:	3202      	adds	r2, #2
 8005902:	0092      	lsls	r2, r2, #2
 8005904:	300c      	adds	r0, #12
 8005906:	f000 fd13 	bl	8006330 <memcpy>
 800590a:	4621      	mov	r1, r4
 800590c:	4638      	mov	r0, r7
 800590e:	f7ff ffa5 	bl	800585c <_Bfree>
 8005912:	4644      	mov	r4, r8
 8005914:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005918:	3501      	adds	r5, #1
 800591a:	615e      	str	r6, [r3, #20]
 800591c:	6125      	str	r5, [r4, #16]
 800591e:	4620      	mov	r0, r4
 8005920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005924:	08006b0a 	.word	0x08006b0a
 8005928:	08006b1b 	.word	0x08006b1b

0800592c <__hi0bits>:
 800592c:	4603      	mov	r3, r0
 800592e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005932:	bf3a      	itte	cc
 8005934:	0403      	lslcc	r3, r0, #16
 8005936:	2010      	movcc	r0, #16
 8005938:	2000      	movcs	r0, #0
 800593a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800593e:	bf3c      	itt	cc
 8005940:	021b      	lslcc	r3, r3, #8
 8005942:	3008      	addcc	r0, #8
 8005944:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005948:	bf3c      	itt	cc
 800594a:	011b      	lslcc	r3, r3, #4
 800594c:	3004      	addcc	r0, #4
 800594e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005952:	bf3c      	itt	cc
 8005954:	009b      	lslcc	r3, r3, #2
 8005956:	3002      	addcc	r0, #2
 8005958:	2b00      	cmp	r3, #0
 800595a:	db05      	blt.n	8005968 <__hi0bits+0x3c>
 800595c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005960:	f100 0001 	add.w	r0, r0, #1
 8005964:	bf08      	it	eq
 8005966:	2020      	moveq	r0, #32
 8005968:	4770      	bx	lr

0800596a <__lo0bits>:
 800596a:	6803      	ldr	r3, [r0, #0]
 800596c:	4602      	mov	r2, r0
 800596e:	f013 0007 	ands.w	r0, r3, #7
 8005972:	d00b      	beq.n	800598c <__lo0bits+0x22>
 8005974:	07d9      	lsls	r1, r3, #31
 8005976:	d421      	bmi.n	80059bc <__lo0bits+0x52>
 8005978:	0798      	lsls	r0, r3, #30
 800597a:	bf49      	itett	mi
 800597c:	085b      	lsrmi	r3, r3, #1
 800597e:	089b      	lsrpl	r3, r3, #2
 8005980:	2001      	movmi	r0, #1
 8005982:	6013      	strmi	r3, [r2, #0]
 8005984:	bf5c      	itt	pl
 8005986:	2002      	movpl	r0, #2
 8005988:	6013      	strpl	r3, [r2, #0]
 800598a:	4770      	bx	lr
 800598c:	b299      	uxth	r1, r3
 800598e:	b909      	cbnz	r1, 8005994 <__lo0bits+0x2a>
 8005990:	2010      	movs	r0, #16
 8005992:	0c1b      	lsrs	r3, r3, #16
 8005994:	b2d9      	uxtb	r1, r3
 8005996:	b909      	cbnz	r1, 800599c <__lo0bits+0x32>
 8005998:	3008      	adds	r0, #8
 800599a:	0a1b      	lsrs	r3, r3, #8
 800599c:	0719      	lsls	r1, r3, #28
 800599e:	bf04      	itt	eq
 80059a0:	091b      	lsreq	r3, r3, #4
 80059a2:	3004      	addeq	r0, #4
 80059a4:	0799      	lsls	r1, r3, #30
 80059a6:	bf04      	itt	eq
 80059a8:	089b      	lsreq	r3, r3, #2
 80059aa:	3002      	addeq	r0, #2
 80059ac:	07d9      	lsls	r1, r3, #31
 80059ae:	d403      	bmi.n	80059b8 <__lo0bits+0x4e>
 80059b0:	085b      	lsrs	r3, r3, #1
 80059b2:	f100 0001 	add.w	r0, r0, #1
 80059b6:	d003      	beq.n	80059c0 <__lo0bits+0x56>
 80059b8:	6013      	str	r3, [r2, #0]
 80059ba:	4770      	bx	lr
 80059bc:	2000      	movs	r0, #0
 80059be:	4770      	bx	lr
 80059c0:	2020      	movs	r0, #32
 80059c2:	4770      	bx	lr

080059c4 <__i2b>:
 80059c4:	b510      	push	{r4, lr}
 80059c6:	460c      	mov	r4, r1
 80059c8:	2101      	movs	r1, #1
 80059ca:	f7ff ff07 	bl	80057dc <_Balloc>
 80059ce:	4602      	mov	r2, r0
 80059d0:	b928      	cbnz	r0, 80059de <__i2b+0x1a>
 80059d2:	f240 1145 	movw	r1, #325	@ 0x145
 80059d6:	4b04      	ldr	r3, [pc, #16]	@ (80059e8 <__i2b+0x24>)
 80059d8:	4804      	ldr	r0, [pc, #16]	@ (80059ec <__i2b+0x28>)
 80059da:	f000 fcb7 	bl	800634c <__assert_func>
 80059de:	2301      	movs	r3, #1
 80059e0:	6144      	str	r4, [r0, #20]
 80059e2:	6103      	str	r3, [r0, #16]
 80059e4:	bd10      	pop	{r4, pc}
 80059e6:	bf00      	nop
 80059e8:	08006b0a 	.word	0x08006b0a
 80059ec:	08006b1b 	.word	0x08006b1b

080059f0 <__multiply>:
 80059f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059f4:	4614      	mov	r4, r2
 80059f6:	690a      	ldr	r2, [r1, #16]
 80059f8:	6923      	ldr	r3, [r4, #16]
 80059fa:	460f      	mov	r7, r1
 80059fc:	429a      	cmp	r2, r3
 80059fe:	bfa2      	ittt	ge
 8005a00:	4623      	movge	r3, r4
 8005a02:	460c      	movge	r4, r1
 8005a04:	461f      	movge	r7, r3
 8005a06:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005a0a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005a0e:	68a3      	ldr	r3, [r4, #8]
 8005a10:	6861      	ldr	r1, [r4, #4]
 8005a12:	eb0a 0609 	add.w	r6, sl, r9
 8005a16:	42b3      	cmp	r3, r6
 8005a18:	b085      	sub	sp, #20
 8005a1a:	bfb8      	it	lt
 8005a1c:	3101      	addlt	r1, #1
 8005a1e:	f7ff fedd 	bl	80057dc <_Balloc>
 8005a22:	b930      	cbnz	r0, 8005a32 <__multiply+0x42>
 8005a24:	4602      	mov	r2, r0
 8005a26:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005a2a:	4b43      	ldr	r3, [pc, #268]	@ (8005b38 <__multiply+0x148>)
 8005a2c:	4843      	ldr	r0, [pc, #268]	@ (8005b3c <__multiply+0x14c>)
 8005a2e:	f000 fc8d 	bl	800634c <__assert_func>
 8005a32:	f100 0514 	add.w	r5, r0, #20
 8005a36:	462b      	mov	r3, r5
 8005a38:	2200      	movs	r2, #0
 8005a3a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005a3e:	4543      	cmp	r3, r8
 8005a40:	d321      	bcc.n	8005a86 <__multiply+0x96>
 8005a42:	f107 0114 	add.w	r1, r7, #20
 8005a46:	f104 0214 	add.w	r2, r4, #20
 8005a4a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005a4e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005a52:	9302      	str	r3, [sp, #8]
 8005a54:	1b13      	subs	r3, r2, r4
 8005a56:	3b15      	subs	r3, #21
 8005a58:	f023 0303 	bic.w	r3, r3, #3
 8005a5c:	3304      	adds	r3, #4
 8005a5e:	f104 0715 	add.w	r7, r4, #21
 8005a62:	42ba      	cmp	r2, r7
 8005a64:	bf38      	it	cc
 8005a66:	2304      	movcc	r3, #4
 8005a68:	9301      	str	r3, [sp, #4]
 8005a6a:	9b02      	ldr	r3, [sp, #8]
 8005a6c:	9103      	str	r1, [sp, #12]
 8005a6e:	428b      	cmp	r3, r1
 8005a70:	d80c      	bhi.n	8005a8c <__multiply+0x9c>
 8005a72:	2e00      	cmp	r6, #0
 8005a74:	dd03      	ble.n	8005a7e <__multiply+0x8e>
 8005a76:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d05a      	beq.n	8005b34 <__multiply+0x144>
 8005a7e:	6106      	str	r6, [r0, #16]
 8005a80:	b005      	add	sp, #20
 8005a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a86:	f843 2b04 	str.w	r2, [r3], #4
 8005a8a:	e7d8      	b.n	8005a3e <__multiply+0x4e>
 8005a8c:	f8b1 a000 	ldrh.w	sl, [r1]
 8005a90:	f1ba 0f00 	cmp.w	sl, #0
 8005a94:	d023      	beq.n	8005ade <__multiply+0xee>
 8005a96:	46a9      	mov	r9, r5
 8005a98:	f04f 0c00 	mov.w	ip, #0
 8005a9c:	f104 0e14 	add.w	lr, r4, #20
 8005aa0:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005aa4:	f8d9 3000 	ldr.w	r3, [r9]
 8005aa8:	fa1f fb87 	uxth.w	fp, r7
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	fb0a 330b 	mla	r3, sl, fp, r3
 8005ab2:	4463      	add	r3, ip
 8005ab4:	f8d9 c000 	ldr.w	ip, [r9]
 8005ab8:	0c3f      	lsrs	r7, r7, #16
 8005aba:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005abe:	fb0a c707 	mla	r7, sl, r7, ip
 8005ac2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005acc:	4572      	cmp	r2, lr
 8005ace:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005ad2:	f849 3b04 	str.w	r3, [r9], #4
 8005ad6:	d8e3      	bhi.n	8005aa0 <__multiply+0xb0>
 8005ad8:	9b01      	ldr	r3, [sp, #4]
 8005ada:	f845 c003 	str.w	ip, [r5, r3]
 8005ade:	9b03      	ldr	r3, [sp, #12]
 8005ae0:	3104      	adds	r1, #4
 8005ae2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005ae6:	f1b9 0f00 	cmp.w	r9, #0
 8005aea:	d021      	beq.n	8005b30 <__multiply+0x140>
 8005aec:	46ae      	mov	lr, r5
 8005aee:	f04f 0a00 	mov.w	sl, #0
 8005af2:	682b      	ldr	r3, [r5, #0]
 8005af4:	f104 0c14 	add.w	ip, r4, #20
 8005af8:	f8bc b000 	ldrh.w	fp, [ip]
 8005afc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	fb09 770b 	mla	r7, r9, fp, r7
 8005b06:	4457      	add	r7, sl
 8005b08:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005b0c:	f84e 3b04 	str.w	r3, [lr], #4
 8005b10:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005b14:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005b18:	f8be 3000 	ldrh.w	r3, [lr]
 8005b1c:	4562      	cmp	r2, ip
 8005b1e:	fb09 330a 	mla	r3, r9, sl, r3
 8005b22:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005b26:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005b2a:	d8e5      	bhi.n	8005af8 <__multiply+0x108>
 8005b2c:	9f01      	ldr	r7, [sp, #4]
 8005b2e:	51eb      	str	r3, [r5, r7]
 8005b30:	3504      	adds	r5, #4
 8005b32:	e79a      	b.n	8005a6a <__multiply+0x7a>
 8005b34:	3e01      	subs	r6, #1
 8005b36:	e79c      	b.n	8005a72 <__multiply+0x82>
 8005b38:	08006b0a 	.word	0x08006b0a
 8005b3c:	08006b1b 	.word	0x08006b1b

08005b40 <__pow5mult>:
 8005b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b44:	4615      	mov	r5, r2
 8005b46:	f012 0203 	ands.w	r2, r2, #3
 8005b4a:	4607      	mov	r7, r0
 8005b4c:	460e      	mov	r6, r1
 8005b4e:	d007      	beq.n	8005b60 <__pow5mult+0x20>
 8005b50:	4c25      	ldr	r4, [pc, #148]	@ (8005be8 <__pow5mult+0xa8>)
 8005b52:	3a01      	subs	r2, #1
 8005b54:	2300      	movs	r3, #0
 8005b56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005b5a:	f7ff fea1 	bl	80058a0 <__multadd>
 8005b5e:	4606      	mov	r6, r0
 8005b60:	10ad      	asrs	r5, r5, #2
 8005b62:	d03d      	beq.n	8005be0 <__pow5mult+0xa0>
 8005b64:	69fc      	ldr	r4, [r7, #28]
 8005b66:	b97c      	cbnz	r4, 8005b88 <__pow5mult+0x48>
 8005b68:	2010      	movs	r0, #16
 8005b6a:	f7ff fd81 	bl	8005670 <malloc>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	61f8      	str	r0, [r7, #28]
 8005b72:	b928      	cbnz	r0, 8005b80 <__pow5mult+0x40>
 8005b74:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005b78:	4b1c      	ldr	r3, [pc, #112]	@ (8005bec <__pow5mult+0xac>)
 8005b7a:	481d      	ldr	r0, [pc, #116]	@ (8005bf0 <__pow5mult+0xb0>)
 8005b7c:	f000 fbe6 	bl	800634c <__assert_func>
 8005b80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005b84:	6004      	str	r4, [r0, #0]
 8005b86:	60c4      	str	r4, [r0, #12]
 8005b88:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005b8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005b90:	b94c      	cbnz	r4, 8005ba6 <__pow5mult+0x66>
 8005b92:	f240 2171 	movw	r1, #625	@ 0x271
 8005b96:	4638      	mov	r0, r7
 8005b98:	f7ff ff14 	bl	80059c4 <__i2b>
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	4604      	mov	r4, r0
 8005ba0:	f8c8 0008 	str.w	r0, [r8, #8]
 8005ba4:	6003      	str	r3, [r0, #0]
 8005ba6:	f04f 0900 	mov.w	r9, #0
 8005baa:	07eb      	lsls	r3, r5, #31
 8005bac:	d50a      	bpl.n	8005bc4 <__pow5mult+0x84>
 8005bae:	4631      	mov	r1, r6
 8005bb0:	4622      	mov	r2, r4
 8005bb2:	4638      	mov	r0, r7
 8005bb4:	f7ff ff1c 	bl	80059f0 <__multiply>
 8005bb8:	4680      	mov	r8, r0
 8005bba:	4631      	mov	r1, r6
 8005bbc:	4638      	mov	r0, r7
 8005bbe:	f7ff fe4d 	bl	800585c <_Bfree>
 8005bc2:	4646      	mov	r6, r8
 8005bc4:	106d      	asrs	r5, r5, #1
 8005bc6:	d00b      	beq.n	8005be0 <__pow5mult+0xa0>
 8005bc8:	6820      	ldr	r0, [r4, #0]
 8005bca:	b938      	cbnz	r0, 8005bdc <__pow5mult+0x9c>
 8005bcc:	4622      	mov	r2, r4
 8005bce:	4621      	mov	r1, r4
 8005bd0:	4638      	mov	r0, r7
 8005bd2:	f7ff ff0d 	bl	80059f0 <__multiply>
 8005bd6:	6020      	str	r0, [r4, #0]
 8005bd8:	f8c0 9000 	str.w	r9, [r0]
 8005bdc:	4604      	mov	r4, r0
 8005bde:	e7e4      	b.n	8005baa <__pow5mult+0x6a>
 8005be0:	4630      	mov	r0, r6
 8005be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005be6:	bf00      	nop
 8005be8:	08006b74 	.word	0x08006b74
 8005bec:	08006a9b 	.word	0x08006a9b
 8005bf0:	08006b1b 	.word	0x08006b1b

08005bf4 <__lshift>:
 8005bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bf8:	460c      	mov	r4, r1
 8005bfa:	4607      	mov	r7, r0
 8005bfc:	4691      	mov	r9, r2
 8005bfe:	6923      	ldr	r3, [r4, #16]
 8005c00:	6849      	ldr	r1, [r1, #4]
 8005c02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005c06:	68a3      	ldr	r3, [r4, #8]
 8005c08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005c0c:	f108 0601 	add.w	r6, r8, #1
 8005c10:	42b3      	cmp	r3, r6
 8005c12:	db0b      	blt.n	8005c2c <__lshift+0x38>
 8005c14:	4638      	mov	r0, r7
 8005c16:	f7ff fde1 	bl	80057dc <_Balloc>
 8005c1a:	4605      	mov	r5, r0
 8005c1c:	b948      	cbnz	r0, 8005c32 <__lshift+0x3e>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005c24:	4b27      	ldr	r3, [pc, #156]	@ (8005cc4 <__lshift+0xd0>)
 8005c26:	4828      	ldr	r0, [pc, #160]	@ (8005cc8 <__lshift+0xd4>)
 8005c28:	f000 fb90 	bl	800634c <__assert_func>
 8005c2c:	3101      	adds	r1, #1
 8005c2e:	005b      	lsls	r3, r3, #1
 8005c30:	e7ee      	b.n	8005c10 <__lshift+0x1c>
 8005c32:	2300      	movs	r3, #0
 8005c34:	f100 0114 	add.w	r1, r0, #20
 8005c38:	f100 0210 	add.w	r2, r0, #16
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	4553      	cmp	r3, sl
 8005c40:	db33      	blt.n	8005caa <__lshift+0xb6>
 8005c42:	6920      	ldr	r0, [r4, #16]
 8005c44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005c48:	f104 0314 	add.w	r3, r4, #20
 8005c4c:	f019 091f 	ands.w	r9, r9, #31
 8005c50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005c54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005c58:	d02b      	beq.n	8005cb2 <__lshift+0xbe>
 8005c5a:	468a      	mov	sl, r1
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f1c9 0e20 	rsb	lr, r9, #32
 8005c62:	6818      	ldr	r0, [r3, #0]
 8005c64:	fa00 f009 	lsl.w	r0, r0, r9
 8005c68:	4310      	orrs	r0, r2
 8005c6a:	f84a 0b04 	str.w	r0, [sl], #4
 8005c6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c72:	459c      	cmp	ip, r3
 8005c74:	fa22 f20e 	lsr.w	r2, r2, lr
 8005c78:	d8f3      	bhi.n	8005c62 <__lshift+0x6e>
 8005c7a:	ebac 0304 	sub.w	r3, ip, r4
 8005c7e:	3b15      	subs	r3, #21
 8005c80:	f023 0303 	bic.w	r3, r3, #3
 8005c84:	3304      	adds	r3, #4
 8005c86:	f104 0015 	add.w	r0, r4, #21
 8005c8a:	4584      	cmp	ip, r0
 8005c8c:	bf38      	it	cc
 8005c8e:	2304      	movcc	r3, #4
 8005c90:	50ca      	str	r2, [r1, r3]
 8005c92:	b10a      	cbz	r2, 8005c98 <__lshift+0xa4>
 8005c94:	f108 0602 	add.w	r6, r8, #2
 8005c98:	3e01      	subs	r6, #1
 8005c9a:	4638      	mov	r0, r7
 8005c9c:	4621      	mov	r1, r4
 8005c9e:	612e      	str	r6, [r5, #16]
 8005ca0:	f7ff fddc 	bl	800585c <_Bfree>
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005caa:	f842 0f04 	str.w	r0, [r2, #4]!
 8005cae:	3301      	adds	r3, #1
 8005cb0:	e7c5      	b.n	8005c3e <__lshift+0x4a>
 8005cb2:	3904      	subs	r1, #4
 8005cb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cb8:	459c      	cmp	ip, r3
 8005cba:	f841 2f04 	str.w	r2, [r1, #4]!
 8005cbe:	d8f9      	bhi.n	8005cb4 <__lshift+0xc0>
 8005cc0:	e7ea      	b.n	8005c98 <__lshift+0xa4>
 8005cc2:	bf00      	nop
 8005cc4:	08006b0a 	.word	0x08006b0a
 8005cc8:	08006b1b 	.word	0x08006b1b

08005ccc <__mcmp>:
 8005ccc:	4603      	mov	r3, r0
 8005cce:	690a      	ldr	r2, [r1, #16]
 8005cd0:	6900      	ldr	r0, [r0, #16]
 8005cd2:	b530      	push	{r4, r5, lr}
 8005cd4:	1a80      	subs	r0, r0, r2
 8005cd6:	d10e      	bne.n	8005cf6 <__mcmp+0x2a>
 8005cd8:	3314      	adds	r3, #20
 8005cda:	3114      	adds	r1, #20
 8005cdc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005ce0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005ce4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005ce8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005cec:	4295      	cmp	r5, r2
 8005cee:	d003      	beq.n	8005cf8 <__mcmp+0x2c>
 8005cf0:	d205      	bcs.n	8005cfe <__mcmp+0x32>
 8005cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf6:	bd30      	pop	{r4, r5, pc}
 8005cf8:	42a3      	cmp	r3, r4
 8005cfa:	d3f3      	bcc.n	8005ce4 <__mcmp+0x18>
 8005cfc:	e7fb      	b.n	8005cf6 <__mcmp+0x2a>
 8005cfe:	2001      	movs	r0, #1
 8005d00:	e7f9      	b.n	8005cf6 <__mcmp+0x2a>
	...

08005d04 <__mdiff>:
 8005d04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d08:	4689      	mov	r9, r1
 8005d0a:	4606      	mov	r6, r0
 8005d0c:	4611      	mov	r1, r2
 8005d0e:	4648      	mov	r0, r9
 8005d10:	4614      	mov	r4, r2
 8005d12:	f7ff ffdb 	bl	8005ccc <__mcmp>
 8005d16:	1e05      	subs	r5, r0, #0
 8005d18:	d112      	bne.n	8005d40 <__mdiff+0x3c>
 8005d1a:	4629      	mov	r1, r5
 8005d1c:	4630      	mov	r0, r6
 8005d1e:	f7ff fd5d 	bl	80057dc <_Balloc>
 8005d22:	4602      	mov	r2, r0
 8005d24:	b928      	cbnz	r0, 8005d32 <__mdiff+0x2e>
 8005d26:	f240 2137 	movw	r1, #567	@ 0x237
 8005d2a:	4b3e      	ldr	r3, [pc, #248]	@ (8005e24 <__mdiff+0x120>)
 8005d2c:	483e      	ldr	r0, [pc, #248]	@ (8005e28 <__mdiff+0x124>)
 8005d2e:	f000 fb0d 	bl	800634c <__assert_func>
 8005d32:	2301      	movs	r3, #1
 8005d34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005d38:	4610      	mov	r0, r2
 8005d3a:	b003      	add	sp, #12
 8005d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d40:	bfbc      	itt	lt
 8005d42:	464b      	movlt	r3, r9
 8005d44:	46a1      	movlt	r9, r4
 8005d46:	4630      	mov	r0, r6
 8005d48:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005d4c:	bfba      	itte	lt
 8005d4e:	461c      	movlt	r4, r3
 8005d50:	2501      	movlt	r5, #1
 8005d52:	2500      	movge	r5, #0
 8005d54:	f7ff fd42 	bl	80057dc <_Balloc>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	b918      	cbnz	r0, 8005d64 <__mdiff+0x60>
 8005d5c:	f240 2145 	movw	r1, #581	@ 0x245
 8005d60:	4b30      	ldr	r3, [pc, #192]	@ (8005e24 <__mdiff+0x120>)
 8005d62:	e7e3      	b.n	8005d2c <__mdiff+0x28>
 8005d64:	f100 0b14 	add.w	fp, r0, #20
 8005d68:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005d6c:	f109 0310 	add.w	r3, r9, #16
 8005d70:	60c5      	str	r5, [r0, #12]
 8005d72:	f04f 0c00 	mov.w	ip, #0
 8005d76:	f109 0514 	add.w	r5, r9, #20
 8005d7a:	46d9      	mov	r9, fp
 8005d7c:	6926      	ldr	r6, [r4, #16]
 8005d7e:	f104 0e14 	add.w	lr, r4, #20
 8005d82:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005d86:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005d8a:	9301      	str	r3, [sp, #4]
 8005d8c:	9b01      	ldr	r3, [sp, #4]
 8005d8e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005d92:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005d96:	b281      	uxth	r1, r0
 8005d98:	9301      	str	r3, [sp, #4]
 8005d9a:	fa1f f38a 	uxth.w	r3, sl
 8005d9e:	1a5b      	subs	r3, r3, r1
 8005da0:	0c00      	lsrs	r0, r0, #16
 8005da2:	4463      	add	r3, ip
 8005da4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005da8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005db2:	4576      	cmp	r6, lr
 8005db4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005db8:	f849 3b04 	str.w	r3, [r9], #4
 8005dbc:	d8e6      	bhi.n	8005d8c <__mdiff+0x88>
 8005dbe:	1b33      	subs	r3, r6, r4
 8005dc0:	3b15      	subs	r3, #21
 8005dc2:	f023 0303 	bic.w	r3, r3, #3
 8005dc6:	3415      	adds	r4, #21
 8005dc8:	3304      	adds	r3, #4
 8005dca:	42a6      	cmp	r6, r4
 8005dcc:	bf38      	it	cc
 8005dce:	2304      	movcc	r3, #4
 8005dd0:	441d      	add	r5, r3
 8005dd2:	445b      	add	r3, fp
 8005dd4:	461e      	mov	r6, r3
 8005dd6:	462c      	mov	r4, r5
 8005dd8:	4544      	cmp	r4, r8
 8005dda:	d30e      	bcc.n	8005dfa <__mdiff+0xf6>
 8005ddc:	f108 0103 	add.w	r1, r8, #3
 8005de0:	1b49      	subs	r1, r1, r5
 8005de2:	f021 0103 	bic.w	r1, r1, #3
 8005de6:	3d03      	subs	r5, #3
 8005de8:	45a8      	cmp	r8, r5
 8005dea:	bf38      	it	cc
 8005dec:	2100      	movcc	r1, #0
 8005dee:	440b      	add	r3, r1
 8005df0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005df4:	b199      	cbz	r1, 8005e1e <__mdiff+0x11a>
 8005df6:	6117      	str	r7, [r2, #16]
 8005df8:	e79e      	b.n	8005d38 <__mdiff+0x34>
 8005dfa:	46e6      	mov	lr, ip
 8005dfc:	f854 1b04 	ldr.w	r1, [r4], #4
 8005e00:	fa1f fc81 	uxth.w	ip, r1
 8005e04:	44f4      	add	ip, lr
 8005e06:	0c08      	lsrs	r0, r1, #16
 8005e08:	4471      	add	r1, lr
 8005e0a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005e0e:	b289      	uxth	r1, r1
 8005e10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005e14:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005e18:	f846 1b04 	str.w	r1, [r6], #4
 8005e1c:	e7dc      	b.n	8005dd8 <__mdiff+0xd4>
 8005e1e:	3f01      	subs	r7, #1
 8005e20:	e7e6      	b.n	8005df0 <__mdiff+0xec>
 8005e22:	bf00      	nop
 8005e24:	08006b0a 	.word	0x08006b0a
 8005e28:	08006b1b 	.word	0x08006b1b

08005e2c <__d2b>:
 8005e2c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005e30:	2101      	movs	r1, #1
 8005e32:	4690      	mov	r8, r2
 8005e34:	4699      	mov	r9, r3
 8005e36:	9e08      	ldr	r6, [sp, #32]
 8005e38:	f7ff fcd0 	bl	80057dc <_Balloc>
 8005e3c:	4604      	mov	r4, r0
 8005e3e:	b930      	cbnz	r0, 8005e4e <__d2b+0x22>
 8005e40:	4602      	mov	r2, r0
 8005e42:	f240 310f 	movw	r1, #783	@ 0x30f
 8005e46:	4b23      	ldr	r3, [pc, #140]	@ (8005ed4 <__d2b+0xa8>)
 8005e48:	4823      	ldr	r0, [pc, #140]	@ (8005ed8 <__d2b+0xac>)
 8005e4a:	f000 fa7f 	bl	800634c <__assert_func>
 8005e4e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005e52:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005e56:	b10d      	cbz	r5, 8005e5c <__d2b+0x30>
 8005e58:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e5c:	9301      	str	r3, [sp, #4]
 8005e5e:	f1b8 0300 	subs.w	r3, r8, #0
 8005e62:	d024      	beq.n	8005eae <__d2b+0x82>
 8005e64:	4668      	mov	r0, sp
 8005e66:	9300      	str	r3, [sp, #0]
 8005e68:	f7ff fd7f 	bl	800596a <__lo0bits>
 8005e6c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005e70:	b1d8      	cbz	r0, 8005eaa <__d2b+0x7e>
 8005e72:	f1c0 0320 	rsb	r3, r0, #32
 8005e76:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7a:	430b      	orrs	r3, r1
 8005e7c:	40c2      	lsrs	r2, r0
 8005e7e:	6163      	str	r3, [r4, #20]
 8005e80:	9201      	str	r2, [sp, #4]
 8005e82:	9b01      	ldr	r3, [sp, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	bf0c      	ite	eq
 8005e88:	2201      	moveq	r2, #1
 8005e8a:	2202      	movne	r2, #2
 8005e8c:	61a3      	str	r3, [r4, #24]
 8005e8e:	6122      	str	r2, [r4, #16]
 8005e90:	b1ad      	cbz	r5, 8005ebe <__d2b+0x92>
 8005e92:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005e96:	4405      	add	r5, r0
 8005e98:	6035      	str	r5, [r6, #0]
 8005e9a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005e9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ea0:	6018      	str	r0, [r3, #0]
 8005ea2:	4620      	mov	r0, r4
 8005ea4:	b002      	add	sp, #8
 8005ea6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005eaa:	6161      	str	r1, [r4, #20]
 8005eac:	e7e9      	b.n	8005e82 <__d2b+0x56>
 8005eae:	a801      	add	r0, sp, #4
 8005eb0:	f7ff fd5b 	bl	800596a <__lo0bits>
 8005eb4:	9b01      	ldr	r3, [sp, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	6163      	str	r3, [r4, #20]
 8005eba:	3020      	adds	r0, #32
 8005ebc:	e7e7      	b.n	8005e8e <__d2b+0x62>
 8005ebe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005ec2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005ec6:	6030      	str	r0, [r6, #0]
 8005ec8:	6918      	ldr	r0, [r3, #16]
 8005eca:	f7ff fd2f 	bl	800592c <__hi0bits>
 8005ece:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005ed2:	e7e4      	b.n	8005e9e <__d2b+0x72>
 8005ed4:	08006b0a 	.word	0x08006b0a
 8005ed8:	08006b1b 	.word	0x08006b1b

08005edc <__ssputs_r>:
 8005edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ee0:	461f      	mov	r7, r3
 8005ee2:	688e      	ldr	r6, [r1, #8]
 8005ee4:	4682      	mov	sl, r0
 8005ee6:	42be      	cmp	r6, r7
 8005ee8:	460c      	mov	r4, r1
 8005eea:	4690      	mov	r8, r2
 8005eec:	680b      	ldr	r3, [r1, #0]
 8005eee:	d82d      	bhi.n	8005f4c <__ssputs_r+0x70>
 8005ef0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005ef4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005ef8:	d026      	beq.n	8005f48 <__ssputs_r+0x6c>
 8005efa:	6965      	ldr	r5, [r4, #20]
 8005efc:	6909      	ldr	r1, [r1, #16]
 8005efe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f02:	eba3 0901 	sub.w	r9, r3, r1
 8005f06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f0a:	1c7b      	adds	r3, r7, #1
 8005f0c:	444b      	add	r3, r9
 8005f0e:	106d      	asrs	r5, r5, #1
 8005f10:	429d      	cmp	r5, r3
 8005f12:	bf38      	it	cc
 8005f14:	461d      	movcc	r5, r3
 8005f16:	0553      	lsls	r3, r2, #21
 8005f18:	d527      	bpl.n	8005f6a <__ssputs_r+0x8e>
 8005f1a:	4629      	mov	r1, r5
 8005f1c:	f7ff fbd2 	bl	80056c4 <_malloc_r>
 8005f20:	4606      	mov	r6, r0
 8005f22:	b360      	cbz	r0, 8005f7e <__ssputs_r+0xa2>
 8005f24:	464a      	mov	r2, r9
 8005f26:	6921      	ldr	r1, [r4, #16]
 8005f28:	f000 fa02 	bl	8006330 <memcpy>
 8005f2c:	89a3      	ldrh	r3, [r4, #12]
 8005f2e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005f32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f36:	81a3      	strh	r3, [r4, #12]
 8005f38:	6126      	str	r6, [r4, #16]
 8005f3a:	444e      	add	r6, r9
 8005f3c:	6026      	str	r6, [r4, #0]
 8005f3e:	463e      	mov	r6, r7
 8005f40:	6165      	str	r5, [r4, #20]
 8005f42:	eba5 0509 	sub.w	r5, r5, r9
 8005f46:	60a5      	str	r5, [r4, #8]
 8005f48:	42be      	cmp	r6, r7
 8005f4a:	d900      	bls.n	8005f4e <__ssputs_r+0x72>
 8005f4c:	463e      	mov	r6, r7
 8005f4e:	4632      	mov	r2, r6
 8005f50:	4641      	mov	r1, r8
 8005f52:	6820      	ldr	r0, [r4, #0]
 8005f54:	f000 f9c2 	bl	80062dc <memmove>
 8005f58:	2000      	movs	r0, #0
 8005f5a:	68a3      	ldr	r3, [r4, #8]
 8005f5c:	1b9b      	subs	r3, r3, r6
 8005f5e:	60a3      	str	r3, [r4, #8]
 8005f60:	6823      	ldr	r3, [r4, #0]
 8005f62:	4433      	add	r3, r6
 8005f64:	6023      	str	r3, [r4, #0]
 8005f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f6a:	462a      	mov	r2, r5
 8005f6c:	f000 fa32 	bl	80063d4 <_realloc_r>
 8005f70:	4606      	mov	r6, r0
 8005f72:	2800      	cmp	r0, #0
 8005f74:	d1e0      	bne.n	8005f38 <__ssputs_r+0x5c>
 8005f76:	4650      	mov	r0, sl
 8005f78:	6921      	ldr	r1, [r4, #16]
 8005f7a:	f7ff fb31 	bl	80055e0 <_free_r>
 8005f7e:	230c      	movs	r3, #12
 8005f80:	f8ca 3000 	str.w	r3, [sl]
 8005f84:	89a3      	ldrh	r3, [r4, #12]
 8005f86:	f04f 30ff 	mov.w	r0, #4294967295
 8005f8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f8e:	81a3      	strh	r3, [r4, #12]
 8005f90:	e7e9      	b.n	8005f66 <__ssputs_r+0x8a>
	...

08005f94 <_svfiprintf_r>:
 8005f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f98:	4698      	mov	r8, r3
 8005f9a:	898b      	ldrh	r3, [r1, #12]
 8005f9c:	4607      	mov	r7, r0
 8005f9e:	061b      	lsls	r3, r3, #24
 8005fa0:	460d      	mov	r5, r1
 8005fa2:	4614      	mov	r4, r2
 8005fa4:	b09d      	sub	sp, #116	@ 0x74
 8005fa6:	d510      	bpl.n	8005fca <_svfiprintf_r+0x36>
 8005fa8:	690b      	ldr	r3, [r1, #16]
 8005faa:	b973      	cbnz	r3, 8005fca <_svfiprintf_r+0x36>
 8005fac:	2140      	movs	r1, #64	@ 0x40
 8005fae:	f7ff fb89 	bl	80056c4 <_malloc_r>
 8005fb2:	6028      	str	r0, [r5, #0]
 8005fb4:	6128      	str	r0, [r5, #16]
 8005fb6:	b930      	cbnz	r0, 8005fc6 <_svfiprintf_r+0x32>
 8005fb8:	230c      	movs	r3, #12
 8005fba:	603b      	str	r3, [r7, #0]
 8005fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8005fc0:	b01d      	add	sp, #116	@ 0x74
 8005fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fc6:	2340      	movs	r3, #64	@ 0x40
 8005fc8:	616b      	str	r3, [r5, #20]
 8005fca:	2300      	movs	r3, #0
 8005fcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fce:	2320      	movs	r3, #32
 8005fd0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005fd4:	2330      	movs	r3, #48	@ 0x30
 8005fd6:	f04f 0901 	mov.w	r9, #1
 8005fda:	f8cd 800c 	str.w	r8, [sp, #12]
 8005fde:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006178 <_svfiprintf_r+0x1e4>
 8005fe2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005fe6:	4623      	mov	r3, r4
 8005fe8:	469a      	mov	sl, r3
 8005fea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fee:	b10a      	cbz	r2, 8005ff4 <_svfiprintf_r+0x60>
 8005ff0:	2a25      	cmp	r2, #37	@ 0x25
 8005ff2:	d1f9      	bne.n	8005fe8 <_svfiprintf_r+0x54>
 8005ff4:	ebba 0b04 	subs.w	fp, sl, r4
 8005ff8:	d00b      	beq.n	8006012 <_svfiprintf_r+0x7e>
 8005ffa:	465b      	mov	r3, fp
 8005ffc:	4622      	mov	r2, r4
 8005ffe:	4629      	mov	r1, r5
 8006000:	4638      	mov	r0, r7
 8006002:	f7ff ff6b 	bl	8005edc <__ssputs_r>
 8006006:	3001      	adds	r0, #1
 8006008:	f000 80a7 	beq.w	800615a <_svfiprintf_r+0x1c6>
 800600c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800600e:	445a      	add	r2, fp
 8006010:	9209      	str	r2, [sp, #36]	@ 0x24
 8006012:	f89a 3000 	ldrb.w	r3, [sl]
 8006016:	2b00      	cmp	r3, #0
 8006018:	f000 809f 	beq.w	800615a <_svfiprintf_r+0x1c6>
 800601c:	2300      	movs	r3, #0
 800601e:	f04f 32ff 	mov.w	r2, #4294967295
 8006022:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006026:	f10a 0a01 	add.w	sl, sl, #1
 800602a:	9304      	str	r3, [sp, #16]
 800602c:	9307      	str	r3, [sp, #28]
 800602e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006032:	931a      	str	r3, [sp, #104]	@ 0x68
 8006034:	4654      	mov	r4, sl
 8006036:	2205      	movs	r2, #5
 8006038:	f814 1b01 	ldrb.w	r1, [r4], #1
 800603c:	484e      	ldr	r0, [pc, #312]	@ (8006178 <_svfiprintf_r+0x1e4>)
 800603e:	f7fe fc6e 	bl	800491e <memchr>
 8006042:	9a04      	ldr	r2, [sp, #16]
 8006044:	b9d8      	cbnz	r0, 800607e <_svfiprintf_r+0xea>
 8006046:	06d0      	lsls	r0, r2, #27
 8006048:	bf44      	itt	mi
 800604a:	2320      	movmi	r3, #32
 800604c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006050:	0711      	lsls	r1, r2, #28
 8006052:	bf44      	itt	mi
 8006054:	232b      	movmi	r3, #43	@ 0x2b
 8006056:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800605a:	f89a 3000 	ldrb.w	r3, [sl]
 800605e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006060:	d015      	beq.n	800608e <_svfiprintf_r+0xfa>
 8006062:	4654      	mov	r4, sl
 8006064:	2000      	movs	r0, #0
 8006066:	f04f 0c0a 	mov.w	ip, #10
 800606a:	9a07      	ldr	r2, [sp, #28]
 800606c:	4621      	mov	r1, r4
 800606e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006072:	3b30      	subs	r3, #48	@ 0x30
 8006074:	2b09      	cmp	r3, #9
 8006076:	d94b      	bls.n	8006110 <_svfiprintf_r+0x17c>
 8006078:	b1b0      	cbz	r0, 80060a8 <_svfiprintf_r+0x114>
 800607a:	9207      	str	r2, [sp, #28]
 800607c:	e014      	b.n	80060a8 <_svfiprintf_r+0x114>
 800607e:	eba0 0308 	sub.w	r3, r0, r8
 8006082:	fa09 f303 	lsl.w	r3, r9, r3
 8006086:	4313      	orrs	r3, r2
 8006088:	46a2      	mov	sl, r4
 800608a:	9304      	str	r3, [sp, #16]
 800608c:	e7d2      	b.n	8006034 <_svfiprintf_r+0xa0>
 800608e:	9b03      	ldr	r3, [sp, #12]
 8006090:	1d19      	adds	r1, r3, #4
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	9103      	str	r1, [sp, #12]
 8006096:	2b00      	cmp	r3, #0
 8006098:	bfbb      	ittet	lt
 800609a:	425b      	neglt	r3, r3
 800609c:	f042 0202 	orrlt.w	r2, r2, #2
 80060a0:	9307      	strge	r3, [sp, #28]
 80060a2:	9307      	strlt	r3, [sp, #28]
 80060a4:	bfb8      	it	lt
 80060a6:	9204      	strlt	r2, [sp, #16]
 80060a8:	7823      	ldrb	r3, [r4, #0]
 80060aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80060ac:	d10a      	bne.n	80060c4 <_svfiprintf_r+0x130>
 80060ae:	7863      	ldrb	r3, [r4, #1]
 80060b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80060b2:	d132      	bne.n	800611a <_svfiprintf_r+0x186>
 80060b4:	9b03      	ldr	r3, [sp, #12]
 80060b6:	3402      	adds	r4, #2
 80060b8:	1d1a      	adds	r2, r3, #4
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	9203      	str	r2, [sp, #12]
 80060be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80060c2:	9305      	str	r3, [sp, #20]
 80060c4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800617c <_svfiprintf_r+0x1e8>
 80060c8:	2203      	movs	r2, #3
 80060ca:	4650      	mov	r0, sl
 80060cc:	7821      	ldrb	r1, [r4, #0]
 80060ce:	f7fe fc26 	bl	800491e <memchr>
 80060d2:	b138      	cbz	r0, 80060e4 <_svfiprintf_r+0x150>
 80060d4:	2240      	movs	r2, #64	@ 0x40
 80060d6:	9b04      	ldr	r3, [sp, #16]
 80060d8:	eba0 000a 	sub.w	r0, r0, sl
 80060dc:	4082      	lsls	r2, r0
 80060de:	4313      	orrs	r3, r2
 80060e0:	3401      	adds	r4, #1
 80060e2:	9304      	str	r3, [sp, #16]
 80060e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060e8:	2206      	movs	r2, #6
 80060ea:	4825      	ldr	r0, [pc, #148]	@ (8006180 <_svfiprintf_r+0x1ec>)
 80060ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80060f0:	f7fe fc15 	bl	800491e <memchr>
 80060f4:	2800      	cmp	r0, #0
 80060f6:	d036      	beq.n	8006166 <_svfiprintf_r+0x1d2>
 80060f8:	4b22      	ldr	r3, [pc, #136]	@ (8006184 <_svfiprintf_r+0x1f0>)
 80060fa:	bb1b      	cbnz	r3, 8006144 <_svfiprintf_r+0x1b0>
 80060fc:	9b03      	ldr	r3, [sp, #12]
 80060fe:	3307      	adds	r3, #7
 8006100:	f023 0307 	bic.w	r3, r3, #7
 8006104:	3308      	adds	r3, #8
 8006106:	9303      	str	r3, [sp, #12]
 8006108:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800610a:	4433      	add	r3, r6
 800610c:	9309      	str	r3, [sp, #36]	@ 0x24
 800610e:	e76a      	b.n	8005fe6 <_svfiprintf_r+0x52>
 8006110:	460c      	mov	r4, r1
 8006112:	2001      	movs	r0, #1
 8006114:	fb0c 3202 	mla	r2, ip, r2, r3
 8006118:	e7a8      	b.n	800606c <_svfiprintf_r+0xd8>
 800611a:	2300      	movs	r3, #0
 800611c:	f04f 0c0a 	mov.w	ip, #10
 8006120:	4619      	mov	r1, r3
 8006122:	3401      	adds	r4, #1
 8006124:	9305      	str	r3, [sp, #20]
 8006126:	4620      	mov	r0, r4
 8006128:	f810 2b01 	ldrb.w	r2, [r0], #1
 800612c:	3a30      	subs	r2, #48	@ 0x30
 800612e:	2a09      	cmp	r2, #9
 8006130:	d903      	bls.n	800613a <_svfiprintf_r+0x1a6>
 8006132:	2b00      	cmp	r3, #0
 8006134:	d0c6      	beq.n	80060c4 <_svfiprintf_r+0x130>
 8006136:	9105      	str	r1, [sp, #20]
 8006138:	e7c4      	b.n	80060c4 <_svfiprintf_r+0x130>
 800613a:	4604      	mov	r4, r0
 800613c:	2301      	movs	r3, #1
 800613e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006142:	e7f0      	b.n	8006126 <_svfiprintf_r+0x192>
 8006144:	ab03      	add	r3, sp, #12
 8006146:	9300      	str	r3, [sp, #0]
 8006148:	462a      	mov	r2, r5
 800614a:	4638      	mov	r0, r7
 800614c:	4b0e      	ldr	r3, [pc, #56]	@ (8006188 <_svfiprintf_r+0x1f4>)
 800614e:	a904      	add	r1, sp, #16
 8006150:	f7fd fe82 	bl	8003e58 <_printf_float>
 8006154:	1c42      	adds	r2, r0, #1
 8006156:	4606      	mov	r6, r0
 8006158:	d1d6      	bne.n	8006108 <_svfiprintf_r+0x174>
 800615a:	89ab      	ldrh	r3, [r5, #12]
 800615c:	065b      	lsls	r3, r3, #25
 800615e:	f53f af2d 	bmi.w	8005fbc <_svfiprintf_r+0x28>
 8006162:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006164:	e72c      	b.n	8005fc0 <_svfiprintf_r+0x2c>
 8006166:	ab03      	add	r3, sp, #12
 8006168:	9300      	str	r3, [sp, #0]
 800616a:	462a      	mov	r2, r5
 800616c:	4638      	mov	r0, r7
 800616e:	4b06      	ldr	r3, [pc, #24]	@ (8006188 <_svfiprintf_r+0x1f4>)
 8006170:	a904      	add	r1, sp, #16
 8006172:	f7fe f90f 	bl	8004394 <_printf_i>
 8006176:	e7ed      	b.n	8006154 <_svfiprintf_r+0x1c0>
 8006178:	08006c70 	.word	0x08006c70
 800617c:	08006c76 	.word	0x08006c76
 8006180:	08006c7a 	.word	0x08006c7a
 8006184:	08003e59 	.word	0x08003e59
 8006188:	08005edd 	.word	0x08005edd

0800618c <__sflush_r>:
 800618c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006192:	0716      	lsls	r6, r2, #28
 8006194:	4605      	mov	r5, r0
 8006196:	460c      	mov	r4, r1
 8006198:	d454      	bmi.n	8006244 <__sflush_r+0xb8>
 800619a:	684b      	ldr	r3, [r1, #4]
 800619c:	2b00      	cmp	r3, #0
 800619e:	dc02      	bgt.n	80061a6 <__sflush_r+0x1a>
 80061a0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	dd48      	ble.n	8006238 <__sflush_r+0xac>
 80061a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80061a8:	2e00      	cmp	r6, #0
 80061aa:	d045      	beq.n	8006238 <__sflush_r+0xac>
 80061ac:	2300      	movs	r3, #0
 80061ae:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80061b2:	682f      	ldr	r7, [r5, #0]
 80061b4:	6a21      	ldr	r1, [r4, #32]
 80061b6:	602b      	str	r3, [r5, #0]
 80061b8:	d030      	beq.n	800621c <__sflush_r+0x90>
 80061ba:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80061bc:	89a3      	ldrh	r3, [r4, #12]
 80061be:	0759      	lsls	r1, r3, #29
 80061c0:	d505      	bpl.n	80061ce <__sflush_r+0x42>
 80061c2:	6863      	ldr	r3, [r4, #4]
 80061c4:	1ad2      	subs	r2, r2, r3
 80061c6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80061c8:	b10b      	cbz	r3, 80061ce <__sflush_r+0x42>
 80061ca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80061cc:	1ad2      	subs	r2, r2, r3
 80061ce:	2300      	movs	r3, #0
 80061d0:	4628      	mov	r0, r5
 80061d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80061d4:	6a21      	ldr	r1, [r4, #32]
 80061d6:	47b0      	blx	r6
 80061d8:	1c43      	adds	r3, r0, #1
 80061da:	89a3      	ldrh	r3, [r4, #12]
 80061dc:	d106      	bne.n	80061ec <__sflush_r+0x60>
 80061de:	6829      	ldr	r1, [r5, #0]
 80061e0:	291d      	cmp	r1, #29
 80061e2:	d82b      	bhi.n	800623c <__sflush_r+0xb0>
 80061e4:	4a28      	ldr	r2, [pc, #160]	@ (8006288 <__sflush_r+0xfc>)
 80061e6:	410a      	asrs	r2, r1
 80061e8:	07d6      	lsls	r6, r2, #31
 80061ea:	d427      	bmi.n	800623c <__sflush_r+0xb0>
 80061ec:	2200      	movs	r2, #0
 80061ee:	6062      	str	r2, [r4, #4]
 80061f0:	6922      	ldr	r2, [r4, #16]
 80061f2:	04d9      	lsls	r1, r3, #19
 80061f4:	6022      	str	r2, [r4, #0]
 80061f6:	d504      	bpl.n	8006202 <__sflush_r+0x76>
 80061f8:	1c42      	adds	r2, r0, #1
 80061fa:	d101      	bne.n	8006200 <__sflush_r+0x74>
 80061fc:	682b      	ldr	r3, [r5, #0]
 80061fe:	b903      	cbnz	r3, 8006202 <__sflush_r+0x76>
 8006200:	6560      	str	r0, [r4, #84]	@ 0x54
 8006202:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006204:	602f      	str	r7, [r5, #0]
 8006206:	b1b9      	cbz	r1, 8006238 <__sflush_r+0xac>
 8006208:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800620c:	4299      	cmp	r1, r3
 800620e:	d002      	beq.n	8006216 <__sflush_r+0x8a>
 8006210:	4628      	mov	r0, r5
 8006212:	f7ff f9e5 	bl	80055e0 <_free_r>
 8006216:	2300      	movs	r3, #0
 8006218:	6363      	str	r3, [r4, #52]	@ 0x34
 800621a:	e00d      	b.n	8006238 <__sflush_r+0xac>
 800621c:	2301      	movs	r3, #1
 800621e:	4628      	mov	r0, r5
 8006220:	47b0      	blx	r6
 8006222:	4602      	mov	r2, r0
 8006224:	1c50      	adds	r0, r2, #1
 8006226:	d1c9      	bne.n	80061bc <__sflush_r+0x30>
 8006228:	682b      	ldr	r3, [r5, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d0c6      	beq.n	80061bc <__sflush_r+0x30>
 800622e:	2b1d      	cmp	r3, #29
 8006230:	d001      	beq.n	8006236 <__sflush_r+0xaa>
 8006232:	2b16      	cmp	r3, #22
 8006234:	d11d      	bne.n	8006272 <__sflush_r+0xe6>
 8006236:	602f      	str	r7, [r5, #0]
 8006238:	2000      	movs	r0, #0
 800623a:	e021      	b.n	8006280 <__sflush_r+0xf4>
 800623c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006240:	b21b      	sxth	r3, r3
 8006242:	e01a      	b.n	800627a <__sflush_r+0xee>
 8006244:	690f      	ldr	r7, [r1, #16]
 8006246:	2f00      	cmp	r7, #0
 8006248:	d0f6      	beq.n	8006238 <__sflush_r+0xac>
 800624a:	0793      	lsls	r3, r2, #30
 800624c:	bf18      	it	ne
 800624e:	2300      	movne	r3, #0
 8006250:	680e      	ldr	r6, [r1, #0]
 8006252:	bf08      	it	eq
 8006254:	694b      	ldreq	r3, [r1, #20]
 8006256:	1bf6      	subs	r6, r6, r7
 8006258:	600f      	str	r7, [r1, #0]
 800625a:	608b      	str	r3, [r1, #8]
 800625c:	2e00      	cmp	r6, #0
 800625e:	ddeb      	ble.n	8006238 <__sflush_r+0xac>
 8006260:	4633      	mov	r3, r6
 8006262:	463a      	mov	r2, r7
 8006264:	4628      	mov	r0, r5
 8006266:	6a21      	ldr	r1, [r4, #32]
 8006268:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800626c:	47e0      	blx	ip
 800626e:	2800      	cmp	r0, #0
 8006270:	dc07      	bgt.n	8006282 <__sflush_r+0xf6>
 8006272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006276:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800627a:	f04f 30ff 	mov.w	r0, #4294967295
 800627e:	81a3      	strh	r3, [r4, #12]
 8006280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006282:	4407      	add	r7, r0
 8006284:	1a36      	subs	r6, r6, r0
 8006286:	e7e9      	b.n	800625c <__sflush_r+0xd0>
 8006288:	dfbffffe 	.word	0xdfbffffe

0800628c <_fflush_r>:
 800628c:	b538      	push	{r3, r4, r5, lr}
 800628e:	690b      	ldr	r3, [r1, #16]
 8006290:	4605      	mov	r5, r0
 8006292:	460c      	mov	r4, r1
 8006294:	b913      	cbnz	r3, 800629c <_fflush_r+0x10>
 8006296:	2500      	movs	r5, #0
 8006298:	4628      	mov	r0, r5
 800629a:	bd38      	pop	{r3, r4, r5, pc}
 800629c:	b118      	cbz	r0, 80062a6 <_fflush_r+0x1a>
 800629e:	6a03      	ldr	r3, [r0, #32]
 80062a0:	b90b      	cbnz	r3, 80062a6 <_fflush_r+0x1a>
 80062a2:	f7fe fa23 	bl	80046ec <__sinit>
 80062a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d0f3      	beq.n	8006296 <_fflush_r+0xa>
 80062ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80062b0:	07d0      	lsls	r0, r2, #31
 80062b2:	d404      	bmi.n	80062be <_fflush_r+0x32>
 80062b4:	0599      	lsls	r1, r3, #22
 80062b6:	d402      	bmi.n	80062be <_fflush_r+0x32>
 80062b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062ba:	f7fe fb2e 	bl	800491a <__retarget_lock_acquire_recursive>
 80062be:	4628      	mov	r0, r5
 80062c0:	4621      	mov	r1, r4
 80062c2:	f7ff ff63 	bl	800618c <__sflush_r>
 80062c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80062c8:	4605      	mov	r5, r0
 80062ca:	07da      	lsls	r2, r3, #31
 80062cc:	d4e4      	bmi.n	8006298 <_fflush_r+0xc>
 80062ce:	89a3      	ldrh	r3, [r4, #12]
 80062d0:	059b      	lsls	r3, r3, #22
 80062d2:	d4e1      	bmi.n	8006298 <_fflush_r+0xc>
 80062d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062d6:	f7fe fb21 	bl	800491c <__retarget_lock_release_recursive>
 80062da:	e7dd      	b.n	8006298 <_fflush_r+0xc>

080062dc <memmove>:
 80062dc:	4288      	cmp	r0, r1
 80062de:	b510      	push	{r4, lr}
 80062e0:	eb01 0402 	add.w	r4, r1, r2
 80062e4:	d902      	bls.n	80062ec <memmove+0x10>
 80062e6:	4284      	cmp	r4, r0
 80062e8:	4623      	mov	r3, r4
 80062ea:	d807      	bhi.n	80062fc <memmove+0x20>
 80062ec:	1e43      	subs	r3, r0, #1
 80062ee:	42a1      	cmp	r1, r4
 80062f0:	d008      	beq.n	8006304 <memmove+0x28>
 80062f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80062fa:	e7f8      	b.n	80062ee <memmove+0x12>
 80062fc:	4601      	mov	r1, r0
 80062fe:	4402      	add	r2, r0
 8006300:	428a      	cmp	r2, r1
 8006302:	d100      	bne.n	8006306 <memmove+0x2a>
 8006304:	bd10      	pop	{r4, pc}
 8006306:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800630a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800630e:	e7f7      	b.n	8006300 <memmove+0x24>

08006310 <_sbrk_r>:
 8006310:	b538      	push	{r3, r4, r5, lr}
 8006312:	2300      	movs	r3, #0
 8006314:	4d05      	ldr	r5, [pc, #20]	@ (800632c <_sbrk_r+0x1c>)
 8006316:	4604      	mov	r4, r0
 8006318:	4608      	mov	r0, r1
 800631a:	602b      	str	r3, [r5, #0]
 800631c:	f7fb fa52 	bl	80017c4 <_sbrk>
 8006320:	1c43      	adds	r3, r0, #1
 8006322:	d102      	bne.n	800632a <_sbrk_r+0x1a>
 8006324:	682b      	ldr	r3, [r5, #0]
 8006326:	b103      	cbz	r3, 800632a <_sbrk_r+0x1a>
 8006328:	6023      	str	r3, [r4, #0]
 800632a:	bd38      	pop	{r3, r4, r5, pc}
 800632c:	20000440 	.word	0x20000440

08006330 <memcpy>:
 8006330:	440a      	add	r2, r1
 8006332:	4291      	cmp	r1, r2
 8006334:	f100 33ff 	add.w	r3, r0, #4294967295
 8006338:	d100      	bne.n	800633c <memcpy+0xc>
 800633a:	4770      	bx	lr
 800633c:	b510      	push	{r4, lr}
 800633e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006342:	4291      	cmp	r1, r2
 8006344:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006348:	d1f9      	bne.n	800633e <memcpy+0xe>
 800634a:	bd10      	pop	{r4, pc}

0800634c <__assert_func>:
 800634c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800634e:	4614      	mov	r4, r2
 8006350:	461a      	mov	r2, r3
 8006352:	4b09      	ldr	r3, [pc, #36]	@ (8006378 <__assert_func+0x2c>)
 8006354:	4605      	mov	r5, r0
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68d8      	ldr	r0, [r3, #12]
 800635a:	b954      	cbnz	r4, 8006372 <__assert_func+0x26>
 800635c:	4b07      	ldr	r3, [pc, #28]	@ (800637c <__assert_func+0x30>)
 800635e:	461c      	mov	r4, r3
 8006360:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006364:	9100      	str	r1, [sp, #0]
 8006366:	462b      	mov	r3, r5
 8006368:	4905      	ldr	r1, [pc, #20]	@ (8006380 <__assert_func+0x34>)
 800636a:	f000 f86f 	bl	800644c <fiprintf>
 800636e:	f000 f87f 	bl	8006470 <abort>
 8006372:	4b04      	ldr	r3, [pc, #16]	@ (8006384 <__assert_func+0x38>)
 8006374:	e7f4      	b.n	8006360 <__assert_func+0x14>
 8006376:	bf00      	nop
 8006378:	20000018 	.word	0x20000018
 800637c:	08006cc6 	.word	0x08006cc6
 8006380:	08006c98 	.word	0x08006c98
 8006384:	08006c8b 	.word	0x08006c8b

08006388 <_calloc_r>:
 8006388:	b570      	push	{r4, r5, r6, lr}
 800638a:	fba1 5402 	umull	r5, r4, r1, r2
 800638e:	b93c      	cbnz	r4, 80063a0 <_calloc_r+0x18>
 8006390:	4629      	mov	r1, r5
 8006392:	f7ff f997 	bl	80056c4 <_malloc_r>
 8006396:	4606      	mov	r6, r0
 8006398:	b928      	cbnz	r0, 80063a6 <_calloc_r+0x1e>
 800639a:	2600      	movs	r6, #0
 800639c:	4630      	mov	r0, r6
 800639e:	bd70      	pop	{r4, r5, r6, pc}
 80063a0:	220c      	movs	r2, #12
 80063a2:	6002      	str	r2, [r0, #0]
 80063a4:	e7f9      	b.n	800639a <_calloc_r+0x12>
 80063a6:	462a      	mov	r2, r5
 80063a8:	4621      	mov	r1, r4
 80063aa:	f7fe fa38 	bl	800481e <memset>
 80063ae:	e7f5      	b.n	800639c <_calloc_r+0x14>

080063b0 <__ascii_mbtowc>:
 80063b0:	b082      	sub	sp, #8
 80063b2:	b901      	cbnz	r1, 80063b6 <__ascii_mbtowc+0x6>
 80063b4:	a901      	add	r1, sp, #4
 80063b6:	b142      	cbz	r2, 80063ca <__ascii_mbtowc+0x1a>
 80063b8:	b14b      	cbz	r3, 80063ce <__ascii_mbtowc+0x1e>
 80063ba:	7813      	ldrb	r3, [r2, #0]
 80063bc:	600b      	str	r3, [r1, #0]
 80063be:	7812      	ldrb	r2, [r2, #0]
 80063c0:	1e10      	subs	r0, r2, #0
 80063c2:	bf18      	it	ne
 80063c4:	2001      	movne	r0, #1
 80063c6:	b002      	add	sp, #8
 80063c8:	4770      	bx	lr
 80063ca:	4610      	mov	r0, r2
 80063cc:	e7fb      	b.n	80063c6 <__ascii_mbtowc+0x16>
 80063ce:	f06f 0001 	mvn.w	r0, #1
 80063d2:	e7f8      	b.n	80063c6 <__ascii_mbtowc+0x16>

080063d4 <_realloc_r>:
 80063d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063d8:	4680      	mov	r8, r0
 80063da:	4615      	mov	r5, r2
 80063dc:	460c      	mov	r4, r1
 80063de:	b921      	cbnz	r1, 80063ea <_realloc_r+0x16>
 80063e0:	4611      	mov	r1, r2
 80063e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063e6:	f7ff b96d 	b.w	80056c4 <_malloc_r>
 80063ea:	b92a      	cbnz	r2, 80063f8 <_realloc_r+0x24>
 80063ec:	f7ff f8f8 	bl	80055e0 <_free_r>
 80063f0:	2400      	movs	r4, #0
 80063f2:	4620      	mov	r0, r4
 80063f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063f8:	f000 f841 	bl	800647e <_malloc_usable_size_r>
 80063fc:	4285      	cmp	r5, r0
 80063fe:	4606      	mov	r6, r0
 8006400:	d802      	bhi.n	8006408 <_realloc_r+0x34>
 8006402:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006406:	d8f4      	bhi.n	80063f2 <_realloc_r+0x1e>
 8006408:	4629      	mov	r1, r5
 800640a:	4640      	mov	r0, r8
 800640c:	f7ff f95a 	bl	80056c4 <_malloc_r>
 8006410:	4607      	mov	r7, r0
 8006412:	2800      	cmp	r0, #0
 8006414:	d0ec      	beq.n	80063f0 <_realloc_r+0x1c>
 8006416:	42b5      	cmp	r5, r6
 8006418:	462a      	mov	r2, r5
 800641a:	4621      	mov	r1, r4
 800641c:	bf28      	it	cs
 800641e:	4632      	movcs	r2, r6
 8006420:	f7ff ff86 	bl	8006330 <memcpy>
 8006424:	4621      	mov	r1, r4
 8006426:	4640      	mov	r0, r8
 8006428:	f7ff f8da 	bl	80055e0 <_free_r>
 800642c:	463c      	mov	r4, r7
 800642e:	e7e0      	b.n	80063f2 <_realloc_r+0x1e>

08006430 <__ascii_wctomb>:
 8006430:	4603      	mov	r3, r0
 8006432:	4608      	mov	r0, r1
 8006434:	b141      	cbz	r1, 8006448 <__ascii_wctomb+0x18>
 8006436:	2aff      	cmp	r2, #255	@ 0xff
 8006438:	d904      	bls.n	8006444 <__ascii_wctomb+0x14>
 800643a:	228a      	movs	r2, #138	@ 0x8a
 800643c:	f04f 30ff 	mov.w	r0, #4294967295
 8006440:	601a      	str	r2, [r3, #0]
 8006442:	4770      	bx	lr
 8006444:	2001      	movs	r0, #1
 8006446:	700a      	strb	r2, [r1, #0]
 8006448:	4770      	bx	lr
	...

0800644c <fiprintf>:
 800644c:	b40e      	push	{r1, r2, r3}
 800644e:	b503      	push	{r0, r1, lr}
 8006450:	4601      	mov	r1, r0
 8006452:	ab03      	add	r3, sp, #12
 8006454:	4805      	ldr	r0, [pc, #20]	@ (800646c <fiprintf+0x20>)
 8006456:	f853 2b04 	ldr.w	r2, [r3], #4
 800645a:	6800      	ldr	r0, [r0, #0]
 800645c:	9301      	str	r3, [sp, #4]
 800645e:	f000 f83d 	bl	80064dc <_vfiprintf_r>
 8006462:	b002      	add	sp, #8
 8006464:	f85d eb04 	ldr.w	lr, [sp], #4
 8006468:	b003      	add	sp, #12
 800646a:	4770      	bx	lr
 800646c:	20000018 	.word	0x20000018

08006470 <abort>:
 8006470:	2006      	movs	r0, #6
 8006472:	b508      	push	{r3, lr}
 8006474:	f000 fa06 	bl	8006884 <raise>
 8006478:	2001      	movs	r0, #1
 800647a:	f7fb f92e 	bl	80016da <_exit>

0800647e <_malloc_usable_size_r>:
 800647e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006482:	1f18      	subs	r0, r3, #4
 8006484:	2b00      	cmp	r3, #0
 8006486:	bfbc      	itt	lt
 8006488:	580b      	ldrlt	r3, [r1, r0]
 800648a:	18c0      	addlt	r0, r0, r3
 800648c:	4770      	bx	lr

0800648e <__sfputc_r>:
 800648e:	6893      	ldr	r3, [r2, #8]
 8006490:	b410      	push	{r4}
 8006492:	3b01      	subs	r3, #1
 8006494:	2b00      	cmp	r3, #0
 8006496:	6093      	str	r3, [r2, #8]
 8006498:	da07      	bge.n	80064aa <__sfputc_r+0x1c>
 800649a:	6994      	ldr	r4, [r2, #24]
 800649c:	42a3      	cmp	r3, r4
 800649e:	db01      	blt.n	80064a4 <__sfputc_r+0x16>
 80064a0:	290a      	cmp	r1, #10
 80064a2:	d102      	bne.n	80064aa <__sfputc_r+0x1c>
 80064a4:	bc10      	pop	{r4}
 80064a6:	f000 b931 	b.w	800670c <__swbuf_r>
 80064aa:	6813      	ldr	r3, [r2, #0]
 80064ac:	1c58      	adds	r0, r3, #1
 80064ae:	6010      	str	r0, [r2, #0]
 80064b0:	7019      	strb	r1, [r3, #0]
 80064b2:	4608      	mov	r0, r1
 80064b4:	bc10      	pop	{r4}
 80064b6:	4770      	bx	lr

080064b8 <__sfputs_r>:
 80064b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ba:	4606      	mov	r6, r0
 80064bc:	460f      	mov	r7, r1
 80064be:	4614      	mov	r4, r2
 80064c0:	18d5      	adds	r5, r2, r3
 80064c2:	42ac      	cmp	r4, r5
 80064c4:	d101      	bne.n	80064ca <__sfputs_r+0x12>
 80064c6:	2000      	movs	r0, #0
 80064c8:	e007      	b.n	80064da <__sfputs_r+0x22>
 80064ca:	463a      	mov	r2, r7
 80064cc:	4630      	mov	r0, r6
 80064ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064d2:	f7ff ffdc 	bl	800648e <__sfputc_r>
 80064d6:	1c43      	adds	r3, r0, #1
 80064d8:	d1f3      	bne.n	80064c2 <__sfputs_r+0xa>
 80064da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080064dc <_vfiprintf_r>:
 80064dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064e0:	460d      	mov	r5, r1
 80064e2:	4614      	mov	r4, r2
 80064e4:	4698      	mov	r8, r3
 80064e6:	4606      	mov	r6, r0
 80064e8:	b09d      	sub	sp, #116	@ 0x74
 80064ea:	b118      	cbz	r0, 80064f4 <_vfiprintf_r+0x18>
 80064ec:	6a03      	ldr	r3, [r0, #32]
 80064ee:	b90b      	cbnz	r3, 80064f4 <_vfiprintf_r+0x18>
 80064f0:	f7fe f8fc 	bl	80046ec <__sinit>
 80064f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80064f6:	07d9      	lsls	r1, r3, #31
 80064f8:	d405      	bmi.n	8006506 <_vfiprintf_r+0x2a>
 80064fa:	89ab      	ldrh	r3, [r5, #12]
 80064fc:	059a      	lsls	r2, r3, #22
 80064fe:	d402      	bmi.n	8006506 <_vfiprintf_r+0x2a>
 8006500:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006502:	f7fe fa0a 	bl	800491a <__retarget_lock_acquire_recursive>
 8006506:	89ab      	ldrh	r3, [r5, #12]
 8006508:	071b      	lsls	r3, r3, #28
 800650a:	d501      	bpl.n	8006510 <_vfiprintf_r+0x34>
 800650c:	692b      	ldr	r3, [r5, #16]
 800650e:	b99b      	cbnz	r3, 8006538 <_vfiprintf_r+0x5c>
 8006510:	4629      	mov	r1, r5
 8006512:	4630      	mov	r0, r6
 8006514:	f000 f938 	bl	8006788 <__swsetup_r>
 8006518:	b170      	cbz	r0, 8006538 <_vfiprintf_r+0x5c>
 800651a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800651c:	07dc      	lsls	r4, r3, #31
 800651e:	d504      	bpl.n	800652a <_vfiprintf_r+0x4e>
 8006520:	f04f 30ff 	mov.w	r0, #4294967295
 8006524:	b01d      	add	sp, #116	@ 0x74
 8006526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800652a:	89ab      	ldrh	r3, [r5, #12]
 800652c:	0598      	lsls	r0, r3, #22
 800652e:	d4f7      	bmi.n	8006520 <_vfiprintf_r+0x44>
 8006530:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006532:	f7fe f9f3 	bl	800491c <__retarget_lock_release_recursive>
 8006536:	e7f3      	b.n	8006520 <_vfiprintf_r+0x44>
 8006538:	2300      	movs	r3, #0
 800653a:	9309      	str	r3, [sp, #36]	@ 0x24
 800653c:	2320      	movs	r3, #32
 800653e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006542:	2330      	movs	r3, #48	@ 0x30
 8006544:	f04f 0901 	mov.w	r9, #1
 8006548:	f8cd 800c 	str.w	r8, [sp, #12]
 800654c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80066f8 <_vfiprintf_r+0x21c>
 8006550:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006554:	4623      	mov	r3, r4
 8006556:	469a      	mov	sl, r3
 8006558:	f813 2b01 	ldrb.w	r2, [r3], #1
 800655c:	b10a      	cbz	r2, 8006562 <_vfiprintf_r+0x86>
 800655e:	2a25      	cmp	r2, #37	@ 0x25
 8006560:	d1f9      	bne.n	8006556 <_vfiprintf_r+0x7a>
 8006562:	ebba 0b04 	subs.w	fp, sl, r4
 8006566:	d00b      	beq.n	8006580 <_vfiprintf_r+0xa4>
 8006568:	465b      	mov	r3, fp
 800656a:	4622      	mov	r2, r4
 800656c:	4629      	mov	r1, r5
 800656e:	4630      	mov	r0, r6
 8006570:	f7ff ffa2 	bl	80064b8 <__sfputs_r>
 8006574:	3001      	adds	r0, #1
 8006576:	f000 80a7 	beq.w	80066c8 <_vfiprintf_r+0x1ec>
 800657a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800657c:	445a      	add	r2, fp
 800657e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006580:	f89a 3000 	ldrb.w	r3, [sl]
 8006584:	2b00      	cmp	r3, #0
 8006586:	f000 809f 	beq.w	80066c8 <_vfiprintf_r+0x1ec>
 800658a:	2300      	movs	r3, #0
 800658c:	f04f 32ff 	mov.w	r2, #4294967295
 8006590:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006594:	f10a 0a01 	add.w	sl, sl, #1
 8006598:	9304      	str	r3, [sp, #16]
 800659a:	9307      	str	r3, [sp, #28]
 800659c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80065a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80065a2:	4654      	mov	r4, sl
 80065a4:	2205      	movs	r2, #5
 80065a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065aa:	4853      	ldr	r0, [pc, #332]	@ (80066f8 <_vfiprintf_r+0x21c>)
 80065ac:	f7fe f9b7 	bl	800491e <memchr>
 80065b0:	9a04      	ldr	r2, [sp, #16]
 80065b2:	b9d8      	cbnz	r0, 80065ec <_vfiprintf_r+0x110>
 80065b4:	06d1      	lsls	r1, r2, #27
 80065b6:	bf44      	itt	mi
 80065b8:	2320      	movmi	r3, #32
 80065ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065be:	0713      	lsls	r3, r2, #28
 80065c0:	bf44      	itt	mi
 80065c2:	232b      	movmi	r3, #43	@ 0x2b
 80065c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065c8:	f89a 3000 	ldrb.w	r3, [sl]
 80065cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80065ce:	d015      	beq.n	80065fc <_vfiprintf_r+0x120>
 80065d0:	4654      	mov	r4, sl
 80065d2:	2000      	movs	r0, #0
 80065d4:	f04f 0c0a 	mov.w	ip, #10
 80065d8:	9a07      	ldr	r2, [sp, #28]
 80065da:	4621      	mov	r1, r4
 80065dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065e0:	3b30      	subs	r3, #48	@ 0x30
 80065e2:	2b09      	cmp	r3, #9
 80065e4:	d94b      	bls.n	800667e <_vfiprintf_r+0x1a2>
 80065e6:	b1b0      	cbz	r0, 8006616 <_vfiprintf_r+0x13a>
 80065e8:	9207      	str	r2, [sp, #28]
 80065ea:	e014      	b.n	8006616 <_vfiprintf_r+0x13a>
 80065ec:	eba0 0308 	sub.w	r3, r0, r8
 80065f0:	fa09 f303 	lsl.w	r3, r9, r3
 80065f4:	4313      	orrs	r3, r2
 80065f6:	46a2      	mov	sl, r4
 80065f8:	9304      	str	r3, [sp, #16]
 80065fa:	e7d2      	b.n	80065a2 <_vfiprintf_r+0xc6>
 80065fc:	9b03      	ldr	r3, [sp, #12]
 80065fe:	1d19      	adds	r1, r3, #4
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	9103      	str	r1, [sp, #12]
 8006604:	2b00      	cmp	r3, #0
 8006606:	bfbb      	ittet	lt
 8006608:	425b      	neglt	r3, r3
 800660a:	f042 0202 	orrlt.w	r2, r2, #2
 800660e:	9307      	strge	r3, [sp, #28]
 8006610:	9307      	strlt	r3, [sp, #28]
 8006612:	bfb8      	it	lt
 8006614:	9204      	strlt	r2, [sp, #16]
 8006616:	7823      	ldrb	r3, [r4, #0]
 8006618:	2b2e      	cmp	r3, #46	@ 0x2e
 800661a:	d10a      	bne.n	8006632 <_vfiprintf_r+0x156>
 800661c:	7863      	ldrb	r3, [r4, #1]
 800661e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006620:	d132      	bne.n	8006688 <_vfiprintf_r+0x1ac>
 8006622:	9b03      	ldr	r3, [sp, #12]
 8006624:	3402      	adds	r4, #2
 8006626:	1d1a      	adds	r2, r3, #4
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	9203      	str	r2, [sp, #12]
 800662c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006630:	9305      	str	r3, [sp, #20]
 8006632:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80066fc <_vfiprintf_r+0x220>
 8006636:	2203      	movs	r2, #3
 8006638:	4650      	mov	r0, sl
 800663a:	7821      	ldrb	r1, [r4, #0]
 800663c:	f7fe f96f 	bl	800491e <memchr>
 8006640:	b138      	cbz	r0, 8006652 <_vfiprintf_r+0x176>
 8006642:	2240      	movs	r2, #64	@ 0x40
 8006644:	9b04      	ldr	r3, [sp, #16]
 8006646:	eba0 000a 	sub.w	r0, r0, sl
 800664a:	4082      	lsls	r2, r0
 800664c:	4313      	orrs	r3, r2
 800664e:	3401      	adds	r4, #1
 8006650:	9304      	str	r3, [sp, #16]
 8006652:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006656:	2206      	movs	r2, #6
 8006658:	4829      	ldr	r0, [pc, #164]	@ (8006700 <_vfiprintf_r+0x224>)
 800665a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800665e:	f7fe f95e 	bl	800491e <memchr>
 8006662:	2800      	cmp	r0, #0
 8006664:	d03f      	beq.n	80066e6 <_vfiprintf_r+0x20a>
 8006666:	4b27      	ldr	r3, [pc, #156]	@ (8006704 <_vfiprintf_r+0x228>)
 8006668:	bb1b      	cbnz	r3, 80066b2 <_vfiprintf_r+0x1d6>
 800666a:	9b03      	ldr	r3, [sp, #12]
 800666c:	3307      	adds	r3, #7
 800666e:	f023 0307 	bic.w	r3, r3, #7
 8006672:	3308      	adds	r3, #8
 8006674:	9303      	str	r3, [sp, #12]
 8006676:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006678:	443b      	add	r3, r7
 800667a:	9309      	str	r3, [sp, #36]	@ 0x24
 800667c:	e76a      	b.n	8006554 <_vfiprintf_r+0x78>
 800667e:	460c      	mov	r4, r1
 8006680:	2001      	movs	r0, #1
 8006682:	fb0c 3202 	mla	r2, ip, r2, r3
 8006686:	e7a8      	b.n	80065da <_vfiprintf_r+0xfe>
 8006688:	2300      	movs	r3, #0
 800668a:	f04f 0c0a 	mov.w	ip, #10
 800668e:	4619      	mov	r1, r3
 8006690:	3401      	adds	r4, #1
 8006692:	9305      	str	r3, [sp, #20]
 8006694:	4620      	mov	r0, r4
 8006696:	f810 2b01 	ldrb.w	r2, [r0], #1
 800669a:	3a30      	subs	r2, #48	@ 0x30
 800669c:	2a09      	cmp	r2, #9
 800669e:	d903      	bls.n	80066a8 <_vfiprintf_r+0x1cc>
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d0c6      	beq.n	8006632 <_vfiprintf_r+0x156>
 80066a4:	9105      	str	r1, [sp, #20]
 80066a6:	e7c4      	b.n	8006632 <_vfiprintf_r+0x156>
 80066a8:	4604      	mov	r4, r0
 80066aa:	2301      	movs	r3, #1
 80066ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80066b0:	e7f0      	b.n	8006694 <_vfiprintf_r+0x1b8>
 80066b2:	ab03      	add	r3, sp, #12
 80066b4:	9300      	str	r3, [sp, #0]
 80066b6:	462a      	mov	r2, r5
 80066b8:	4630      	mov	r0, r6
 80066ba:	4b13      	ldr	r3, [pc, #76]	@ (8006708 <_vfiprintf_r+0x22c>)
 80066bc:	a904      	add	r1, sp, #16
 80066be:	f7fd fbcb 	bl	8003e58 <_printf_float>
 80066c2:	4607      	mov	r7, r0
 80066c4:	1c78      	adds	r0, r7, #1
 80066c6:	d1d6      	bne.n	8006676 <_vfiprintf_r+0x19a>
 80066c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80066ca:	07d9      	lsls	r1, r3, #31
 80066cc:	d405      	bmi.n	80066da <_vfiprintf_r+0x1fe>
 80066ce:	89ab      	ldrh	r3, [r5, #12]
 80066d0:	059a      	lsls	r2, r3, #22
 80066d2:	d402      	bmi.n	80066da <_vfiprintf_r+0x1fe>
 80066d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80066d6:	f7fe f921 	bl	800491c <__retarget_lock_release_recursive>
 80066da:	89ab      	ldrh	r3, [r5, #12]
 80066dc:	065b      	lsls	r3, r3, #25
 80066de:	f53f af1f 	bmi.w	8006520 <_vfiprintf_r+0x44>
 80066e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80066e4:	e71e      	b.n	8006524 <_vfiprintf_r+0x48>
 80066e6:	ab03      	add	r3, sp, #12
 80066e8:	9300      	str	r3, [sp, #0]
 80066ea:	462a      	mov	r2, r5
 80066ec:	4630      	mov	r0, r6
 80066ee:	4b06      	ldr	r3, [pc, #24]	@ (8006708 <_vfiprintf_r+0x22c>)
 80066f0:	a904      	add	r1, sp, #16
 80066f2:	f7fd fe4f 	bl	8004394 <_printf_i>
 80066f6:	e7e4      	b.n	80066c2 <_vfiprintf_r+0x1e6>
 80066f8:	08006c70 	.word	0x08006c70
 80066fc:	08006c76 	.word	0x08006c76
 8006700:	08006c7a 	.word	0x08006c7a
 8006704:	08003e59 	.word	0x08003e59
 8006708:	080064b9 	.word	0x080064b9

0800670c <__swbuf_r>:
 800670c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800670e:	460e      	mov	r6, r1
 8006710:	4614      	mov	r4, r2
 8006712:	4605      	mov	r5, r0
 8006714:	b118      	cbz	r0, 800671e <__swbuf_r+0x12>
 8006716:	6a03      	ldr	r3, [r0, #32]
 8006718:	b90b      	cbnz	r3, 800671e <__swbuf_r+0x12>
 800671a:	f7fd ffe7 	bl	80046ec <__sinit>
 800671e:	69a3      	ldr	r3, [r4, #24]
 8006720:	60a3      	str	r3, [r4, #8]
 8006722:	89a3      	ldrh	r3, [r4, #12]
 8006724:	071a      	lsls	r2, r3, #28
 8006726:	d501      	bpl.n	800672c <__swbuf_r+0x20>
 8006728:	6923      	ldr	r3, [r4, #16]
 800672a:	b943      	cbnz	r3, 800673e <__swbuf_r+0x32>
 800672c:	4621      	mov	r1, r4
 800672e:	4628      	mov	r0, r5
 8006730:	f000 f82a 	bl	8006788 <__swsetup_r>
 8006734:	b118      	cbz	r0, 800673e <__swbuf_r+0x32>
 8006736:	f04f 37ff 	mov.w	r7, #4294967295
 800673a:	4638      	mov	r0, r7
 800673c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800673e:	6823      	ldr	r3, [r4, #0]
 8006740:	6922      	ldr	r2, [r4, #16]
 8006742:	b2f6      	uxtb	r6, r6
 8006744:	1a98      	subs	r0, r3, r2
 8006746:	6963      	ldr	r3, [r4, #20]
 8006748:	4637      	mov	r7, r6
 800674a:	4283      	cmp	r3, r0
 800674c:	dc05      	bgt.n	800675a <__swbuf_r+0x4e>
 800674e:	4621      	mov	r1, r4
 8006750:	4628      	mov	r0, r5
 8006752:	f7ff fd9b 	bl	800628c <_fflush_r>
 8006756:	2800      	cmp	r0, #0
 8006758:	d1ed      	bne.n	8006736 <__swbuf_r+0x2a>
 800675a:	68a3      	ldr	r3, [r4, #8]
 800675c:	3b01      	subs	r3, #1
 800675e:	60a3      	str	r3, [r4, #8]
 8006760:	6823      	ldr	r3, [r4, #0]
 8006762:	1c5a      	adds	r2, r3, #1
 8006764:	6022      	str	r2, [r4, #0]
 8006766:	701e      	strb	r6, [r3, #0]
 8006768:	6962      	ldr	r2, [r4, #20]
 800676a:	1c43      	adds	r3, r0, #1
 800676c:	429a      	cmp	r2, r3
 800676e:	d004      	beq.n	800677a <__swbuf_r+0x6e>
 8006770:	89a3      	ldrh	r3, [r4, #12]
 8006772:	07db      	lsls	r3, r3, #31
 8006774:	d5e1      	bpl.n	800673a <__swbuf_r+0x2e>
 8006776:	2e0a      	cmp	r6, #10
 8006778:	d1df      	bne.n	800673a <__swbuf_r+0x2e>
 800677a:	4621      	mov	r1, r4
 800677c:	4628      	mov	r0, r5
 800677e:	f7ff fd85 	bl	800628c <_fflush_r>
 8006782:	2800      	cmp	r0, #0
 8006784:	d0d9      	beq.n	800673a <__swbuf_r+0x2e>
 8006786:	e7d6      	b.n	8006736 <__swbuf_r+0x2a>

08006788 <__swsetup_r>:
 8006788:	b538      	push	{r3, r4, r5, lr}
 800678a:	4b29      	ldr	r3, [pc, #164]	@ (8006830 <__swsetup_r+0xa8>)
 800678c:	4605      	mov	r5, r0
 800678e:	6818      	ldr	r0, [r3, #0]
 8006790:	460c      	mov	r4, r1
 8006792:	b118      	cbz	r0, 800679c <__swsetup_r+0x14>
 8006794:	6a03      	ldr	r3, [r0, #32]
 8006796:	b90b      	cbnz	r3, 800679c <__swsetup_r+0x14>
 8006798:	f7fd ffa8 	bl	80046ec <__sinit>
 800679c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067a0:	0719      	lsls	r1, r3, #28
 80067a2:	d422      	bmi.n	80067ea <__swsetup_r+0x62>
 80067a4:	06da      	lsls	r2, r3, #27
 80067a6:	d407      	bmi.n	80067b8 <__swsetup_r+0x30>
 80067a8:	2209      	movs	r2, #9
 80067aa:	602a      	str	r2, [r5, #0]
 80067ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067b0:	f04f 30ff 	mov.w	r0, #4294967295
 80067b4:	81a3      	strh	r3, [r4, #12]
 80067b6:	e033      	b.n	8006820 <__swsetup_r+0x98>
 80067b8:	0758      	lsls	r0, r3, #29
 80067ba:	d512      	bpl.n	80067e2 <__swsetup_r+0x5a>
 80067bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80067be:	b141      	cbz	r1, 80067d2 <__swsetup_r+0x4a>
 80067c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80067c4:	4299      	cmp	r1, r3
 80067c6:	d002      	beq.n	80067ce <__swsetup_r+0x46>
 80067c8:	4628      	mov	r0, r5
 80067ca:	f7fe ff09 	bl	80055e0 <_free_r>
 80067ce:	2300      	movs	r3, #0
 80067d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80067d2:	89a3      	ldrh	r3, [r4, #12]
 80067d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80067d8:	81a3      	strh	r3, [r4, #12]
 80067da:	2300      	movs	r3, #0
 80067dc:	6063      	str	r3, [r4, #4]
 80067de:	6923      	ldr	r3, [r4, #16]
 80067e0:	6023      	str	r3, [r4, #0]
 80067e2:	89a3      	ldrh	r3, [r4, #12]
 80067e4:	f043 0308 	orr.w	r3, r3, #8
 80067e8:	81a3      	strh	r3, [r4, #12]
 80067ea:	6923      	ldr	r3, [r4, #16]
 80067ec:	b94b      	cbnz	r3, 8006802 <__swsetup_r+0x7a>
 80067ee:	89a3      	ldrh	r3, [r4, #12]
 80067f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80067f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067f8:	d003      	beq.n	8006802 <__swsetup_r+0x7a>
 80067fa:	4621      	mov	r1, r4
 80067fc:	4628      	mov	r0, r5
 80067fe:	f000 f882 	bl	8006906 <__smakebuf_r>
 8006802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006806:	f013 0201 	ands.w	r2, r3, #1
 800680a:	d00a      	beq.n	8006822 <__swsetup_r+0x9a>
 800680c:	2200      	movs	r2, #0
 800680e:	60a2      	str	r2, [r4, #8]
 8006810:	6962      	ldr	r2, [r4, #20]
 8006812:	4252      	negs	r2, r2
 8006814:	61a2      	str	r2, [r4, #24]
 8006816:	6922      	ldr	r2, [r4, #16]
 8006818:	b942      	cbnz	r2, 800682c <__swsetup_r+0xa4>
 800681a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800681e:	d1c5      	bne.n	80067ac <__swsetup_r+0x24>
 8006820:	bd38      	pop	{r3, r4, r5, pc}
 8006822:	0799      	lsls	r1, r3, #30
 8006824:	bf58      	it	pl
 8006826:	6962      	ldrpl	r2, [r4, #20]
 8006828:	60a2      	str	r2, [r4, #8]
 800682a:	e7f4      	b.n	8006816 <__swsetup_r+0x8e>
 800682c:	2000      	movs	r0, #0
 800682e:	e7f7      	b.n	8006820 <__swsetup_r+0x98>
 8006830:	20000018 	.word	0x20000018

08006834 <_raise_r>:
 8006834:	291f      	cmp	r1, #31
 8006836:	b538      	push	{r3, r4, r5, lr}
 8006838:	4605      	mov	r5, r0
 800683a:	460c      	mov	r4, r1
 800683c:	d904      	bls.n	8006848 <_raise_r+0x14>
 800683e:	2316      	movs	r3, #22
 8006840:	6003      	str	r3, [r0, #0]
 8006842:	f04f 30ff 	mov.w	r0, #4294967295
 8006846:	bd38      	pop	{r3, r4, r5, pc}
 8006848:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800684a:	b112      	cbz	r2, 8006852 <_raise_r+0x1e>
 800684c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006850:	b94b      	cbnz	r3, 8006866 <_raise_r+0x32>
 8006852:	4628      	mov	r0, r5
 8006854:	f000 f830 	bl	80068b8 <_getpid_r>
 8006858:	4622      	mov	r2, r4
 800685a:	4601      	mov	r1, r0
 800685c:	4628      	mov	r0, r5
 800685e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006862:	f000 b817 	b.w	8006894 <_kill_r>
 8006866:	2b01      	cmp	r3, #1
 8006868:	d00a      	beq.n	8006880 <_raise_r+0x4c>
 800686a:	1c59      	adds	r1, r3, #1
 800686c:	d103      	bne.n	8006876 <_raise_r+0x42>
 800686e:	2316      	movs	r3, #22
 8006870:	6003      	str	r3, [r0, #0]
 8006872:	2001      	movs	r0, #1
 8006874:	e7e7      	b.n	8006846 <_raise_r+0x12>
 8006876:	2100      	movs	r1, #0
 8006878:	4620      	mov	r0, r4
 800687a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800687e:	4798      	blx	r3
 8006880:	2000      	movs	r0, #0
 8006882:	e7e0      	b.n	8006846 <_raise_r+0x12>

08006884 <raise>:
 8006884:	4b02      	ldr	r3, [pc, #8]	@ (8006890 <raise+0xc>)
 8006886:	4601      	mov	r1, r0
 8006888:	6818      	ldr	r0, [r3, #0]
 800688a:	f7ff bfd3 	b.w	8006834 <_raise_r>
 800688e:	bf00      	nop
 8006890:	20000018 	.word	0x20000018

08006894 <_kill_r>:
 8006894:	b538      	push	{r3, r4, r5, lr}
 8006896:	2300      	movs	r3, #0
 8006898:	4d06      	ldr	r5, [pc, #24]	@ (80068b4 <_kill_r+0x20>)
 800689a:	4604      	mov	r4, r0
 800689c:	4608      	mov	r0, r1
 800689e:	4611      	mov	r1, r2
 80068a0:	602b      	str	r3, [r5, #0]
 80068a2:	f7fa ff0a 	bl	80016ba <_kill>
 80068a6:	1c43      	adds	r3, r0, #1
 80068a8:	d102      	bne.n	80068b0 <_kill_r+0x1c>
 80068aa:	682b      	ldr	r3, [r5, #0]
 80068ac:	b103      	cbz	r3, 80068b0 <_kill_r+0x1c>
 80068ae:	6023      	str	r3, [r4, #0]
 80068b0:	bd38      	pop	{r3, r4, r5, pc}
 80068b2:	bf00      	nop
 80068b4:	20000440 	.word	0x20000440

080068b8 <_getpid_r>:
 80068b8:	f7fa bef8 	b.w	80016ac <_getpid>

080068bc <__swhatbuf_r>:
 80068bc:	b570      	push	{r4, r5, r6, lr}
 80068be:	460c      	mov	r4, r1
 80068c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068c4:	4615      	mov	r5, r2
 80068c6:	2900      	cmp	r1, #0
 80068c8:	461e      	mov	r6, r3
 80068ca:	b096      	sub	sp, #88	@ 0x58
 80068cc:	da0c      	bge.n	80068e8 <__swhatbuf_r+0x2c>
 80068ce:	89a3      	ldrh	r3, [r4, #12]
 80068d0:	2100      	movs	r1, #0
 80068d2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80068d6:	bf14      	ite	ne
 80068d8:	2340      	movne	r3, #64	@ 0x40
 80068da:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80068de:	2000      	movs	r0, #0
 80068e0:	6031      	str	r1, [r6, #0]
 80068e2:	602b      	str	r3, [r5, #0]
 80068e4:	b016      	add	sp, #88	@ 0x58
 80068e6:	bd70      	pop	{r4, r5, r6, pc}
 80068e8:	466a      	mov	r2, sp
 80068ea:	f000 f849 	bl	8006980 <_fstat_r>
 80068ee:	2800      	cmp	r0, #0
 80068f0:	dbed      	blt.n	80068ce <__swhatbuf_r+0x12>
 80068f2:	9901      	ldr	r1, [sp, #4]
 80068f4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80068f8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80068fc:	4259      	negs	r1, r3
 80068fe:	4159      	adcs	r1, r3
 8006900:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006904:	e7eb      	b.n	80068de <__swhatbuf_r+0x22>

08006906 <__smakebuf_r>:
 8006906:	898b      	ldrh	r3, [r1, #12]
 8006908:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800690a:	079d      	lsls	r5, r3, #30
 800690c:	4606      	mov	r6, r0
 800690e:	460c      	mov	r4, r1
 8006910:	d507      	bpl.n	8006922 <__smakebuf_r+0x1c>
 8006912:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006916:	6023      	str	r3, [r4, #0]
 8006918:	6123      	str	r3, [r4, #16]
 800691a:	2301      	movs	r3, #1
 800691c:	6163      	str	r3, [r4, #20]
 800691e:	b003      	add	sp, #12
 8006920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006922:	466a      	mov	r2, sp
 8006924:	ab01      	add	r3, sp, #4
 8006926:	f7ff ffc9 	bl	80068bc <__swhatbuf_r>
 800692a:	9f00      	ldr	r7, [sp, #0]
 800692c:	4605      	mov	r5, r0
 800692e:	4639      	mov	r1, r7
 8006930:	4630      	mov	r0, r6
 8006932:	f7fe fec7 	bl	80056c4 <_malloc_r>
 8006936:	b948      	cbnz	r0, 800694c <__smakebuf_r+0x46>
 8006938:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800693c:	059a      	lsls	r2, r3, #22
 800693e:	d4ee      	bmi.n	800691e <__smakebuf_r+0x18>
 8006940:	f023 0303 	bic.w	r3, r3, #3
 8006944:	f043 0302 	orr.w	r3, r3, #2
 8006948:	81a3      	strh	r3, [r4, #12]
 800694a:	e7e2      	b.n	8006912 <__smakebuf_r+0xc>
 800694c:	89a3      	ldrh	r3, [r4, #12]
 800694e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006952:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006956:	81a3      	strh	r3, [r4, #12]
 8006958:	9b01      	ldr	r3, [sp, #4]
 800695a:	6020      	str	r0, [r4, #0]
 800695c:	b15b      	cbz	r3, 8006976 <__smakebuf_r+0x70>
 800695e:	4630      	mov	r0, r6
 8006960:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006964:	f000 f81e 	bl	80069a4 <_isatty_r>
 8006968:	b128      	cbz	r0, 8006976 <__smakebuf_r+0x70>
 800696a:	89a3      	ldrh	r3, [r4, #12]
 800696c:	f023 0303 	bic.w	r3, r3, #3
 8006970:	f043 0301 	orr.w	r3, r3, #1
 8006974:	81a3      	strh	r3, [r4, #12]
 8006976:	89a3      	ldrh	r3, [r4, #12]
 8006978:	431d      	orrs	r5, r3
 800697a:	81a5      	strh	r5, [r4, #12]
 800697c:	e7cf      	b.n	800691e <__smakebuf_r+0x18>
	...

08006980 <_fstat_r>:
 8006980:	b538      	push	{r3, r4, r5, lr}
 8006982:	2300      	movs	r3, #0
 8006984:	4d06      	ldr	r5, [pc, #24]	@ (80069a0 <_fstat_r+0x20>)
 8006986:	4604      	mov	r4, r0
 8006988:	4608      	mov	r0, r1
 800698a:	4611      	mov	r1, r2
 800698c:	602b      	str	r3, [r5, #0]
 800698e:	f7fa fef3 	bl	8001778 <_fstat>
 8006992:	1c43      	adds	r3, r0, #1
 8006994:	d102      	bne.n	800699c <_fstat_r+0x1c>
 8006996:	682b      	ldr	r3, [r5, #0]
 8006998:	b103      	cbz	r3, 800699c <_fstat_r+0x1c>
 800699a:	6023      	str	r3, [r4, #0]
 800699c:	bd38      	pop	{r3, r4, r5, pc}
 800699e:	bf00      	nop
 80069a0:	20000440 	.word	0x20000440

080069a4 <_isatty_r>:
 80069a4:	b538      	push	{r3, r4, r5, lr}
 80069a6:	2300      	movs	r3, #0
 80069a8:	4d05      	ldr	r5, [pc, #20]	@ (80069c0 <_isatty_r+0x1c>)
 80069aa:	4604      	mov	r4, r0
 80069ac:	4608      	mov	r0, r1
 80069ae:	602b      	str	r3, [r5, #0]
 80069b0:	f7fa fef1 	bl	8001796 <_isatty>
 80069b4:	1c43      	adds	r3, r0, #1
 80069b6:	d102      	bne.n	80069be <_isatty_r+0x1a>
 80069b8:	682b      	ldr	r3, [r5, #0]
 80069ba:	b103      	cbz	r3, 80069be <_isatty_r+0x1a>
 80069bc:	6023      	str	r3, [r4, #0]
 80069be:	bd38      	pop	{r3, r4, r5, pc}
 80069c0:	20000440 	.word	0x20000440

080069c4 <_init>:
 80069c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069c6:	bf00      	nop
 80069c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ca:	bc08      	pop	{r3}
 80069cc:	469e      	mov	lr, r3
 80069ce:	4770      	bx	lr

080069d0 <_fini>:
 80069d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069d2:	bf00      	nop
 80069d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069d6:	bc08      	pop	{r3}
 80069d8:	469e      	mov	lr, r3
 80069da:	4770      	bx	lr
